<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GLSharp</name>
    </assembly>
    <members>
        <member name="T:GLSharp.IGLSControl">
            <summary>
            OpenGLによって描画されるコントロールであることを表す。
            </summary>
        </member>
        <member name="M:GLSharp.IGLSControl.RegenarateRenderingContext">
            <summary>
            OpenGLレンダリングコンテキストを再生成・初期化する。
            </summary>
        </member>
        <member name="M:GLSharp.IGLSControl.FindJoystics(System.Boolean)">
            <summary>
            ジョイスティックを検出、取得する。
            </summary>
            <param name="reset">trueを指定すると、取得済みのデバイスを解放し再取得する。</param>
        </member>
        <member name="M:GLSharp.IGLSControl.CaptureJoystics">
            <summary>
            <para>ジョイスティックをキャプチャする。</para>
            </summary>
        </member>
        <member name="M:GLSharp.IGLSControl.ReleaseJoysticsCapture">
            <summary>
            <para>キャプチャされているジョイスティックを解放する。</para>
            <para>ジョイスティックが未検出、または解放済みの場合は、何も行われない。</para>
            </summary>
        </member>
        <member name="M:GLSharp.IGLSControl.GetJoysticsState">
            <summary>
            <para>ジョイスティックの状態を取得し、
            Joystic1、Joystic2プロパティの状態を更新する。</para>
            </summary>
        </member>
        <member name="P:GLSharp.IGLSControl.RenderingControl">
            <summary>
            OpenGLによって描画されるコントロールを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.IGLSControl.Context">
            <summary>
            OpenGLレンダリングコンテキストを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.IGLSControl.RenderingScene">
            <summary>
            描画されるシーンを取得・設定する。
            </summary>
        </member>
        <member name="P:GLSharp.IGLSControl.PixelFormat">
            <summary>
            レンダリングコンテキストの初期化に使用されるピクセルフォーマットを取得・設定する。
            </summary>
        </member>
        <member name="P:GLSharp.IGLSControl.PixelFormatAttribute">
            <summary>
            レンダリングコンテキストの初期化に使用されるピクセルフォーマットの属性を取得・設定する。
            </summary>
        </member>
        <member name="P:GLSharp.IGLSControl.PixelFormatIndex">
            <summary>
            レンダリングコンテキストのピクセルフォーマットのインデックスを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.IGLSControl.PixelFormatAttributesSupported">
            <summary>
            PixelFormatAttributeを使用したレンダリングコンテキストの初期化がサポートされているかどうかを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.IGLSControl.JoysticEventsEnabled">
            <summary>
            <para>[get,set] ジョイスティックイベントを発生させるかどうか。</para>
            <para>デフォルトはflase。</para>
            </summary>
        </member>
        <member name="P:GLSharp.IGLSControl.Joystic1">
            <summary>
            <para>[get] ジョイスティック1。</para>
            <para>接続されていない場合はnullが返される。</para>
            <para>FindJoystics()メソッドによって設定される。</para>
            <para>ジョイスティックイベント、またはGetJoysticsState()メソッドによって
            軸とボタンの値が更新される。</para>
            </summary>
        </member>
        <member name="P:GLSharp.IGLSControl.Joystic2">
            <summary>
            <para>[get] ジョイスティック2。</para>
            <para>FindJoystics()メソッドによって設定される。</para>
            <para>ジョイスティックイベント、またはGetJoysticsState()メソッドによって
            軸とボタンの値が更新される。</para>
            <para>接続されていない場合はnullが返される。</para>
            </summary>
        </member>
        <member name="P:GLSharp.IGLSControl.JoysticPollingPeriod">
            <summary>
            [get,set] ジョイスティックのポーリング周期。
            <para>ただし、設定しても CaptureJoystics() メソッドを呼び出すまで適用されない。</para>
            </summary>
        </member>
        <member name="T:GLSharp.GLSForm">
            <summary>
            OpenGLをサポートするフォーム
            </summary>
        </member>
        <member name="M:GLSharp.GLSForm.FindJoystics(System.Boolean)">
            <summary>
            ジョイスティックを検出、取得する。
            </summary>
            <param name="reset">trueを指定すると、取得済みのデバイスを解放し再取得する。</param>
        </member>
        <member name="M:GLSharp.GLSForm.CaptureJoystics">
            <summary>
            <para>ジョイスティックをキャプチャする。</para>
            </summary>
        </member>
        <member name="M:GLSharp.GLSForm.ReleaseJoysticsCapture">
            <summary>
            <para>キャプチャされているジョイスティックを解放する。</para>
            <para>ジョイスティックが未検出、または解放済みの場合は、何も行われない。</para>
            </summary>
        </member>
        <member name="M:GLSharp.GLSForm.GetJoysticsState">
            <summary>
            <para>ジョイスティックの状態を取得し、
            Joystic1、Joystic2プロパティの状態を更新する。</para>
            </summary>
        </member>
        <member name="M:GLSharp.GLSForm.OnHandleCreated(System.EventArgs)">
            <summary>
            <para>このコントロールに関連付けられたハンドルが作成されたときに呼び出される。</para>
            <para>ここでOpenGLレンダリングコンテキストが作成されるので、
            このイベント以降でContextプロパティが使用可能になる。</para>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GLSharp.GLSForm.RegenarateRenderingContext">
            <summary>
            <para>OpenGLレンダリングコンテキストを再作成・初期化します。</para>
            </summary>
        </member>
        <member name="M:GLSharp.GLSForm.DestroyContext">
            <summary>
            レンダリングコンテキストを破棄します。
            </summary>
        </member>
        <member name="M:GLSharp.GLSForm.DestroyHandle">
            <summary>
            このフォームに関連付けられたOpenGLレンダリングコンテキストを破棄し、
            続いてフォーム自身のハンドルを破棄します。
            </summary>
        </member>
        <member name="M:GLSharp.GLSForm.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            OpenGLシーンを描画する。
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GLSharp.GLSForm.OnPaintDesignMode(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            デザイナでの仮描画。
            DesignModeがtrueで、かつRenderingSceneがnullの時のみ描画を行う。
            </summary>
        </member>
        <member name="M:GLSharp.GLSForm.OnClientSizeChanged(System.EventArgs)">
            <summary>
            <para>描画領域のサイズが変更されたときに呼び出される。</para>
            <para></para>
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:GLSharp.GLSForm.isFullScreen">
            <summary>
            フルスクリーン・モードかどうかのフラグ
            </summary>
        </member>
        <member name="F:GLSharp.GLSForm.prevFormState">
            <summary>
            フルスクリーン表示前のウィンドウの状態を保存する
            </summary>
        </member>
        <member name="F:GLSharp.GLSForm.prevFormStyle">
            <summary>
            通常表示時のフォームの境界線スタイルを保存する
            </summary>
        </member>
        <member name="F:GLSharp.GLSForm.prevFormSize">
            <summary>
            通常表示時のウィンドウのサイズを保存する
            </summary>
        </member>
        <member name="M:GLSharp.GLSForm.SwitchScreenMode(OpenTK.DisplayDevice)">
            <summary>
            フルスクリーンモード/ウィンドウモードの切り替えを行う。
            </summary>
            <param name="display">フルスクリーン表示するディスプレイ</param>
        </member>
        <member name="F:GLSharp.GLSForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:GLSharp.GLSForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:GLSharp.GLSForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:GLSharp.GLSForm.RenderingScene">
            <summary>
            描画するOpenGLシーンを取得・設定する。
            </summary>
        </member>
        <member name="P:GLSharp.GLSForm.Context">
            <summary>
            このフォームのOpenGLレンダリングコンテキスト
            </summary>
        </member>
        <member name="P:GLSharp.GLSForm.SwapControlSupported">
            <summary>
            垂直同期が利用可能かどうかを取得する。
            falseの場合は垂直同期がサポートされておらず、使用できない。
            </summary>
        </member>
        <member name="P:GLSharp.GLSForm.SwapInterval">
            <summary>
            <para>垂直同期のインターバルを取得・設定する。</para>
            <para>0:垂直同期しない。 0以上:垂直同期する。</para>
            <para>垂直同期がサポートされていなければ、設定しても無視され、常に0を返す。</para>
            </summary>
        </member>
        <member name="P:GLSharp.GLSForm.Joystic1">
            <summary>
            <para>[get] ジョイスティック1。</para>
            <para>接続されていない場合はnullが返される。</para>
            <para>FindJoystics()メソッドによって設定される。</para>
            <para>ジョイスティックイベント、またはGetJoysticsState()メソッドによって
            軸とボタンの値が更新される。</para>
            </summary>
        </member>
        <member name="P:GLSharp.GLSForm.Joystic2">
            <summary>
            <para>[get] ジョイスティック2。</para>
            <para>FindJoystics()メソッドによって設定される。</para>
            <para>ジョイスティックイベント、またはGetJoysticsState()メソッドによって
            軸とボタンの値が更新される。</para>
            <para>接続されていない場合はnullが返される。</para>
            </summary>
        </member>
        <member name="P:GLSharp.GLSForm.JoysticPollingPeriod">
            <summary>
            [get,set] ジョイスティックのポーリング周期。
            <para>ただし、設定しても CaptureJoystics() メソッドを呼び出すまで適用されない。</para>
            </summary>
        </member>
        <member name="P:GLSharp.GLSForm.JoysticEventsEnabled">
            <summary>
            <para>[get,set] ジョイスティックイベントを発生させるかどうか。</para>
            <para>デフォルトはflase。</para>
            </summary>
        </member>
        <member name="P:GLSharp.GLSForm.RenderingControl">
            <summary>
            OpenGLによって描画されるコントロールを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.GLSForm.IsFullScreen">
            <summary>
            フルスクリーン・モードかどうかを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.GLSForm.FullScreenResolution">
            <summary>
            <para>フルスクリーンモード時に設定されるディスプレイの解像度を取得・設定する。</para>
            <para>デフォルトは640*480ピクセル。</para>
            </summary>
        </member>
        <member name="P:GLSharp.GLSForm.FullScreenAutoRestoreResolution">
            <summary>
            <para>フルスクリーンモード中にこのフォームが非アクティブになったときに、
            自動的に解像度を戻すかどうかを取得・設定する。</para>
            <para>ダイアログなどで一時的に非アクティブになり、
            その後確実にアクティブになることがわかっている場合は、
            そのダイアログを表示中にのみ、このプロパティをfalseにしておくといいかも。</para>
            </summary>
        </member>
        <member name="T:GLSharp.CameraMode">
            <summary>
            カメラのモードを指定する。
            </summary>
        </member>
        <member name="F:GLSharp.CameraMode.Pinned">
            <summary>
            固定
            </summary>
        </member>
        <member name="F:GLSharp.CameraMode.Free">
            <summary>
            フリー
            </summary>
        </member>
        <member name="F:GLSharp.CameraMode.Walk">
            <summary>
            ウォークモード（カメラの上方向の向き固定）
            </summary>
        </member>
        <member name="F:GLSharp.CameraMode.Eye">
            <summary>
            主観視点
            </summary>
        </member>
        <member name="T:GLSharp.ProjectionMode">
            <summary>
            カメラの射影変換を指定する。
            </summary>
        </member>
        <member name="F:GLSharp.ProjectionMode.Perspective">
            <summary>
            透視射影
            </summary>
        </member>
        <member name="F:GLSharp.ProjectionMode.Ortho">
            <summary>
            正射影
            </summary>
        </member>
        <member name="F:GLSharp.ProjectionMode.Frusutum">
            <summary>
            任意の視錐体
            </summary>
        </member>
        <member name="F:GLSharp.ProjectionMode.Custum">
            <summary>
            任意の射影変換
            </summary>
        </member>
        <member name="T:GLSharp.Camera">
            <summary>
            カメラ（視点）を表すクラス。
            </summary>
            <remarks>
            <para>
            void ApplyView(), void ApplyProjection() 
            この2つのメソッドのみ、OpenGL関数を使用する。
            </para>
            </remarks>
        </member>
        <member name="F:GLSharp.Camera.projectionMode">
            <summary>
            射影変換の方法
            </summary>
        </member>
        <member name="F:GLSharp.Camera.fovy">
            <summary>
            <para>透視射影のy方向の視野角(Field Of Vision)</para>
            <para>x方向の視野角 = fovy * aspect（アスペクト比）</para>
            <para>デフォルトは60[degree]</para>
            </summary>
        </member>
        <member name="F:GLSharp.Camera.zNear">
            <summary>
            <para>x表示を行う奥行き方向の範囲</para>
            <para>デフォルトは0.01</para>
            </summary>
        </member>
        <member name="F:GLSharp.Camera.zFar">
            <summary>
            <para>表示を行う奥行き方向の範囲</para>
            <para>デフォルトは1000</para>
            </summary>
        </member>
        <member name="F:GLSharp.Camera.aspect">
            <summary>
            <para>アスペクト比 = Width / Height</para>
            <para>デフォルトは1</para>
            </summary>
        </member>
        <member name="F:GLSharp.Camera.orthoHeight">
            <summary>
            <para>正射影のy方向の高さ</para>
            <para>x方向の幅 = orthoHeight * aspect（アスペクト比）</para>
            <para>デフォルトは10</para>
            </summary>
        </member>
        <member name="F:GLSharp.Camera.position">
            <summary>
            カメラの位置
            </summary>
        </member>
        <member name="F:GLSharp.Camera.center">
            <summary>
            カメラの焦点
            </summary>
            <remarks>
            カメラは常にこのcenterを中心に捉えるように向く。
            これを中心にカメラの位置を回転させたりする。
            </remarks>
        </member>
        <member name="F:GLSharp.Camera.up">
            <summary>
            カメラの上方向の向きを表すベクトル
            </summary>
            <remarks>
            画面の上方向の向きが、このベクトルで表される。
            </remarks>
        </member>
        <member name="F:GLSharp.Camera.walkModeUp">
            <summary>
            <para>WalkMode時のカメラの上方向の向き</para>
            <para>デフォルトは{0,1,0}（Y軸正方向）</para>
            </summary>
        </member>
        <member name="F:GLSharp.Camera.pinnedUp">
            <summary>
            <para>固定モード(CameraMode.Pinned)時のカメラの上方向の向き</para>
            <para>デフォルトは{0,1,0}（Y軸正方向）</para>
            </summary>
        </member>
        <member name="F:GLSharp.Camera.pinnedPosition">
            <summary>
            <para>固定モード(CameraMode.Pinned)時のカメラのカメラの位置</para>
            <para>デフォルトは{0,0,1}（Z軸正方向）</para>
            </summary>
        </member>
        <member name="F:GLSharp.Camera.pinnedCenter">
            <summary>
            <para>固定モード(CameraMode.Pinned)時のカメラの焦点</para>
            <para>デフォルトは{0,0,0}（原点）</para>
            </summary>
        </member>
        <member name="F:GLSharp.Camera.cameraMode">
            <summary>
            カメラのモード
            </summary>
        </member>
        <member name="F:GLSharp.Camera.stereoLR">
            <summary>
            <para>カメラの位置を右目・左目のどちらにずらすかを指定する。</para>
            <para>eyePositionEnabledがtrueの場合のみ有効。</para>
            <para>デフォルトはLeftRightAlignment.Left</para>
            </summary>
            <remarks>
            立体視を行う場合に、カメラの位置を右目または左目の位置にずらすために使用する。
            </remarks>
        </member>
        <member name="F:GLSharp.Camera.stereoWidthRatio">
            <summary>
            <para>目幅と、カメラ-焦点間の距離の比。
            この値で、左右の目の間の距離を決める。</para>
            <para>eyePositionEnabledがtrueの場合のみ有効。</para>
            <para>デフォルトは0.03</para>
            </summary>
            <remarks>
            立体視を行う場合に、カメラの位置を右目または左目の位置にずらすために使用する。
            </remarks>
        </member>
        <member name="F:GLSharp.Camera.stereoModeEnabled">
            <summary>
            <para>カメラの位置を右目または左目の位置にずらすかどうかのフラグ。</para>
            <para>trueを指定すると、ApplyPositionメソッド使用時に、カメラの位置が右目または左目の位置にずれる。</para>
            <para>デフォルトはfalse</para>
            </summary>
            <remarks>
            立体視を行う場合に、カメラの位置を右目または左目の位置にずらすために使用する。
            </remarks>
        </member>
        <member name="F:GLSharp.Camera.targetObj">
            <summary>
            カメラの注視点となるインスタンス
            </summary>
        </member>
        <member name="F:GLSharp.Camera.walkmodeVerticalRotationMax">
            <summary>
            ウォークモード時のカメラのwalkModeUpフィールドのベクトルと視線方向がなす角の最大値[degree]。
            デフォルトは0.01。
            </summary>
        </member>
        <member name="F:GLSharp.Camera.walkmodeVerticalRotationMin">
            <summary>
            ウォークモード時のカメラのwalkModeUpフィールドのベクトルと視線方向がなす角の最小値[degree]。
            デフォルトは179.99。
            </summary>
        </member>
        <member name="M:GLSharp.Camera.#ctor">
            <summary>
            デフォルトの位置は( 0f, 0f, 1f )、
            焦点( 0f, 0f, 0f)、
            カメラの上方向( 0f, 1f, 0f )。
            </summary>
        </member>
        <member name="M:GLSharp.Camera.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            カメラを初期化する。
            </summary>
            <param name="pos_x">位置のx座標</param>
            <param name="pos_y">位置のy座標</param>
            <param name="pos_z">位置のz座標</param>
            <param name="center_x">焦点（カメラのターゲット）のx座標</param>
            <param name="center_y">焦点（カメラのターゲット）のy座標</param>
            <param name="center_z">焦点（カメラのターゲット）のz座標</param>
            <param name="up_x">カメラの上方向を指定するベクトルのx成分（規格化不要）</param>
            <param name="up_y">カメラの上方向を指定するベクトルのy成分（規格化不要）</param>
            <param name="up_z">カメラの上方向を指定するベクトルのz成分（規格化不要）</param>
        </member>
        <member name="M:GLSharp.Camera.#ctor(System.Single[],System.Single[],System.Single[])">
            <summary>
            カメラを初期化する。
            </summary>
            <param name="position">位置座標</param>
            <param name="center">焦点（カメラのターゲット）の座標</param>
            <param name="up">カメラの上方向を指定するベクトル（規格化不要）</param>
        </member>
        <member name="M:GLSharp.Camera.LookAroundH(System.Single)">
            <summary>
            カメラの向きを画面の水平方向に回転する。
            （焦点がカメラの周りを回転する。）
            </summary>
            <param name="degree">回転する角度。正は左、負は右を向く。</param>
            <remarks>
            <para>CameraModeプロパティの値によって回転軸がかわる。</para>
            <para>Pinned, Free : 画面に垂直なベクトル。このベクトルは、Camera.GetVerticalVectorNormalized()メソッドによって取得される。</para>
            <para>Walk : walkModeUpフィールドの値。</para>
            <para>Eye : EyeObjectプロパティに設定されたオブジェクトのViewUpプロパティの値。</para>
            </remarks>
        </member>
        <member name="M:GLSharp.Camera.LookAroundV(System.Single)">
            <summary>
            カメラの向きを画面の垂直方向に回転する。
            （焦点がカメラの周りを回転する。）
            </summary>
            <param name="degree">回転する角度。上を向きたい場合は正､下を向きたい場合は負。</param>
            <remarks>
            <para>CameraModeプロパティがFreeまたはPinedの場合、視点の上方向を表すベクトル（upまたはpinnedUpフィールド）も一緒に回転される。</para>
            </remarks>
        </member>
        <member name="M:GLSharp.Camera.LookAround(System.Single,System.Single[])">
            <summary>
            カメラの向きを任意の回転軸で回転する。
            （焦点がカメラの周りを回転する）
            </summary>
            <param name="degree">回転する角度。</param>
            <param name="axis">回転軸を表すベクトル（要規格化）。</param>
            <remarks>
            <para>CameraModeプロパティがFreeまたはPinedの場合、視点の上方向を表すベクトル（upまたはpinnedUpフィールド）も一緒に回転される。</para>
            </remarks>
        </member>
        <member name="M:GLSharp.Camera.RotateH(System.Single)">
            <summary>
            焦点を中心に画面の水平方向に回転する。
            </summary>
            <param name="degree">回転する角度。</param>
            <remarks>
            <para>CameraModeプロパティの値によって回転軸がかわる。</para>
            <para>Pinned, Free : 画面に垂直なベクトル。このベクトルは、Camera.GetVerticalVectorNormalized()メソッドによって取得される。</para>
            <para>Walk : walkModeUpフィールドの値。</para>
            <para>Eye : EyeObjectプロパティに設定されたオブジェクトのViewUpプロパティの値。</para>
            </remarks>
        </member>
        <member name="M:GLSharp.Camera.RotateV(System.Single)">
            <summary>
            焦点を中心に画面の垂直方向に回転する。
            </summary>
            <param name="degree">回転する角度。</param>
            <remarks>
            <para>CameraModeプロパティがFreeまたはPinedの場合、視点の上方向を表すベクトル（upまたはpinnedUpフィールド）も一緒に回転される。</para>
            </remarks>
        </member>
        <member name="M:GLSharp.Camera.RotateC(System.Single)">
            <summary>
            視線方向を軸に回転する。
            </summary>
            <param name="degree">回転する角度。</param>
        </member>
        <member name="M:GLSharp.Camera.Rotate(System.Single,System.Single[])">
            <summary>
            焦点を中心に任意の回転軸で回転する。
            </summary>
            <param name="degree">回転する角度。</param>
            <param name="axis">回転軸を表すベクトル（要規格化）。</param>
            <remarks>
            <para>CameraModeプロパティがFreeまたはPinedの場合、視点の上方向を表すベクトル（upまたはpinnedUpフィールド）も一緒に回転される。</para>
            </remarks>
        </member>
        <member name="M:GLSharp.Camera.Zoom(System.Single)">
            <summary>
            ズームする（カメラが焦点に近づく）。
            </summary>
            <param name="scale">ズーム率。1.0f = 1倍。</param>
        </member>
        <member name="M:GLSharp.Camera.TranslateOnView(System.Single,System.Single,System.Single)">
            <summary>
            カメラを画面上の方向に平行移動する。
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:GLSharp.Camera.TranslateOnViewWithCenter(System.Single,System.Single,System.Single)">
            <summary>
            カメラと焦点を（両者の位置関係を保持したまま）同時に画面上の方向に平行移動する。
            CameraModeプロパティがWalkの場合とそれ以外の場合とで、横方向の移動の向きが異なる。
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:GLSharp.Camera.TranslateCenterOnView(System.Single,System.Single,System.Single)">
            <summary>
            焦点を画面上の方向に移動する。
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:GLSharp.Camera.TranslateAt(System.Single,System.Single,System.Single)">
            <summary>
            カメラの位置座標を設定する。
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:GLSharp.Camera.TranslateAtWithCenter(System.Single,System.Single,System.Single)">
            <summary>
            カメラの位置座標を設定する。
            </summary>
        </member>
        <member name="M:GLSharp.Camera.Translate(System.Single,System.Single,System.Single)">
            <summary>
            カメラの位置を平行移動させる。
            </summary>
        </member>
        <member name="M:GLSharp.Camera.TranslateWithCenter(System.Single,System.Single,System.Single)">
            <summary>
            カメラの位置と焦点を平行移動させる。
            </summary>
        </member>
        <member name="M:GLSharp.Camera.LookAt(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            カメラの位置、焦点、上方向の向きを設定する。
            </summary>
            <param name="eyeX">位置のx座標</param>
            <param name="eyeY">位置のy座標</param>
            <param name="eyeZ">位置のz座標</param>
            <param name="centerX">焦点のx座標</param>
            <param name="centerY">焦点のy座標</param>
            <param name="centerZ">焦点のz座標</param>
            <param name="upX">カメラの上方向の向きを表すベクトルのx成分</param>
            <param name="upY">カメラの上方向の向きを表すベクトルのy成分</param>
            <param name="upZ">カメラの上方向の向きを表すベクトルのz成分</param>
        </member>
        <member name="M:GLSharp.Camera.LookAt(System.Single[],System.Single[],System.Single[])">
            <summary>
            カメラの位置、焦点、上方向の向きを設定する。
            </summary>
            <param name="position">位置座標</param>
            <param name="center">焦点の座標</param>
            <param name="up">カメラの上方向の向きを表すベクトル</param>
        </member>
        <member name="M:GLSharp.Camera.ApplyView">
            <summary>
            OpenGLに現在の視点を適用する。
            </summary>
        </member>
        <member name="M:GLSharp.Camera.ApplyProjection">
            <summary>
            OpenGLにプロジェクション変換行列を適用する。
            </summary>
        </member>
        <member name="M:GLSharp.Camera.GetHorizontalVectorNormalized">
            <summary>
            カメラから見て水平右方向の規格化されたベクトルを取得する｡
            </summary>
            <returns>カメラから見て水平右方向の規格化されたベクトル</returns>
        </member>
        <member name="M:GLSharp.Camera.GetVerticalVectorNormalized">
            <summary>
            カメラから見て垂直上方向の規格化されたベクトルを取得する。
            </summary>
            <returns>カメラから見て垂直上方向の規格化されたベクトル</returns>
        </member>
        <member name="M:GLSharp.Camera.GetDirectionalVectorNormalized">
            <summary>
            カメラから見て焦点方向の規格化されたベクトルを取得する。
            </summary>
            <returns>カメラから見て焦点方向の規格化されたベクトル</returns>
        </member>
        <member name="M:GLSharp.Camera.GetDirectionalVector">
            <summary>
            カメラの位置から焦点へのベクトルを取得する。
            </summary>
            <returns>カメラの位置から焦点へのベクトル</returns>
        </member>
        <member name="M:GLSharp.Camera.GetPosition">
            <summary>
            カメラの位置座標を取得する。
            CameraModeプロパティの値に応じた値が返される。
            </summary>
            <returns>カメラの位置座標</returns>
        </member>
        <member name="M:GLSharp.Camera.GetDistanceFromCenter">
            <summary>
            カメラと焦点の間の距離を取得する。
            </summary>
            <returns>カメラと焦点の間の距離</returns>
        </member>
        <member name="M:GLSharp.Camera.GetViewMatrix">
            <summary>
            このカメラが表すビューイング変換行列を取得する。
            </summary>
            <returns>このカメラが表すビューイング変換行列。</returns>
        </member>
        <member name="M:GLSharp.Camera.SetAspect(System.Drawing.Size)">
            <summary>
            画面のサイズからアスペクト比を設定する。
            </summary>
            <param name="viewSize"></param>
        </member>
        <member name="M:GLSharp.Camera.SetAspect(System.Int32,System.Int32)">
            <summary>
            画面のサイズからアスペクト比を設定する。
            </summary>
            <param name="width">画面の幅</param>
            <param name="height">画面の高さ</param>
        </member>
        <member name="M:GLSharp.Camera.FixUpVector">
            <summary>
            カメラの上方向の向きを表すベクトル(float[] up)を修正・規格化する。
            </summary>
        </member>
        <member name="M:GLSharp.Camera.SetOrthoHeightFromFovy">
            <summary>
            カメラのfovyの値を元に、orthoHeightを設定する。        
            </summary>
        </member>
        <member name="M:GLSharp.Camera.SetOrthoHeightFromFovy(System.Single)">
            <summary>
            視野角を元に、orthoHeightを設定する。        
            </summary>
            <param name="fovy">視野角</param>
        </member>
        <member name="M:GLSharp.Camera.SetFovyFromOrthoHeight">
            <summary>
            カメラのorthoHeightの値を元に、fovyを設定する。
            </summary>
        </member>
        <member name="M:GLSharp.Camera.SetFovyFromOrthoHeight(System.Single)">
            <summary>
            焦点位置での視野の高さを元に、fovyを設定する。
            </summary>
            <param name="heightOnCenter">焦点位置での視野の高さ</param>
        </member>
        <member name="M:GLSharp.Camera.SetZClipRegion(GLSharp.Model,System.Single)">
            <summary>
            <para>zNearとzFarを、指定したオブジェクトがちょうど収まる範囲に設定する。</para>
            <para>デプスバッファの値の範囲を有効に使うためのもの。</para>
            </summary>
            <param name="model">描画オブジェクト</param>
            <param name="zNearMin">zNearの最小値</param>
        </member>
        <member name="M:GLSharp.Camera.SetZClipRegion(System.Collections.Generic.IList{GLSharp.Model},System.Single)">
            <summary>
            <para>zNearとzFarを、指定したオブジェクトがちょうど収まる範囲に設定する。</para>
            <para>デプスバッファの値の範囲を有効に使うためのもの。</para>
            </summary>
            <param name="models">描画オブジェクトのリスト</param>
            <param name="zNearMin">zNearの最小値</param>
        </member>
        <member name="P:GLSharp.Camera.ProjectionMode">
            <summary>
            <para>射影変換の方法を取得・設定する。</para>
            <para>設定する場合、Perspective または Ortho のみ指定可能です。それ以外は例外がスローされます。</para>
            </summary>
        </member>
        <member name="P:GLSharp.Camera.CameraMode">
            <summary>
            カメラのモード
            </summary>
        </member>
        <member name="P:GLSharp.Camera.EyeObject">
            <summary>
            このカメラが参照する主観視点を持つオブジェクトを取得・設定する。
            </summary>
        </member>
        <member name="P:GLSharp.Camera.TargetObject">
            <summary>
            カメラの注視点となるインスタンスを取得・設定する。
            </summary>
        </member>
        <member name="P:GLSharp.Camera.ViewVolume">
            <summary>
            このカメラの現在のビューボリュームを取得する。 (未完成)
            </summary>
        </member>
        <member name="P:GLSharp.Camera.WalkmodeVerticalRotationMax">
            <summary>
            ウォークモード時のカメラの仰角の最大値を取得・設定する([degree])。
            デフォルトは89.99。
            </summary>
        </member>
        <member name="P:GLSharp.Camera.WalkmodeVerticalRotationMin">
            <summary>
            ウォークモード時のカメラの仰角の最小値を取得・設定する([degree])。
            デフォルトは-89.9。
            </summary>
        </member>
        <member name="T:GLSharp.IHaveEye">
            <summary>
            オブジェクトの主観視点でのビューイング変換を行う機能を提供します。
            </summary>
        </member>
        <member name="P:GLSharp.IHaveEye.EyePosition">
            <summary>
            主観視点の位置座標( float[]{x,y,z} )を取得します。
            </summary>
        </member>
        <member name="P:GLSharp.IHaveEye.ViewUp">
            <summary>
            主観視点の上方向を表すベクトル( float[]{x,y,z} )を取得します。
            </summary>
        </member>
        <member name="P:GLSharp.IHaveEye.ViewCenter">
            <summary>
            主観視点の焦点の位置座標( float[]{x,y,z} )を取得します。
            </summary>
        </member>
        <member name="T:GLSharp.ICameraTarget">
            <summary>
            カメラの注視点となる機能を提供します。
            </summary>
        </member>
        <member name="P:GLSharp.ICameraTarget.CameraTarget">
            <summary>
            カメラの注視点の座標を取得する。 ( float[] {x ,y, x} )
            </summary>
        </member>
        <member name="T:GLSharp.Vector">
            <summary>
            ベクトルの演算のための静的クラス
            </summary>
            <summary>
            ベクトルの演算のための静的クラス
            </summary>
        </member>
        <member name="F:GLSharp.Vector.rpdf">
            <summary>
            [rad/degree]
            </summary>
        </member>
        <member name="F:GLSharp.Vector.dprf">
            <summary>
            [degree/rad]
            </summary>
        </member>
        <member name="F:GLSharp.Vector.rpdd">
            <summary>
            [rad/degree]
            </summary>
        </member>
        <member name="F:GLSharp.Vector.dprd">
            <summary>
            [degree/rad]
            </summary>
        </member>
        <member name="M:GLSharp.Vector.Length(System.Single[])">
            <summary>
            ベクトルの長さを求める。
            </summary>
            <param name="vector">長さを求めるベクトル</param>
            <returns>ベクトルの長さ</returns>
        </member>
        <member name="M:GLSharp.Vector.Length(System.Single[],System.Single[])">
            <summary>
            2点間の距離を求める。
            </summary>
            <param name="vector1">座標1</param>
            <param name="vector2">座標2</param>
            <returns>2点間の距離</returns>
        </member>
        <member name="M:GLSharp.Vector.Length2(System.Single[])">
            <summary>
            ベクトルの長さの2乗を求める
            </summary>
            <param name="vector">長さを求めるベクトル</param>
            <returns>ベクトルの長さの2乗</returns>
        </member>
        <member name="M:GLSharp.Vector.Length2(System.Single[],System.Single[])">
            <summary>
            2点間の距離の2乗を求める
            </summary>
            <param name="vector1">座標1</param>
            <param name="vector2">座標2</param>
            <returns>2点間の距離の2乗</returns>
        </member>
        <member name="M:GLSharp.Vector.FaceNormal(System.Single[],System.Single[],System.Single[])">
            <summary>
            3つの頂点で指定された面の法線ベクトルを求める(右手系)
            </summary>
            <param name="vert1">頂点1</param>
            <param name="vert2">頂点2</param>
            <param name="vert3">頂点3</param>
            <returns>法線ベクトル</returns>
        </member>
        <member name="M:GLSharp.Vector.FaceNormal(System.Single[],System.Single[],System.Single[],System.Single[])">
            <summary>
            4つの頂点で指定された面の法線ベクトルを求める(右手系)
            </summary>
            <param name="vert1">頂点1</param>
            <param name="vert2">頂点2</param>
            <param name="vert3">頂点3</param>
            <param name="vert4">頂点4</param>
            <returns>法線ベクトル</returns>
        </member>
        <member name="M:GLSharp.Vector.GetNormalized(System.Single[])">
            <summary>
            ベクトルを規格化する
            </summary>
            <param name="vector">規格化するベクトル</param>
            <returns>規格化されたベクトル</returns>
        </member>
        <member name="M:GLSharp.Vector.Normalize(System.Single[])">
            <summary>
            ベクトルを規格化する
            </summary>
            <param name="vector">規格化するベクトル</param>
        </member>
        <member name="M:GLSharp.Vector.Add(System.Single[],System.Single[])">
            <summary>
            ベクトルを加算する。
            </summary>
            <param name="r">加算されるベクトル</param>
            <param name="t">加算するベクトル</param>
        </member>
        <member name="M:GLSharp.Vector.Add(System.Single[],System.Single,System.Single,System.Single)">
            <summary>
            ベクトルを加算する。
            </summary>
            <param name="r">加算されるベクトル</param>
            <param name="x">加算するベクトルのx成分</param>
            <param name="y">加算するベクトルのy成分</param>
            <param name="z">加算するベクトルのz成分</param>
        </member>
        <member name="M:GLSharp.Vector.GetAdded(System.Single[],System.Single[])">
            <summary>
            ベクトルを加算する。
            </summary>
            <param name="r">加算されるベクトル</param>
            <param name="t">加算するベクトル</param>
            <returns>加算結果のベクトル</returns>
        </member>
        <member name="M:GLSharp.Vector.GetAdded(System.Single[],System.Single,System.Single,System.Single)">
            <summary>
            ベクトルを加算する。
            </summary>
            <param name="r">加算されるベクトル</param>
            <param name="x">加算するベクトルのx成分</param>
            <param name="y">加算するベクトルのy成分</param>
            <param name="z">加算するベクトルのz成分</param>
            <returns>加算結果のベクトル</returns>
        </member>
        <member name="M:GLSharp.Vector.Sub(System.Single[],System.Single[])">
            <summary>
            ベクトルの減算を行う。
            </summary>
            <param name="r">減算されるベクトル</param>
            <param name="t">減算するベクトル</param>
        </member>
        <member name="M:GLSharp.Vector.Sub(System.Single[],System.Single,System.Single,System.Single)">
            <summary>
            ベクトルを減算する。
            </summary>
            <param name="r">減算されるベクトル</param>
            <param name="x">減算するベクトルのx成分</param>
            <param name="y">減算するベクトルのx成分</param>
            <param name="z">減算するベクトルのx成分</param>
        </member>
        <member name="M:GLSharp.Vector.GetSubed(System.Single[],System.Single[])">
            <summary>
            ベクトルを減算する。
            </summary>
            <param name="r">減算されるベクトル</param>
            <param name="t">減算するベクトル</param>
            <returns>減算結果のベクトル</returns>
        </member>
        <member name="M:GLSharp.Vector.GetSubed(System.Single[],System.Single,System.Single,System.Single)">
            <summary>
            ベクトルを減算する。
            </summary>
            <param name="r">減算されるベクトル</param>
            <param name="x">減算するベクトルのx成分</param>
            <param name="y">減算するベクトルのx成分</param>
            <param name="z">減算するベクトルのx成分</param>
            <returns>減算結果のベクトル</returns>
        </member>
        <member name="M:GLSharp.Vector.Rotate(System.Single[],System.Single,System.Single,System.Single,System.Single)">
            <summary>
            ベクトルを任意の軸を中心に回転させる(回転軸の始点は原点)
            </summary>
            <param name="r">回転させるベクトル</param>
            <param name="x">回転軸のx成分(要規格化)</param>
            <param name="y">回転軸のy成分(要規格化)</param>
            <param name="z">回転軸のz成分(要規格化)</param>
            <param name="degree">回転角(度)</param>
        </member>
        <member name="M:GLSharp.Vector.Rotate(System.Single[],System.Single[],System.Single)">
            <summary>
            ベクトルを任意の軸を中心に回転させる(回転軸の始点は原点)
            </summary>
            <param name="r">回転させるベクトル</param>
            <param name="axis">回転軸(要規格化)</param>
            <param name="degree">回転角(度)</param>
        </member>
        <member name="M:GLSharp.Vector.GetRotated(System.Single[],System.Single,System.Single,System.Single,System.Single)">
            <summary>
            ベクトルを任意の軸を中心に回転させる(回転軸の始点は原点)
            </summary>
            <param name="r">回転させるベクトル</param>
            <param name="x">回転軸のx成分(要規格化)</param>
            <param name="y">回転軸のy成分(要規格化)</param>
            <param name="z">回転軸のz成分(要規格化)</param>
            <param name="degree">回転角(度)</param>
            <returns>回転されたベクトル</returns>
        </member>
        <member name="M:GLSharp.Vector.GetRotated(System.Single[],System.Single[],System.Single)">
            <summary>
            ベクトルを任意の軸を中心に回転させる(回転軸の始点は原点)
            </summary>
            <param name="r">回転させるベクトル</param>
            <param name="axis">回転軸(要規格化)</param>
            <param name="degree">回転角(度)</param>
            <returns>回転後のベクトル</returns>
        </member>
        <member name="M:GLSharp.Vector.RotateX(System.Single[],System.Single)">
            <summary>
            ベクトルをx軸を中心に回転させる
            </summary>
            <param name="r">回転させるベクトル</param>
            <param name="degree">回転角(度)</param>
        </member>
        <member name="M:GLSharp.Vector.GetRotatedX(System.Single[],System.Single)">
            <summary>
            ベクトルをx軸を中心に回転させる
            </summary>
            <param name="r">回転させるベクトル</param>
            <param name="degree">回転角(度)</param>
            <returns>回転後のベクトル</returns>
        </member>
        <member name="M:GLSharp.Vector.RotateY(System.Single[],System.Single)">
            <summary>
            ベクトルをy軸を中心に回転させる
            </summary>
            <param name="r">回転させるベクトル</param>
            <param name="degree">回転角(度)</param>
        </member>
        <member name="M:GLSharp.Vector.GetRotatedY(System.Single[],System.Single)">
            <summary>
            ベクトルをy軸を中心に回転させる
            </summary>
            <param name="r">回転させるベクトル</param>
            <param name="degree">回転角(度)</param>
            <returns>回転後のベクトル</returns>
        </member>
        <member name="M:GLSharp.Vector.RotateZ(System.Single[],System.Single)">
            <summary>
            ベクトルをz軸を中心に回転させる
            </summary>
            <param name="r">回転させるベクトル</param>
            <param name="degree">回転角(度)</param>
        </member>
        <member name="M:GLSharp.Vector.GetRotatedZ(System.Single[],System.Single)">
            <summary>
            ベクトルをz軸を中心に回転させる
            </summary>
            <param name="r">回転させるベクトル</param>
            <param name="degree">回転角(度)</param>
            <returns>回転後のベクトル</returns>
        </member>
        <member name="M:GLSharp.Vector.Scale(System.Single[],System.Single,System.Single,System.Single)">
            <summary>
            ベクトルの各成分をスケーリングする。
            </summary>
            <param name="vector">スケーリングするベクトル</param>
            <param name="x">x成分の拡大率</param>
            <param name="y">y成分の拡大率</param>
            <param name="z">z成分の拡大率</param>
        </member>
        <member name="M:GLSharp.Vector.Scale(System.Single[],System.Single[])">
            <summary>
            ベクトルの各成分をスケーリングする。
            </summary>
            <param name="vector">スケーリングするベクトル</param>
            <param name="scale">各成分の拡大率</param>
        </member>
        <member name="M:GLSharp.Vector.Scale(System.Single[],System.Single)">
            <summary>
            ベクトルの各成分をスケーリングする。
            </summary>
            <param name="vector">スケーリングするベクトル</param>
            <param name="scale">拡大率</param>
        </member>
        <member name="M:GLSharp.Vector.GetScaled(System.Single[],System.Single,System.Single,System.Single)">
            <summary>
            ベクトルの各成分をスケーリングする。
            </summary>
            <param name="vector">スケーリングするベクトル</param>
            <param name="x">x成分の拡大率</param>
            <param name="y">y成分の拡大率</param>
            <param name="z">z成分の拡大率</param>
        </member>
        <member name="M:GLSharp.Vector.GetScaled(System.Single[],System.Single[])">
            <summary>
            ベクトルの各成分をスケーリングする。
            </summary>
            <param name="vector">スケーリングするベクトル</param>
            <param name="scale">各成分の拡大率</param>
        </member>
        <member name="M:GLSharp.Vector.GetScaled(System.Single[],System.Single)">
            <summary>
            ベクトルの各成分をスケーリングする。
            </summary>
            <param name="vector">スケーリングするベクトル</param>
            <param name="scale">各成分の拡大率</param>
        </member>
        <member name="M:GLSharp.Vector.Average(System.Single[][])">
            <summary>
            ベクトルの平均を求める。
            </summary>
            <param name="vectors">ベクトル</param>
            <returns>ベクトルの平均</returns>
        </member>
        <member name="M:GLSharp.Vector.IsZero(System.Single[])">
            <summary>
            ベクトルがゼロベクトルかどうかを調べる。
            </summary>
            <param name="vector">ベクトル</param>
            <returns>ゼロベクトルならtrue、そうでなければfalse。</returns>
        </member>
        <member name="M:GLSharp.Vector.Dot(System.Single[],System.Single[])">
            <summary>
            ベクトルの内積を求める。
            </summary>
            <param name="vector1">ベクトル1</param>
            <param name="vector2">ベクトル2</param>
            <returns>ベクトル1とベクトル2の内積</returns>
        </member>
        <member name="M:GLSharp.Vector.Cross(System.Single[],System.Single[])">
            <summary>
            ベクトルの外積を求める。
            </summary>
            <param name="vector1">ベクトル1</param>
            <param name="vector2">ベクトル2</param>
            <returns>ベクトル1とベクトル2の外積</returns>
        </member>
        <member name="M:GLSharp.Vector.Length(System.Double[])">
            <summary>
            ベクトルの長さを求める。
            </summary>
            <param name="vector">長さを求めるベクトル</param>
            <returns>ベクトルの長さ</returns>
        </member>
        <member name="M:GLSharp.Vector.Length(System.Double[],System.Double[])">
            <summary>
            2点間の距離を求める。
            </summary>
            <param name="vector1">座標1</param>
            <param name="vector2">座標2</param>
            <returns>2点間の距離</returns>
        </member>
        <member name="M:GLSharp.Vector.Length2(System.Double[])">
            <summary>
            ベクトルの長さの2乗を求める
            </summary>
            <param name="vector">長さを求めるベクトル</param>
            <returns>ベクトルの長さの2乗</returns>
        </member>
        <member name="M:GLSharp.Vector.Length2(System.Double[],System.Double[])">
            <summary>
            2点間の距離の2乗を求める
            </summary>
            <param name="vector1">座標1</param>
            <param name="vector2">座標2</param>
            <returns>2点間の距離の2乗</returns>
        </member>
        <member name="M:GLSharp.Vector.FaceNormal(System.Double[],System.Double[],System.Double[])">
            <summary>
            3つの頂点で指定された面の法線ベクトルを求める(右手系)
            </summary>
            <param name="vert1">頂点1</param>
            <param name="vert2">頂点2</param>
            <param name="vert3">頂点3</param>
            <returns>法線ベクトル</returns>
        </member>
        <member name="M:GLSharp.Vector.FaceNormal(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            4つの頂点で指定された面の法線ベクトルを求める(右手系)
            </summary>
            <param name="vert1">頂点1</param>
            <param name="vert2">頂点2</param>
            <param name="vert3">頂点3</param>
            <param name="vert4">頂点4</param>
            <returns>法線ベクトル</returns>
        </member>
        <member name="M:GLSharp.Vector.GetNormalized(System.Double[])">
            <summary>
            ベクトルを規格化する
            </summary>
            <param name="vector">規格化するベクトル</param>
            <returns>規格化されたベクトル</returns>
        </member>
        <member name="M:GLSharp.Vector.Normalize(System.Double[])">
            <summary>
            ベクトルを規格化する
            </summary>
            <param name="vector">規格化するベクトル</param>
        </member>
        <member name="M:GLSharp.Vector.Add(System.Double[],System.Double[])">
            <summary>
            ベクトルを加算する。
            </summary>
            <param name="r">加算されるベクトル</param>
            <param name="t">加算するベクトル</param>
        </member>
        <member name="M:GLSharp.Vector.Add(System.Double[],System.Double,System.Double,System.Double)">
            <summary>
            ベクトルを加算する。
            </summary>
            <param name="r">加算されるベクトル</param>
            <param name="x">加算するベクトルのx成分</param>
            <param name="y">加算するベクトルのy成分</param>
            <param name="z">加算するベクトルのz成分</param>
        </member>
        <member name="M:GLSharp.Vector.GetAdded(System.Double[],System.Double[])">
            <summary>
            ベクトルを加算する。
            </summary>
            <param name="r">加算されるベクトル</param>
            <param name="t">加算するベクトル</param>
            <returns>加算結果のベクトル</returns>
        </member>
        <member name="M:GLSharp.Vector.GetAdded(System.Double[],System.Double,System.Double,System.Double)">
            <summary>
            ベクトルを加算する。
            </summary>
            <param name="r">加算されるベクトル</param>
            <param name="x">加算するベクトルのx成分</param>
            <param name="y">加算するベクトルのy成分</param>
            <param name="z">加算するベクトルのz成分</param>
            <returns>加算結果のベクトル</returns>
        </member>
        <member name="M:GLSharp.Vector.Sub(System.Double[],System.Double[])">
            <summary>
            ベクトルの減算を行う。
            </summary>
            <param name="r">減算されるベクトル</param>
            <param name="t">減算するベクトル</param>
        </member>
        <member name="M:GLSharp.Vector.Sub(System.Double[],System.Double,System.Double,System.Double)">
            <summary>
            ベクトルを減算する。
            </summary>
            <param name="r">減算されるベクトル</param>
            <param name="x">減算するベクトルのx成分</param>
            <param name="y">減算するベクトルのx成分</param>
            <param name="z">減算するベクトルのx成分</param>
        </member>
        <member name="M:GLSharp.Vector.GetSubed(System.Double[],System.Double[])">
            <summary>
            ベクトルを減算する。
            </summary>
            <param name="r">減算されるベクトル</param>
            <param name="t">減算するベクトル</param>
            <returns>減算結果のベクトル</returns>
        </member>
        <member name="M:GLSharp.Vector.GetSubed(System.Double[],System.Double,System.Double,System.Double)">
            <summary>
            ベクトルを減算する。
            </summary>
            <param name="r">減算されるベクトル</param>
            <param name="x">減算するベクトルのx成分</param>
            <param name="y">減算するベクトルのx成分</param>
            <param name="z">減算するベクトルのx成分</param>
            <returns>減算結果のベクトル</returns>
        </member>
        <member name="M:GLSharp.Vector.Rotate(System.Double[],System.Double,System.Double,System.Double,System.Double)">
            <summary>
            ベクトルを任意の軸を中心に回転させる(回転軸の始点は原点)
            </summary>
            <param name="r">回転させるベクトル</param>
            <param name="x">回転軸のx成分(要規格化)</param>
            <param name="y">回転軸のy成分(要規格化)</param>
            <param name="z">回転軸のz成分(要規格化)</param>
            <param name="degree">回転角(度)</param>
        </member>
        <member name="M:GLSharp.Vector.Rotate(System.Double[],System.Double[],System.Double)">
            <summary>
            ベクトルを任意の軸を中心に回転させる(回転軸の始点は原点)
            </summary>
            <param name="r">回転させるベクトル</param>
            <param name="axis">回転軸(要規格化)</param>
            <param name="degree">回転角(度)</param>
        </member>
        <member name="M:GLSharp.Vector.GetRotated(System.Double[],System.Double,System.Double,System.Double,System.Double)">
            <summary>
            ベクトルを任意の軸を中心に回転させる(回転軸の始点は原点)
            </summary>
            <param name="r">回転させるベクトル</param>
            <param name="x">回転軸のx成分(要規格化)</param>
            <param name="y">回転軸のy成分(要規格化)</param>
            <param name="z">回転軸のz成分(要規格化)</param>
            <param name="degree">回転角(度)</param>
            <returns>回転されたベクトル</returns>
        </member>
        <member name="M:GLSharp.Vector.GetRotated(System.Double[],System.Double[],System.Double)">
            <summary>
            ベクトルを任意の軸を中心に回転させる(回転軸の始点は原点)
            </summary>
            <param name="r">回転させるベクトル</param>
            <param name="axis">回転軸(要規格化)</param>
            <param name="degree">回転角(度)</param>
            <returns>回転後のベクトル</returns>
        </member>
        <member name="M:GLSharp.Vector.RotateX(System.Double[],System.Double)">
            <summary>
            ベクトルをx軸を中心に回転させる
            </summary>
            <param name="r">回転させるベクトル</param>
            <param name="degree">回転角(度)</param>
        </member>
        <member name="M:GLSharp.Vector.GetRotatedX(System.Double[],System.Double)">
            <summary>
            ベクトルをx軸を中心に回転させる
            </summary>
            <param name="r">回転させるベクトル</param>
            <param name="degree">回転角(度)</param>
            <returns>回転後のベクトル</returns>
        </member>
        <member name="M:GLSharp.Vector.RotateY(System.Double[],System.Double)">
            <summary>
            ベクトルをy軸を中心に回転させる
            </summary>
            <param name="r">回転させるベクトル</param>
            <param name="degree">回転角(度)</param>
        </member>
        <member name="M:GLSharp.Vector.GetRotatedY(System.Double[],System.Double)">
            <summary>
            ベクトルをy軸を中心に回転させる
            </summary>
            <param name="r">回転させるベクトル</param>
            <param name="degree">回転角(度)</param>
            <returns>回転後のベクトル</returns>
        </member>
        <member name="M:GLSharp.Vector.RotateZ(System.Double[],System.Double)">
            <summary>
            ベクトルをz軸を中心に回転させる
            </summary>
            <param name="r">回転させるベクトル</param>
            <param name="degree">回転角(度)</param>
        </member>
        <member name="M:GLSharp.Vector.GetRotatedZ(System.Double[],System.Double)">
            <summary>
            ベクトルをz軸を中心に回転させる
            </summary>
            <param name="r">回転させるベクトル</param>
            <param name="degree">回転角(度)</param>
            <returns>回転後のベクトル</returns>
        </member>
        <member name="M:GLSharp.Vector.Scale(System.Double[],System.Double,System.Double,System.Double)">
            <summary>
            ベクトルの各成分をスケーリングする。
            </summary>
            <param name="vector">スケーリングするベクトル</param>
            <param name="x">x成分の拡大率</param>
            <param name="y">y成分の拡大率</param>
            <param name="z">z成分の拡大率</param>
        </member>
        <member name="M:GLSharp.Vector.Scale(System.Double[],System.Double[])">
            <summary>
            ベクトルの各成分をスケーリングする。
            </summary>
            <param name="vector">スケーリングするベクトル</param>
            <param name="scale">各成分の拡大率</param>
        </member>
        <member name="M:GLSharp.Vector.Scale(System.Double[],System.Double)">
            <summary>
            ベクトルの各成分をスケーリングする。
            </summary>
            <param name="vector">スケーリングするベクトル</param>
            <param name="scale">拡大率</param>
        </member>
        <member name="M:GLSharp.Vector.GetScaled(System.Double[],System.Double,System.Double,System.Double)">
            <summary>
            ベクトルの各成分をスケーリングする。
            </summary>
            <param name="vector">スケーリングするベクトル</param>
            <param name="x">x成分の拡大率</param>
            <param name="y">y成分の拡大率</param>
            <param name="z">z成分の拡大率</param>
        </member>
        <member name="M:GLSharp.Vector.GetScaled(System.Double[],System.Double[])">
            <summary>
            ベクトルの各成分をスケーリングする。
            </summary>
            <param name="vector">スケーリングするベクトル</param>
            <param name="scale">各成分の拡大率</param>
        </member>
        <member name="M:GLSharp.Vector.GetScaled(System.Double[],System.Double)">
            <summary>
            ベクトルの各成分をスケーリングする。
            </summary>
            <param name="vector">スケーリングするベクトル</param>
            <param name="scale">各成分の拡大率</param>
        </member>
        <member name="M:GLSharp.Vector.Average(System.Double[][])">
            <summary>
            ベクトルの平均を求める。
            </summary>
            <param name="vectors">ベクトル</param>
            <returns>ベクトルの平均</returns>
        </member>
        <member name="M:GLSharp.Vector.IsZero(System.Double[])">
            <summary>
            ベクトルがゼロベクトルかどうかを調べる。
            </summary>
            <param name="vector">ベクトル</param>
            <returns>ゼロベクトルならtrue、そうでなければfalse。</returns>
        </member>
        <member name="M:GLSharp.Vector.Dot(System.Double[],System.Double[])">
            <summary>
            ベクトルの内積を求める。
            </summary>
            <param name="vector1">ベクトル1</param>
            <param name="vector2">ベクトル2</param>
            <returns>ベクトル1とベクトル2の内積</returns>
        </member>
        <member name="M:GLSharp.Vector.Cross(System.Double[],System.Double[])">
            <summary>
            ベクトルの外積を求める。
            </summary>
            <param name="vector1">ベクトル1</param>
            <param name="vector2">ベクトル2</param>
            <returns>ベクトル1とベクトル2の外積</returns>
        </member>
        <member name="T:GLSharp.Matrix">
            <summary>
            行列計算のための静的クラス
            </summary>
            <summary>
            行列計算のための静的クラス
            </summary>
        </member>
        <member name="F:GLSharp.Matrix.rpdf">
            <summary>
            [rad/degree]
            </summary>
        </member>
        <member name="F:GLSharp.Matrix.dprf">
            <summary>
            [degree/rad]
            </summary>
        </member>
        <member name="F:GLSharp.Matrix.rpdd">
            <summary>
            [rad/degree]
            </summary>
        </member>
        <member name="F:GLSharp.Matrix.dprd">
            <summary>
            [degree/rad]
            </summary>
        </member>
        <member name="M:GLSharp.Matrix.Identify(System.Single[])">
            <summary>
            行列を単位行列化する。
            </summary>
            <param name="matrix">単位行列化するベクトル</param>
        </member>
        <member name="M:GLSharp.Matrix.Multiply(System.Single[],System.Single[])">
            <summary>
            行列mat1にmat2を掛ける。
            </summary>
            <param name="mat1">行列1</param>
            <param name="mat2">行列1に掛ける行列</param>
        </member>
        <member name="M:GLSharp.Matrix.GetMultiplied(System.Single[],System.Single[])">
            <summary>
            行列の積を求める。
            mat1 * mat2
            </summary>
            <param name="mat1">行列1</param>
            <param name="mat2">行列2</param>
            <returns>行列の積</returns>
        </member>
        <member name="M:GLSharp.Matrix.GetTranslation(System.Single,System.Single,System.Single)">
            <summary>
            平行移動変換行列を生成する。
            </summary>
            <param name="x">x軸方向の平行移動量</param>
            <param name="y">y軸方向の平行移動量</param>
            <param name="z">z軸方向の平行移動量</param>
            <returns>平行移動行列</returns>
        </member>
        <member name="M:GLSharp.Matrix.GetTranslation(System.Single[])">
            <summary>
            平行移動変換行列を生成する。
            </summary>
            <param translation="x">平行移動量</param>
            <returns>平行移動行列</returns>
        </member>
        <member name="M:GLSharp.Matrix.Translate(System.Single[],System.Single,System.Single,System.Single)">
            <summary>
            平行移動を加える。
            </summary>
            <param name="mat">平行移動を加える行列</param>
            <param name="x">x軸方向の平行移動量</param>
            <param name="y">y軸方向の平行移動量</param>
            <param name="z">z軸方向の平行移動量</param>
        </member>
        <member name="M:GLSharp.Matrix.Translate(System.Single[],System.Single[])">
            <summary>
            平行移動を加える。
            </summary>
            <param name="mat">平行移動を加える行列</param>
            <param name="translation">平行移動量</param>
        </member>
        <member name="M:GLSharp.Matrix.GetTranslated(System.Single[],System.Single,System.Single,System.Single)">
            <summary>
            平行移動を加える。
            </summary>
            <param name="mat">平行移動を加える行列</param>
            <param name="x">x軸方向の平行移動量</param>
            <param name="y">y軸方向の平行移動量</param>
            <param name="z">z軸方向の平行移動量</param>
            <returns>平行移動後の行列</returns>
        </member>
        <member name="M:GLSharp.Matrix.GetTranslated(System.Single[],System.Single[])">
            <summary>
            平行移動を加える。
            </summary>
            <param name="mat">平行移動を加える行列</param>
            <param name="translation">平行移動量</param>
            <returns>平行移動後の行列</returns>
        </member>
        <member name="M:GLSharp.Matrix.GetRotation(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            回転行列を生成する。
            </summary>
            <param name="degree">回転角[度]</param>
            <param name="x">回転軸を表すベクトルのx成分</param>
            <param name="y">回転軸を表すベクトルのy成分</param>
            <param name="z">回転軸を表すベクトルのz成分</param>
            <returns>回転行列</returns>
            <remarks>
            回転軸を表すベクトルは、要規格化。
            </remarks>
        </member>
        <member name="M:GLSharp.Matrix.Rotate(System.Single[],System.Single,System.Single,System.Single,System.Single)">
            <summary>
            行列に回転を加える。
            </summary>
            <param name="mat">回転を加える行列</param>
            <param name="degree">回転角[度]</param>
            <param name="x">回転軸を表すベクトルのx成分</param>
            <param name="y">回転軸を表すベクトルのy成分</param>
            <param name="z">回転軸を表すベクトルのz成分</param>
            <remarks>
            回転軸を表すベクトルは、要規格化。
            </remarks>
        </member>
        <member name="M:GLSharp.Matrix.Rotate(System.Single[],System.Single,System.Single[])">
            <summary>
            行列に回転を加える。
            </summary>
            <param name="mat">回転を加える行列</param>
            <param name="degree">回転角[度]</param>
            <param name="rotationAxis">回転軸（要規格化）</param>
        </member>
        <member name="M:GLSharp.Matrix.GetRotated(System.Single[],System.Single,System.Single,System.Single,System.Single)">
            <summary>
            回転された行列を取得する。
            </summary>
            <param name="mat">回転を加える行列</param>
            <param name="degree">回転角[度]</param>
            <param name="x">回転軸を表すベクトルのx成分</param>
            <param name="y">回転軸を表すベクトルのy成分</param>
            <param name="z">回転軸を表すベクトルのz成分</param>
            <returns>回転された行列</returns>
        </member>
        <member name="M:GLSharp.Matrix.GetRotated(System.Single[],System.Single,System.Single[])">
            <summary>
            回転された行列を取得する。
            </summary>
            <param name="mat">回転を加える行列</param>
            <param name="degree">回転角[度]</param>
            <param name="rotationAxis">回転軸</param>
            <returns>回転された行列</returns>
        </member>
        <member name="M:GLSharp.Matrix.GetRotationRPY(System.Single,System.Single,System.Single)">
            <summary>
            ロール、ピッチ、ヨーの角度から、回転行列を取得する。
            </summary>
            <param name="roll">ロール ( = Z軸周りの回転角)</param>
            <param name="pitch">ピッチ ( = X軸周りの回転角)</param>
            <param name="yaw">ヨー ( = Y軸周りの回転角)</param>
            <returns>回転行列</returns>
        </member>
        <member name="M:GLSharp.Matrix.GetRotationHPB(System.Single,System.Single,System.Single)">
            <summary>
            ヘッド、ピッチ、バンクの角度[deg]から、回転行列を取得する。
            </summary>
            <param name="head">ヘッド ( = Y軸周りの回転)</param>
            <param name="pitch">ピッチ ( = Z軸周りの回転)</param>
            <param name="bank">バンク ( = X軸周りの回転)</param>
            <returns>回転行列</returns>
        </member>
        <member name="M:GLSharp.Matrix.HPBAngleOfRotation(System.Single[])">
            <summary>
            回転行列から、ヘッド、ピッチ、バンクの各角度[degree]を取得する。
            element[]{ head, pitch, bank }として返す。
            </summary>
            <param name="rotation">回転行列</param>
            <returns>element[]{ head, pitch, bank }</returns>
        </member>
        <member name="M:GLSharp.Matrix.RPYAngleOfRotation(System.Single[])">
            <summary>
            回転行列から、ロール、ピッチ、ヨーの各角度[degree]を取得する。
            element[]{ roll, pitch, yaw }として返す。
            </summary>
            <param name="rotation">回転行列</param>
            <returns>element[]{ roll, pitch, yaw }</returns>
        </member>
        <member name="M:GLSharp.Matrix.GetScaling(System.Single,System.Single,System.Single)">
            <summary>
            スケーリング変換行列（アフィン変換行列）を生成する。
            </summary>
            <param name="x">x軸方向の拡大率</param>
            <param name="y">y軸方向の拡大率</param>
            <param name="z">z軸方向の拡大率</param>
            <returns>スケーリング変換行列</returns>
        </member>
        <member name="M:GLSharp.Matrix.GetScaling(System.Single[])">
            <summary>
            スケーリング変換行列（アフィン変換行列）を生成する。
            </summary>
            <param name="scale">拡大率</param>
            <returns>スケーリング変換行列</returns>
        </member>
        <member name="M:GLSharp.Matrix.Scale(System.Single[],System.Single,System.Single,System.Single)">
            <summary>
            行列にスケーリング変換を適用する。
            </summary>
            <param name="matrix">スケーリング変換を適用する行列</param>
            <param name="x">x軸方向の拡大率</param>
            <param name="y">y軸方向の拡大率</param>
            <param name="z">z軸方向の拡大率</param>
        </member>
        <member name="M:GLSharp.Matrix.Scale(System.Single[],System.Single[])">
            <summary>
            行列にスケーリング変換を適用する。
            </summary>
            <param name="matrix">スケーリング変換を適用する行列</param>
            <param name="scale">拡大率</param>
        </member>
        <member name="M:GLSharp.Matrix.TransformCoord(System.Single[],System.Single[])">
            <summary>
            座標(x,y,z)に変換行列を掛ける。
            </summary>
            <param name="vector">変換行列を適用する座標( element[]{x,y,z} )</param>
            <param name="matrix">変換行列</param>
        </member>
        <member name="M:GLSharp.Matrix.GetTransformedCoord(System.Single[],System.Single[])">
            <summary>
            変換行列を掛けた座標(x,y,z)を取得する。
            </summary>
            <param name="vector">変換行列を適用する座標( element[]{x,y,z} )</param>
            <param name="matrix">変換行列</param>
            <returns>変換された座標( element[]{x,y,z} )</returns>
        </member>
        <member name="M:GLSharp.Matrix.Determinant(System.Single[])">
            <summary>
            行列mのDet(m)を取得する。
            </summary>
            <param name="m">4*4行列</param>
            <returns>Det(m)</returns>
        </member>
        <member name="M:GLSharp.Matrix.GetInverse(System.Single[])">
            <summary>
            逆行列を取得する。存在しない場合はnullが返される。
            </summary>
            <param name="m">4*4行列</param>
            <returns>逆行列。存在しない場合はnullが返される。</returns>
        </member>
        <member name="M:GLSharp.Matrix.LookAt(System.Single[],System.Single[],System.Single[])">
            <summary>
            ビュー行列を取得する。
            </summary>
            <param name="eye">視点の位置</param>
            <param name="center">焦点の座標</param>
            <param name="up">視線の上方向（規格化不要）</param>
            <returns>ビュー行列</returns>
        </member>
        <member name="M:GLSharp.Matrix.Frustum(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            透視変換行列を取得する。
            </summary>
            <param name="l">手前のクリップ面の左端のx座標</param>
            <param name="r">手前のクリップ面の右端のx座標</param>
            <param name="b">手前のクリップ面の下端のy座標</param>
            <param name="t">手前のクリップ面の上端のy座標</param>
            <param name="n">手前のクリップ面までの距離</param>
            <param name="f">奥のクリップ面までの距離</param>
            <returns>透視変換行列</returns>
        </member>
        <member name="M:GLSharp.Matrix.Identify(System.Double[])">
            <summary>
            行列を単位行列化する。
            </summary>
            <param name="matrix">単位行列化するベクトル</param>
        </member>
        <member name="M:GLSharp.Matrix.Multiply(System.Double[],System.Double[])">
            <summary>
            行列mat1にmat2を掛ける。
            </summary>
            <param name="mat1">行列1</param>
            <param name="mat2">行列1に掛ける行列</param>
        </member>
        <member name="M:GLSharp.Matrix.GetMultiplied(System.Double[],System.Double[])">
            <summary>
            行列の積を求める。
            mat1 * mat2
            </summary>
            <param name="mat1">行列1</param>
            <param name="mat2">行列2</param>
            <returns>行列の積</returns>
        </member>
        <member name="M:GLSharp.Matrix.GetTranslation(System.Double,System.Double,System.Double)">
            <summary>
            平行移動変換行列を生成する。
            </summary>
            <param name="x">x軸方向の平行移動量</param>
            <param name="y">y軸方向の平行移動量</param>
            <param name="z">z軸方向の平行移動量</param>
            <returns>平行移動行列</returns>
        </member>
        <member name="M:GLSharp.Matrix.GetTranslation(System.Double[])">
            <summary>
            平行移動変換行列を生成する。
            </summary>
            <param translation="x">平行移動量</param>
            <returns>平行移動行列</returns>
        </member>
        <member name="M:GLSharp.Matrix.Translate(System.Double[],System.Double,System.Double,System.Double)">
            <summary>
            平行移動を加える。
            </summary>
            <param name="mat">平行移動を加える行列</param>
            <param name="x">x軸方向の平行移動量</param>
            <param name="y">y軸方向の平行移動量</param>
            <param name="z">z軸方向の平行移動量</param>
        </member>
        <member name="M:GLSharp.Matrix.Translate(System.Double[],System.Double[])">
            <summary>
            平行移動を加える。
            </summary>
            <param name="mat">平行移動を加える行列</param>
            <param name="translation">平行移動量</param>
        </member>
        <member name="M:GLSharp.Matrix.GetTranslated(System.Double[],System.Double,System.Double,System.Double)">
            <summary>
            平行移動を加える。
            </summary>
            <param name="mat">平行移動を加える行列</param>
            <param name="x">x軸方向の平行移動量</param>
            <param name="y">y軸方向の平行移動量</param>
            <param name="z">z軸方向の平行移動量</param>
            <returns>平行移動後の行列</returns>
        </member>
        <member name="M:GLSharp.Matrix.GetTranslated(System.Double[],System.Double[])">
            <summary>
            平行移動を加える。
            </summary>
            <param name="mat">平行移動を加える行列</param>
            <param name="translation">平行移動量</param>
            <returns>平行移動後の行列</returns>
        </member>
        <member name="M:GLSharp.Matrix.GetRotation(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            回転行列を生成する。
            </summary>
            <param name="degree">回転角[度]</param>
            <param name="x">回転軸を表すベクトルのx成分</param>
            <param name="y">回転軸を表すベクトルのy成分</param>
            <param name="z">回転軸を表すベクトルのz成分</param>
            <returns>回転行列</returns>
            <remarks>
            回転軸を表すベクトルは、要規格化。
            </remarks>
        </member>
        <member name="M:GLSharp.Matrix.Rotate(System.Double[],System.Double,System.Double,System.Double,System.Double)">
            <summary>
            行列に回転を加える。
            </summary>
            <param name="mat">回転を加える行列</param>
            <param name="degree">回転角[度]</param>
            <param name="x">回転軸を表すベクトルのx成分</param>
            <param name="y">回転軸を表すベクトルのy成分</param>
            <param name="z">回転軸を表すベクトルのz成分</param>
            <remarks>
            回転軸を表すベクトルは、要規格化。
            </remarks>
        </member>
        <member name="M:GLSharp.Matrix.Rotate(System.Double[],System.Double,System.Double[])">
            <summary>
            行列に回転を加える。
            </summary>
            <param name="mat">回転を加える行列</param>
            <param name="degree">回転角[度]</param>
            <param name="rotationAxis">回転軸（要規格化）</param>
        </member>
        <member name="M:GLSharp.Matrix.GetRotated(System.Double[],System.Double,System.Double,System.Double,System.Double)">
            <summary>
            回転された行列を取得する。
            </summary>
            <param name="mat">回転を加える行列</param>
            <param name="degree">回転角[度]</param>
            <param name="x">回転軸を表すベクトルのx成分</param>
            <param name="y">回転軸を表すベクトルのy成分</param>
            <param name="z">回転軸を表すベクトルのz成分</param>
            <remarks>
            回転軸を表すベクトルは、要規格化。
            </remarks>
        </member>
        <member name="M:GLSharp.Matrix.GetRotated(System.Double[],System.Double,System.Double[])">
            <summary>
            回転された行列を取得する。
            </summary>
            <param name="mat">回転を加える行列</param>
            <param name="degree">回転角[度]</param>
            <param name="rotationAxis">回転軸</param>
            <returns>回転された行列</returns>
        </member>
        <member name="M:GLSharp.Matrix.GetRotationRPY(System.Double,System.Double,System.Double)">
            <summary>
            ロール、ピッチ、ヨーの角度から、回転行列を取得する。
            </summary>
            <param name="roll">ロール ( = Z軸周りの回転角)</param>
            <param name="pitch">ピッチ ( = X軸周りの回転角)</param>
            <param name="yaw">ヨー ( = Y軸周りの回転角)</param>
            <returns>回転行列</returns>
        </member>
        <member name="M:GLSharp.Matrix.GetRotationHPB(System.Double,System.Double,System.Double)">
            <summary>
            ヘッド、ピッチ、バンクの角度[deg]から、回転行列を取得する。
            </summary>
            <param name="head">ヘッド ( = Y軸周りの回転)</param>
            <param name="pitch">ピッチ ( = Z軸周りの回転)</param>
            <param name="bank">バンク ( = X軸周りの回転)</param>
            <returns>回転行列</returns>
        </member>
        <member name="M:GLSharp.Matrix.HPBAngleOfRotation(System.Double[])">
            <summary>
            回転行列から、ヘッド、ピッチ、バンクの各角度[degree]を取得する。
            element[]{ head, pitch, bank }として返す。
            </summary>
            <param name="rotation">回転行列</param>
            <returns>element[]{ head, pitch, bank }</returns>
        </member>
        <member name="M:GLSharp.Matrix.RPYAngleOfRotation(System.Double[])">
            <summary>
            回転行列から、ロール、ピッチ、ヨーの各角度[degree]を取得する。
            element[]{ roll, pitch, yaw }として返す。
            </summary>
            <param name="rotation">回転行列</param>
            <returns>element[]{ roll, pitch, yaw }</returns>
        </member>
        <member name="M:GLSharp.Matrix.GetScaling(System.Double,System.Double,System.Double)">
            <summary>
            スケーリング変換行列（アフィン変換行列）を生成する。
            </summary>
            <param name="x">x軸方向の拡大率</param>
            <param name="y">y軸方向の拡大率</param>
            <param name="z">z軸方向の拡大率</param>
            <returns>スケーリング変換行列</returns>
        </member>
        <member name="M:GLSharp.Matrix.GetScaling(System.Double[])">
            <summary>
            スケーリング変換行列（アフィン変換行列）を生成する。
            </summary>
            <param name="scale">拡大率</param>
            <returns>スケーリング変換行列</returns>
        </member>
        <member name="M:GLSharp.Matrix.Scale(System.Double[],System.Double,System.Double,System.Double)">
            <summary>
            行列にスケーリング変換を適用する。
            </summary>
            <param name="matrix">スケーリング変換を適用する行列</param>
            <param name="x">x軸方向の拡大率</param>
            <param name="y">y軸方向の拡大率</param>
            <param name="z">z軸方向の拡大率</param>
        </member>
        <member name="M:GLSharp.Matrix.Scale(System.Double[],System.Double[])">
            <summary>
            行列にスケーリング変換を適用する。
            </summary>
            <param name="matrix">スケーリング変換を適用する行列</param>
            <param name="scale">拡大率</param>
        </member>
        <member name="M:GLSharp.Matrix.TransformCoord(System.Double[],System.Double[])">
            <summary>
            座標(x,y,z)に変換行列を掛ける。
            </summary>
            <param name="vector">変換行列を適用する座標( element[]{x,y,z} )</param>
            <param name="matrix">変換行列</param>
        </member>
        <member name="M:GLSharp.Matrix.GetTransformedCoord(System.Double[],System.Double[])">
            <summary>
            変換行列を掛けた座標(x,y,z)を取得する。
            </summary>
            <param name="vector">変換行列を適用する座標( element[]{x,y,z} )</param>
            <param name="matrix">変換行列</param>
            <returns>変換された座標( element[]{x,y,z} )</returns>
        </member>
        <member name="M:GLSharp.Matrix.Determinant(System.Double[])">
            <summary>
            行列mのDet(m)を取得する。
            </summary>
            <param name="m">4*4行列</param>
            <returns>Det(m)</returns>
        </member>
        <member name="M:GLSharp.Matrix.GetInverse(System.Double[])">
            <summary>
            逆行列を取得する。存在しない場合はnullが返される。
            </summary>
            <param name="m">4*4行列</param>
            <returns>逆行列。存在しない場合はnullが返される。</returns>
        </member>
        <member name="M:GLSharp.Matrix.LookAt(System.Double[],System.Double[],System.Double[])">
            <summary>
            ビュー行列を取得する。
            </summary>
            <param name="eye">視点の位置</param>
            <param name="center">焦点の座標</param>
            <param name="up">視線の上方向（規格化不要）</param>
            <returns>ビュー行列</returns>
        </member>
        <member name="M:GLSharp.Matrix.Frustum(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            透視変換行列を取得する。
            </summary>
            <param name="l">手前のクリップ面の左端のx座標</param>
            <param name="r">手前のクリップ面の右端のx座標</param>
            <param name="b">手前のクリップ面の下端のy座標</param>
            <param name="t">手前のクリップ面の上端のy座標</param>
            <param name="n">手前のクリップ面までの距離</param>
            <param name="f">奥のクリップ面までの距離</param>
            <returns>透視変換行列</returns>
        </member>
        <member name="P:GLSharp.Matrix.IdentityF">
            <summary>
            新しい単位行列のインスタンスを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.Matrix.IdentityD">
            <summary>
            新しい単位行列のインスタンスを取得する。
            </summary>
        </member>
        <member name="T:GLSharp.GLSControl">
            <summary>
            OpenGLをサポートするコントロール
            </summary>
        </member>
        <member name="M:GLSharp.GLSControl.FindJoystics(System.Boolean)">
            <summary>
            ジョイスティックを検出、取得する。
            </summary>
            <param name="reset">trueを指定すると、取得済みのデバイスを解放し再取得する。</param>
        </member>
        <member name="M:GLSharp.GLSControl.CaptureJoystics">
            <summary>
            <para>ジョイスティックをキャプチャする。</para>
            </summary>
        </member>
        <member name="M:GLSharp.GLSControl.ReleaseJoysticsCapture">
            <summary>
            <para>キャプチャされているジョイスティックを解放する。</para>
            <para>ジョイスティックが未検出、または解放済みの場合は、何も行われない。</para>
            </summary>
        </member>
        <member name="M:GLSharp.GLSControl.GetJoysticsState">
            <summary>
            <para>ジョイスティックの状態を取得し、
            Joystic1、Joystic2プロパティの状態を更新する。</para>
            </summary>
        </member>
        <member name="M:GLSharp.GLSControl.OnHandleCreated(System.EventArgs)">
            <summary>
            <para>このコントロールに関連付けられたハンドルが作成されたときに呼び出される。</para>
            <para>ここでOpenGLレンダリングコンテキストが作成されるので、
            このイベント以降でContextプロパティが使用可能になる。</para>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GLSharp.GLSControl.RegenarateRenderingContext">
            <summary>
            <para>OpenGLレンダリングコンテキストを再作成・初期化します。</para>
            </summary>
        </member>
        <member name="M:GLSharp.GLSControl.DestroyContext">
            <summary>
            レンダリングコンテキストを破棄します。
            </summary>
        </member>
        <member name="M:GLSharp.GLSControl.DestroyHandle">
            <summary>
            このコントロールに関連付けられたOpenGLレンダリングコンテキストを破棄し、
            続いてコントロール自身のハンドルを破棄します。
            </summary>
        </member>
        <member name="M:GLSharp.GLSControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            OpenGLシーンを描画する。
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GLSharp.GLSControl.OnPaintDesignMode(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            デザイナでの仮描画。
            DesignModeがtrueで、かつRenderingSceneがnullの時のみ描画を行う。
            </summary>
        </member>
        <member name="M:GLSharp.GLSControl.OnClientSizeChanged(System.EventArgs)">
            <summary>
            <para>描画領域のサイズが変更されたときに呼び出される。</para>
            <para></para>
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:GLSharp.GLSControl.components">
            <summary> 
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:GLSharp.GLSControl.Dispose(System.Boolean)">
            <summary> 
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:GLSharp.GLSControl.InitializeComponent">
            <summary> 
            デザイナ サポートに必要なメソッドです。このメソッドの内容を 
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="P:GLSharp.GLSControl.RenderingScene">
            <summary>
            このコントロールに描画するシーンを取得・設定する。
            </summary>
        </member>
        <member name="P:GLSharp.GLSControl.Context">
            <summary>
            このコントロールのOpenGLレンダリングコンテキスト
            </summary>
        </member>
        <member name="P:GLSharp.GLSControl.SwapControlSupported">
            <summary>
            垂直同期が利用可能かどうかを取得する。
            falseの場合は垂直同期がサポートされておらず、使用できない。
            </summary>
        </member>
        <member name="P:GLSharp.GLSControl.SwapInterval">
            <summary>
            <para>垂直同期のインターバルを取得・設定する。</para>
            <para>0:垂直同期しない。 0以上:垂直同期する。</para>
            <para>垂直同期がサポートされていなければ、設定しても無視され、常に0を返す。</para>
            </summary>
        </member>
        <member name="P:GLSharp.GLSControl.Joystic1">
            <summary>
            <para>[get] ジョイスティック1。</para>
            <para>接続されていない場合はnullが返される。</para>
            <para>FindJoystics()メソッドによって設定される。</para>
            <para>ジョイスティックイベント、またはGetJoysticsState()メソッドによって
            軸とボタンの値が更新される。</para>
            </summary>
        </member>
        <member name="P:GLSharp.GLSControl.Joystic2">
            <summary>
            <para>[get] ジョイスティック2。</para>
            <para>FindJoystics()メソッドによって設定される。</para>
            <para>ジョイスティックイベント、またはGetJoysticsState()メソッドによって
            軸とボタンの値が更新される。</para>
            <para>接続されていない場合はnullが返される。</para>
            </summary>
        </member>
        <member name="P:GLSharp.GLSControl.JoysticPollingPeriod">
            <summary>
            [get,set] ジョイスティックのポーリング周期。
            <para>ただし、設定しても CaptureJoystics() メソッドを呼び出すまで適用されない。</para>
            </summary>
        </member>
        <member name="P:GLSharp.GLSControl.JoysticEventsEnabled">
            <summary>
            <para>[get,set] ジョイスティックイベントを発生させるかどうか。</para>
            <para>デフォルトはflase。</para>
            </summary>
        </member>
        <member name="P:GLSharp.GLSControl.RenderingControl">
            <summary>
            OpenGLによって描画されるコントロールを取得する。
            </summary>
        </member>
        <member name="T:GLSharp.FullScreenModeController">
            <summary>
            フルスクリーン・モードとウィンドウ・モードを切り替えるコントローラ。
            </summary>
        </member>
        <member name="F:GLSharp.FullScreenModeController.isFullScreen">
            <summary>
            [get] フルスクリーン・モードかどうかのフラグ
            </summary>
        </member>
        <member name="F:GLSharp.FullScreenModeController.prevFormState">
            <summary>
            フルスクリーン表示前のウィンドウの状態を保存する
            </summary>
        </member>
        <member name="F:GLSharp.FullScreenModeController.prevFormStyle">
            <summary>
            通常表示時のフォームの境界線スタイルを保存する
            </summary>
        </member>
        <member name="F:GLSharp.FullScreenModeController.prevFormSize">
            <summary>
            通常表示時のウィンドウのサイズを保存する
            </summary>
        </member>
        <member name="M:GLSharp.FullScreenModeController.SwitchScreenMode(OpenTK.DisplayDevice)">
            <summary>
            フルスクリーンモード/ウィンドウモードの切り替えを行う。
            </summary>
            <param name="display">フルスクリーン表示するディスプレイ</param>
        </member>
        <member name="M:GLSharp.FullScreenModeController.ChooseResolution(OpenTK.DisplayDevice,System.Int32,System.Single,System.Int32,System.Single)">
            <summary>
            指定した解像度に最も近い、ディスプレイデバイスで使用可能な解像度を取得する。
            </summary>
            <param name="display"></param>
            <param name="height"></param>
            <param name="aspect"></param>
            <param name="bitsPerPixel"></param>
            <param name="refreshRate"></param>
            <returns></returns>
        </member>
        <member name="M:GLSharp.FullScreenModeController.RestoreScreen(OpenTK.DisplayDevice)">
            <summary>
            フルスクリーンモードを解除する
            </summary>
            <param name="display"></param>
        </member>
        <member name="P:GLSharp.FullScreenModeController.Form">
            <summary>
            [get] フルスクリーンにするForm
            </summary>
        </member>
        <member name="P:GLSharp.FullScreenModeController.IsFullScreen">
            <summary>
            フルスクリーン・モードかどうかを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.FullScreenModeController.FullScreenResolution">
            <summary>
            <para>[get,set] フルスクリーンモード時に設定されるディスプレイの解像度。</para>
            <para>デフォルトは640*480ピクセル。</para>
            </summary>
        </member>
        <member name="T:GLSharp.PFArbAttribI">
            <summary>
            Accepted in the &lt;piAttributes&gt; parameter array of
            wglGetPixelFormatAttribivARB, and wglGetPixelFormatAttribfvARB, and
            as a type in the &lt;piAttribILis&gt; and &lt;pfAttribFList&gt; parameter
            arrays of wglChoosePixelFormatARB.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.NumberPixelFormats">
            <summary>
            The number of pixel formats for the device context. The
            &lt;iLayerPlane&gt; and &lt;iPixelFormat&gt; parameters are ignored if this
            attribute is specified.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.DrawToWindow">
            <summary>
            True if the pixel format can be used with a window. The
            &lt;iLayerPlane&gt; parameter is ignored if this attribute is
            specified.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.DrawToBitmap">
            <summary>
            True if the pixel format can be used with a memory bitmap. The
            &lt;iLayerPlane&gt; parameter is ignored if this attribute is
            specified.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.Acceleration">
            <summary>
            Indicates whether the pixel format is supported by the driver.
            If this is set to WGL_NO_ACCELERATION_ARB then only the software
            renderer supports this pixel format; if this is set to
            WGL_GENERIC_ACCELERATION_ARB then the pixel format is supported
            by an MCD driver; if this is set to WGL_FULL_ACCELERATION_ARB
            then the pixel format is supported by an ICD driver.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.NeedPalette">
            <summary>
            A logical palette is required to achieve the best results for
            this pixel format. The &lt;iLayerPlane&gt; parameter is ignored if
            this attribute is specified.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.NeedSystemPalette">
            <summary>
            The hardware supports one hardware palette in 256-color mode
            only. The &lt;iLayerPlane&gt; parameter is ignored if this attribute
            is specified.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.SwapLayerBuffers">
            <summary>
            True if the pixel format supports swapping layer planes
            independently of the main planes. If the pixel format does not
            support a back buffer then this is set to FALSE. The
            &lt;iLayerPlane&gt; parameter is ignored if this attribute is
            specified.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.SwapMethod">
            <summary>
            If the pixel format supports a back buffer, then this indicates
            how they are swapped. If this attribute is set to
            WGL_SWAP_EXCHANGE_ARB then swapping exchanges the front and back
            buffer contents; if it is set to WGL_SWAP_COPY_ARB then swapping
            copies the back buffer contents to the front buffer; if it is
            set to WGL_SWAP_UNDEFINED_ARB then the back buffer contents are
            copied to the front buffer but the back buffer contents are
            undefined after the operation. If the pixel format does not
            support a back buffer then this parameter is set to
            WGL_SWAP_UNDEFINED_ARB. The &lt;iLayerPlane&gt; parameter is ignored
            if this attribute is specified.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.NumberOverlays">
            <summary>
            The number of underlay planes. The &lt;iLayerPlane&gt; parameter is
            ignored if this attribute is specified.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.NumberUnderlays">
            <summary>
            The number of underlay planes. The &lt;iLayerPlane&gt; parameter is
            ignored if this attribute is specified.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.Transparent">
            <summary>
            True if transparency is supported.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.TransparentRedValue">
            <summary>
            Specifies the transparent red color value. Typically this value
            is the same for all layer planes. This value is undefined if
            transparency is not supported.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.TransparentGreenValue">
            <summary>
            Specifies the transparent green value. Typically this value is
            the same for all layer planes. This value is undefined if
            transparency is not supported.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.TransparentBlueValue">
            <summary>
            Specifies the transparent blue color value. Typically this value
            is the same for all layer planes. This value is undefined if
            transparency is not supported.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.TransparentAlphaValue">
            <summary>
            Specifies the transparent alpha value. This is reserved for
            future use.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.TransparentIndexValue">
            <summary>
            Specifies the transparent color index value. Typically this
            value is the same for all layer planes. This value is undefined
            if transparency is not supported.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.ShareDepth">
            <summary>
            True if the layer plane shares the depth buffer with the main
            planes. If &lt;iLayerPlane&gt; is zero, this is always true.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.ShareStencil">
            <summary>
            True if the layer plane shares the stencil buffer with the main
            planes. If &lt;iLayerPlane&gt; is zero, this is always true.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.ShareAccum">
            <summary>
            True if the layer plane shares the accumulation buffer with the
            main planes. If &lt;iLayerPlane&gt; is zero, this is always true.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.SupportGdi">
            <summary>
            True if GDI rendering is supported.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.SupportOpengl">
            <summary>
            True if OpenGL is supported.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.DoubleBuffer">
            <summary>
            True if the color buffer has back/front pairs.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.Stereo">
            <summary>
            True if the color buffer has left/right pairs.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.PixelType">
            <summary>
            The type of pixel data. This can be set to WGL_TYPE_RGBA_ARB or
            WGL_TYPE_COLORINDEX_ARB.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.ColorBits">
            <summary>
            The number of color bitplanes in each color buffer. For RGBA
            pixel types, it is the size of the color buffer, excluding the
            alpha bitplanes. For color-index pixels, it is the size of the
            color index buffer.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.RedBits">
            <summary>
            The number of red bitplanes in each RGBA color buffer.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.RedShift">
            <summary>
            The shift count for red bitplanes in each RGBA color buffer.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.GreenBits">
            <summary>
            The number of green bitplanes in each RGBA color buffer.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.GreenShift">
            <summary>
            The shift count for green bitplanes in each RGBA color buffer.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.BlueBits">
            <summary>
            The number of blue bitplanes in each RGBA color buffer.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.BlueShift">
            <summary>
            The shift count for blue bitplanes in each RGBA color buffer.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.AlphaBits">
            <summary>
            The number of alpha bitplanes in each RGBA color buffer.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.AlphaShift">
            <summary>
            The shift count for alpha bitplanes in each RGBA color buffer.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.AccumBits">
            <summary>
            The total number of bitplanes in the accumulation buffer.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.AccumRedBits">
            <summary>
            The number of red bitplanes in the accumulation buffer.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.AccumGreenBits">
            <summary>
            The number of green bitplanes in the accumulation buffer.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.AccumBlueBits">
            <summary>
            The number of blue bitplanes in the accumulation buffer.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.AccumAlphaBits">
            <summary>
            The number of alpha bitplanes in the accumulation buffer.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.DepthBits">
            <summary>
            The depth of the depth (z-axis) buffer.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.StencilBits">
            <summary>
            The depth of the stencil buffer.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.AuxBuffers">
            <summary>
            The number of auxiliary buffers.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.SampleBuffers">
            <summary>
            The number of multisample buffers.
            </summary>
        </member>
        <member name="F:GLSharp.PFArbAttribI.Samples">
            <summary>
            The number of samples per pixel.
            </summary>
        </member>
        <member name="T:GLSharp.PFArbAttribValue">
            <summary>
            Accepted as a value in the &lt;piAttribIList&gt; and &lt;pfAttribFList&gt;
            parameter arrays of wglChoosePixelFormatARB, and returned in the
            &lt;piValues&gt; parameter array of wglGetPixelFormatAttribivARB, and the
            &lt;pfValues&gt; parameter array of wglGetPixelFormatAttribfvARB
            </summary>
        </member>
        <member name="T:GLSharp.QuadricObject">
            <summary>
            GLUの2次曲面オブジェクト
            </summary>
            <remarks>
            暗黙でIntPtr型（GLUの>2次曲面オブジェクトのハンドル）に変換される。
            </remarks>
        </member>
        <member name="M:GLSharp.QuadricObject.op_Implicit(GLSharp.QuadricObject)~System.IntPtr">
            <summary>
            GLUの2次曲面オブジェクトを指すポインタに変換する。
            </summary>
            <param name="quadricObject">2次曲面オブジェクトを表すQuadricObjectクラスのインスタンス</param>
            <returns>GLUの2次曲面オブジェクトを指すポインタ</returns>
        </member>
        <member name="F:GLSharp.QuadricObject.quadricObj">
            <summary>
            GLUの2次曲面オブジェクトのハンドル
            </summary>
        </member>
        <member name="F:GLSharp.QuadricObject.drawStyle">
            <summary>
            <para>レンダリング方式</para>
            </summary>
        </member>
        <member name="F:GLSharp.QuadricObject.normal">
            <summary>
            <para>法線ベクトルの生成方法</para>
            <para>デフォルトはNone。</para>
            </summary>
        </member>
        <member name="F:GLSharp.QuadricObject.orientation">
            <summary>
            <para>法線の向き</para>
            <para>デフォルトはOutside。</para>
            </summary>
        </member>
        <member name="F:GLSharp.QuadricObject.genTextureCoord">
            <summary>
            <para>テクスチャ座標を生成するかどうかの指定</para>
            <para>デフォルトはfalse。</para>
            </summary>
        </member>
        <member name="F:GLSharp.QuadricObject.errorCallback">
            <summary>
            エラー発生時に呼び出されるコールバック関数
            </summary>
        </member>
        <member name="M:GLSharp.QuadricObject.OnGluQuadricError(OpenTK.Graphics.OpenGL.GluErrorCode)">
            <summary>
            Errorイベントを呼び出す。
            </summary>
            <param name="errorCode">エラーコード</param>
        </member>
        <member name="M:GLSharp.QuadricObject.#ctor(System.IntPtr)">
            <summary>
            QuadricObjectクラスの新しいインスタンスを初期化する。
            </summary>
            <param name="gluQuadricObj">GLUの2次曲面オブジェクトを指すポインタ</param>
        </member>
        <member name="M:GLSharp.QuadricObject.#ctor">
            <summary>
            QuadricObjectクラスの新しいインスタンスを初期化する。
            </summary>
        </member>
        <member name="M:GLSharp.QuadricObject.Delete">
            <summary>
            このオブジェクトを破棄する。
            </summary>
        </member>
        <member name="P:GLSharp.QuadricObject.Handle">
            <summary>
            [get] GLUの2次曲面オブジェクトのハンドル。
            </summary>
        </member>
        <member name="P:GLSharp.QuadricObject.IsValid">
            <summary>
            [get] このオブジェクトが有効かどうかを表す。
            </summary>
        </member>
        <member name="P:GLSharp.QuadricObject.DrawStyle">
            <summary>
            <para>[get,set] レンダリング方式。</para>
            </summary>
        </member>
        <member name="P:GLSharp.QuadricObject.Normal">
            <summary>
            <para>[get,set] 法線ベクトルの生成方法。</para>
            <para>デフォルトはNone。</para>
            </summary>
        </member>
        <member name="P:GLSharp.QuadricObject.Orientation">
            <summary>
            <para>[get,set] 法線の向き。</para>
            <para>デフォルトはOutside。</para>
            </summary>
        </member>
        <member name="P:GLSharp.QuadricObject.GenTextureCoord">
            <summary>
            <para>[get,set] テクスチャ座標を生成するかどうか。</para>
            <para>デフォルトはfalse。</para>
            </summary>
        </member>
        <member name="P:GLSharp.QuadricObject.ThrowExceptionOnError">
            <summary>
            <para>[get,set] trueの場合、このオブジェクトでエラーが発生した場合に例外をスローする。</para>
            <para>デフォルトはtrue。</para>
            </summary>
        </member>
        <member name="E:GLSharp.QuadricObject.Error">
            <summary>
            このオブジェクトでエラーが発生した場合に呼び出される。
            </summary>
        </member>
        <member name="T:GLSharp.QuadricObject.GLUQuadricErrorCallBack">
            <summary>
            GLUの2次曲面オブジェクトに関するエラー発生時に呼び出されるコールバック関数を表すデリゲート
            </summary>
            <param name="errorCode">エラーコード</param>
        </member>
        <member name="T:GLSharp.Quadric">
            <summary>
            [abstract] GLUの2次曲面オブジェクトを表す抽象クラス
            </summary>
        </member>
        <member name="M:GLSharp.Quadric.#ctor(GLSharp.QuadricObject)">
            <summary>
            Quadricクラスの新しいインスタンスを初期化する。
            </summary>
            <param name="quadricObject">GLUの2次曲面オブジェクト</param>
        </member>
        <member name="M:GLSharp.Quadric.Draw">
            <summary>
            2次曲面オブジェクトを描画する。
            </summary>
        </member>
        <member name="M:GLSharp.Quadric.Draw(System.IntPtr)">
            <summary>
            2次曲面オブジェクトを描画する。
            </summary>
            <param name="quadricObject">GLUの2次曲面オブジェクトを指すポインタ</param>
        </member>
        <member name="P:GLSharp.Quadric.QuadricObject">
            <summary>
            GLUの2次曲面オブジェクトを取得・設定する。
            </summary>
        </member>
        <member name="T:GLSharp.Sphere">
            <summary>
            原点(0, 0, 0)を中心とする球
            </summary>
        </member>
        <member name="F:GLSharp.Sphere.radius">
            <summary>
            <para>半径</para>
            </summary>
        </member>
        <member name="F:GLSharp.Sphere.slices">
            <summary>
            <para>z軸の周囲方向の分割数</para>
            </summary>
        </member>
        <member name="F:GLSharp.Sphere.stacks">
            <summary>
            <para>z軸方向の分割数</para>
            </summary>
        </member>
        <member name="M:GLSharp.Sphere.#ctor(GLSharp.QuadricObject,System.Double,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="quadricObject">GLUの2次曲面オブジェクト</param>
            <param name="radius">半径</param>
            <param name="slices">z軸の周囲方向の分割数</param>
            <param name="stacks">z軸方向の分割数</param>
        </member>
        <member name="M:GLSharp.Sphere.Draw(System.IntPtr)">
            <summary>
            球を描画する。
            </summary>
            <param name="quadricObject"></param>
        </member>
        <member name="P:GLSharp.Sphere.Radius">
            <summary>
            <para>半径を取得・設定する。</para>
            </summary>
        </member>
        <member name="P:GLSharp.Sphere.Slices">
            <summary>
            <para>z軸の周囲方向の分割数を取得・設定する。</para>
            </summary>
        </member>
        <member name="P:GLSharp.Sphere.Stacks">
            <summary>
            <para>z軸方向の分割数を取得・設定する。</para>
            </summary>
        </member>
        <member name="T:GLSharp.Cylinder">
            <summary>
            <para>z軸に沿った方向を向き、底面がz=0にある円柱。</para>
            <para>上面と底面は閉じていない。</para>
            </summary>
        </member>
        <member name="F:GLSharp.Cylinder.baseRadius">
            <summary>
            <para>底面の半径</para>
            </summary>
        </member>
        <member name="F:GLSharp.Cylinder.topRadius">
            <summary>
            <para>上面の半径</para>
            </summary>
        </member>
        <member name="F:GLSharp.Cylinder.height">
            <summary>
            <para>高さ</para>
            </summary>
        </member>
        <member name="F:GLSharp.Cylinder.slices">
            <summary>
            <para>z軸の周囲方向の分割数</para>
            </summary>
        </member>
        <member name="F:GLSharp.Cylinder.stacks">
            <summary>
            <para>z軸方向の分割数</para>
            </summary>
        </member>
        <member name="M:GLSharp.Cylinder.#ctor(GLSharp.QuadricObject,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="quadricObject">GLUの2次曲面オブジェクト</param>
            <param name="baseRadius">底面の半径</param>
            <param name="topRadius">上面の半径</param>
            <param name="height">高さ</param>
            <param name="slices">z軸の周囲方向の分割数</param>
            <param name="stacks">z軸方向の分割数</param>
        </member>
        <member name="P:GLSharp.Cylinder.BaseRadius">
            <summary>
            <para>Z=0における円柱の半径を取得・設定する。</para>
            </summary>
        </member>
        <member name="P:GLSharp.Cylinder.TopRadius">
            <summary>
            <para>上面の半径を取得・設定する。</para>
            </summary>
        </member>
        <member name="P:GLSharp.Cylinder.Height">
            <summary>
            <para>高さを取得・設定する。</para>
            </summary>
        </member>
        <member name="P:GLSharp.Cylinder.Slices">
            <summary>
            <para>z軸の周囲方向の分割数を取得・設定する。</para>
            </summary>
        </member>
        <member name="P:GLSharp.Cylinder.Stacks">
            <summary>
            <para>z軸方向の分割数を取得・設定する。</para>
            </summary>
        </member>
        <member name="T:GLSharp.Disc">
            <summary>
            z=0の平面上の円盤
            </summary>
        </member>
        <member name="F:GLSharp.Disc.innerRadius">
            <summary>
            <para>内側の半径</para>
            </summary>
        </member>
        <member name="F:GLSharp.Disc.outerRadius">
            <summary>
            <para>外側の半径</para>
            </summary>
        </member>
        <member name="F:GLSharp.Disc.slices">
            <summary>
            <para>Z軸の周囲方向の分割数</para>
            <para>デフォルトは10。</para>
            </summary>
        </member>
        <member name="F:GLSharp.Disc.rings">
            <summary>
            <para>半径方向の分割数</para>
            </summary>
        </member>
        <member name="M:GLSharp.Disc.#ctor(GLSharp.QuadricObject,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="quadricObject">GLUの2次曲面オブジェクト</param>
            <param name="innerRadius">内側の半径</param>
            <param name="outerRadius">外側の半径</param>
            <param name="slices">Z軸の周囲方向の分割数</param>
            <param name="rings">半径方向の分割数</param>
        </member>
        <member name="P:GLSharp.Disc.InnerRadius">
            <summary>
            <para>内側の半径を取得・設定する。</para>
            </summary>
        </member>
        <member name="P:GLSharp.Disc.OuterRadius">
            <summary>
            <para>外側の半径を取得・設定する。</para>
            </summary>
        </member>
        <member name="P:GLSharp.Disc.Slices">
            <summary>
            <para>Z軸の周囲方向の分割数を取得・設定する。</para>
            <para>デフォルトは10。</para>
            </summary>
        </member>
        <member name="P:GLSharp.Disc.Rings">
            <summary>
            <para>半径方向の分割数を取得・設定する。</para>
            </summary>
        </member>
        <member name="T:GLSharp.PartialDisc">
            <summary>
            <para>z=0の平面上の部分円盤</para>
            <para>+z側が外側。</para>
            </summary>
        </member>
        <member name="F:GLSharp.PartialDisc.innerRadius">
            <summary>
            <para>内側の半径</para>
            </summary>
        </member>
        <member name="F:GLSharp.PartialDisc.outerRadius">
            <summary>
            <para>外側の半径</para>
            </summary>
        </member>
        <member name="F:GLSharp.PartialDisc.slices">
            <summary>
            <para>Z軸の周囲方向の分割数</para>
            <para>デフォルトは10。</para>
            </summary>
        </member>
        <member name="F:GLSharp.PartialDisc.rings">
            <summary>
            <para>半径方向の分割数</para>
            </summary>
        </member>
        <member name="F:GLSharp.PartialDisc.startAngle">
            <summary>
            <para>円盤の開始角[degree]</para>
            <para>角度は原点を中心に+y軸から始まり、+x軸方向に回転する向きを正とする。</para>
            </summary>
        </member>
        <member name="F:GLSharp.PartialDisc.sweepAngle">
            <summary>
            <para>円盤の内側の角度[degree]</para>
            <para>角度は原点を中心に+y軸から始まり、+x軸方向に回転する向きを正とする。</para>
            </summary>
        </member>
        <member name="M:GLSharp.PartialDisc.#ctor(GLSharp.QuadricObject,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            
            <para>角度は原点を中心に+y軸から始まり、+x軸方向に回転する向きを正とする。</para>
            </summary>
            <param name="quadricObject">GLUの2次曲面オブジェクト</param>
            <param name="innerRadius">内側の半径</param>
            <param name="outerRadius">外側の半径</param>
            <param name="startAngle">円盤の開始角[degree]</param>
            <param name="sweepAngle">円盤の内側の角度[degree]</param>
            <param name="slices">Z軸の周囲方向の分割数</param>
            <param name="rings">半径方向の分割数</param>
        </member>
        <member name="P:GLSharp.PartialDisc.InnerRadius">
            <summary>
            <para>内側の半径を取得・設定する。</para>
            </summary>
        </member>
        <member name="P:GLSharp.PartialDisc.OuterRadius">
            <summary>
            <para>外側の半径を取得・設定する。</para>
            </summary>
        </member>
        <member name="P:GLSharp.PartialDisc.Slices">
            <summary>
            <para>Z軸の周囲方向の分割数を取得・設定する。</para>
            <para>デフォルトは10。</para>
            </summary>
        </member>
        <member name="P:GLSharp.PartialDisc.Rings">
            <summary>
            <para>半径方向の分割数を取得・設定する。</para>
            </summary>
        </member>
        <member name="P:GLSharp.PartialDisc.StartAngle">
            <summary>
            <para>円盤の開始角[degree]を取得・設定する</para>
            <para>角度は原点を中心に+y軸から始まり、+x軸方向に回転する向きを正とする。</para>
            </summary>
        </member>
        <member name="P:GLSharp.PartialDisc.SweepAngle">
            <summary>
            <para>円盤の内側の角度[degree]を取得・設定する。</para>
            <para>角度は原点を中心に+y軸から始まり、+x軸方向に回転する向きを正とする。</para>
            </summary>
        </member>
        <member name="M:GLSharp.MathUtil.NearestPow2(System.Int32)">
            <summary>
            指定した整数に最も近い2のn乗である整数を返す。
            </summary>
        </member>
        <member name="M:GLSharp.MathUtil.IntersectionOfLines(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            <para>2つの直線 y = a1*x + b1, y = a2*x + b2 の交点を計算し、その交点{x,y}を返す。</para>
            <para>直線が平行な場合はnullを返す。</para>
            </summary>
            <param name="a1"></param>
            <param name="b1"></param>
            <param name="a2"></param>
            <param name="b2"></param>
            <returns>2つの直線の交点。直線が平行な場合はnullを返す。</returns>
        </member>
        <member name="M:GLSharp.MathUtil.CalcLineParams2D(System.Single[],System.Single[],System.Single@,System.Single@)">
            <summary>
            XY平面上の2点を通る直線 y = a*x + b の係数 a, b を求める。
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:GLSharp.MathUtil.IsCoordInRegion(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            座標 p が 値 b1, b2 の間にあるかどうかを取得する。
            （b1, b2 の大小関係は不問）
            </summary>
            <param name="b1"></param>
            <param name="b2"></param>
            <param name="p"></param>
            <param name="equal">p が b1 または b2 に等しい場合を含むならtrue、含まないならfalse。</param>
            <returns></returns>
        </member>
        <member name="M:GLSharp.MathUtil.IntersectionOfLineSegments(System.Single[],System.Single[],System.Single[],System.Single[],System.Boolean)">
            <summary>
            <para>二つの線分 s1, s2 の交点を計算し、その交点{x,y}を返す。</para>
            <para>交点が無い場合はnullを返す。</para>
            </summary>
            <param name="s1Start">線分 s1 の始点</param>
            <param name="s1End">線分 s1 の終点</param>
            <param name="s2Start">線分 s2 の始点</param>
            <param name="s2End">線分 s2 の終点</param>
            <param name="equal">交点が線分の始点または終点上にある場合を含むならtrue、含まないならばfalse。</param>
            <returns></returns>
        </member>
        <member name="M:GLSharp.MathUtil.DistanceOfPointAndPlane(System.Single[],System.Single[],System.Single[],System.Single[])">
            <summary>
            <para>点と平面の距離を求める。</para>
            <para>点が面の裏側にある場合は負の値の距離を返す。</para>
            </summary>
            <param name="point"></param>
            <param name="p0">平面上の点</param>
            <param name="p1">平面上の点</param>
            <param name="p2">平面上の点</param>
            <returns></returns>
        </member>
        <member name="M:GLSharp.MathUtil.IsLineSegmentAndPolygonHit(System.Single[],System.Single[],System.Single[],System.Single[],System.Single[])">
            <summary>
            平面と線分が衝突しているかどうかを取得する。
            </summary>
            <param name="lineStart"></param>
            <param name="lineEnd"></param>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="T:GLSharp.DisplayList">
            <summary>
            ディスプレイリストを表すクラス
            </summary>
            <remarks>
            OpenGLのディスプレイリストを扱うためのクラス。
            ディスプレイリストの破棄はDisposeメソッドによって行う。
            </remarks>
        </member>
        <member name="F:GLSharp.DisplayList.displayListNumber">
            <summary>
            このディスプレイリストに割り当てられた識別番号
            </summary>
        </member>
        <member name="F:GLSharp.DisplayList.name">
            <summary>
            このディスプレイリストの名前
            </summary>
        </member>
        <member name="M:GLSharp.DisplayList.#ctor(System.UInt32,System.String)">
            <summary>
            任意のディスプレイリスト番号でDisplayListクラスのインスタンスを初期化する。
            </summary>
            <param name="displayListNumber">ディスプレイリスト番号</param>
            <param name="name">名前</param>
        </member>
        <member name="M:GLSharp.DisplayList.#ctor(GLSharp.Model,GLSharp.IRenderingParams,OpenTK.Graphics.OpenGL.ListMode)">
            <summary>
            モデルからディスプレイリストを作成する。
            </summary>
            <param name="model">ディスプレイリストを作成するモデル</param>
            <param name="renderingParams"></param>
            <param name="listMode"></param>
        </member>
        <member name="M:GLSharp.DisplayList.#ctor(System.String)">
            <summary>
            自動的に識別番号(DisplayListNumberフィールド)が割り当てられたDisplayListクラスのインスタンスを初期化する。 
            </summary>
            <param name="name">名前</param>
        </member>
        <member name="M:GLSharp.DisplayList.GenList(GLSharp.Model,GLSharp.IRenderingParams,OpenTK.Graphics.OpenGL.ListMode)">
            <summary>
            Modelクラスのインスタンスから、新規にディスプレイリストを作成する。
            </summary>
            <param name="model">ディスプレイリストを作成するモデル</param>
            <param name="renderingParams"></param>
            <param name="listMode"></param>
            <returns>作成されたディスプレイリストの識別番号</returns>
        </member>
        <member name="M:GLSharp.DisplayList.NewList(OpenTK.Graphics.OpenGL.ListMode)">
            <summary>
            このインスタンスが持つ識別番号(DisplayListNumberフィールド)でディスプレイリストの作成を開始する。
            gl.NewList( uint list, ListMode mode ) と同等。
            </summary>
        </member>
        <member name="M:GLSharp.DisplayList.EndList">
            <summary>
            ディスプレイリストの作成を終了する。
            gl.EndList() と同等。
            </summary>
        </member>
        <member name="M:GLSharp.DisplayList.ReGenList(GLSharp.Model,GLSharp.IRenderingParams,OpenTK.Graphics.OpenGL.ListMode)">
            <summary>
            以前のディスプレイリストを破棄して、新規にディスプレイリストを作成し直す。
            </summary>
            <param name="model">>ディスプレイリストを作成するモデル</param>
            <param name="renderingParams"></param>
            <param name="listMode"></param>
        </member>
        <member name="M:GLSharp.DisplayList.ReGenList(System.UInt32)">
            <summary>
            以前のディスプレイリストを破棄して、新規にディスプレイリストを作成し直す。
            </summary>
            <param name="displayListNumber">新しいディスプレイリスト番号</param>
        </member>
        <member name="M:GLSharp.DisplayList.CallList">
            <summary>
            ディスプレイリストを呼び出す。
            </summary>
            <exception cref="T:System.Exception">ディスプレイリストが破棄されています。</exception>
        </member>
        <member name="M:GLSharp.DisplayList.ToString">
            <summary>
            このディスプレイリストを表す文字列を取得する。
            </summary>
            <returns>このディスプレイリストの名前とディスプレイリストの番号</returns>
        </member>
        <member name="M:GLSharp.DisplayList.Dispose">
            <summary>
            このディスプレイリストを破棄する。
            </summary>
        </member>
        <member name="P:GLSharp.DisplayList.DisplayListNumber">
            <summary>
            このディスプレイリストに割り当てられた識別番号を取得する。
            </summary>
        </member>
        <member name="P:GLSharp.DisplayList.IsDisposed">
            <summary>
            このディスプレイリストが既に破棄されているかどうかを取得する。
            </summary>
        </member>
        <member name="T:GLSharp.Tessellator">
            <summary>
            GLUを利用してテセレーションを行うクラス。
            </summary>
        </member>
        <member name="F:GLSharp.Tessellator.contour">
            <summary>
            テセレーションを行う輪郭線
            </summary>
        </member>
        <member name="F:GLSharp.Tessellator.autoGenNormals">
            <summary>
            テセレーションでメッシュ作成時に、自動的に法線ベクトルを計算するかどうかを指定するフラグ。
            </summary>
        </member>
        <member name="F:GLSharp.Tessellator.mesh">
            <summary>
            テセレーション時に一時的に使用するメッシュ。
            </summary>
        </member>
        <member name="F:GLSharp.Tessellator.tessObj">
            <summary>
            このインスタンスが持つGLUのテセレーションオブジェクト
            </summary>
        </member>
        <member name="F:GLSharp.Tessellator.gchCollection">
            <summary>
            コールバック関数に渡すオブジェクトのハンドルを一時的に保持しておくためのリスト。
            </summary>
        </member>
        <member name="M:GLSharp.Tessellator.#ctor">
            <summary>
            テセレーションを行うためのオブジェクトを作成・初期化する。
            </summary>
        </member>
        <member name="M:GLSharp.Tessellator.Tessellate">
            <summary>
            GLUによるテセレーションを実行する。
            </summary>
        </member>
        <member name="M:GLSharp.Tessellator.Tessellate(GLSharp.Material)">
            <summary>
            テセレーションによってメッシュを作成する。
            </summary>
            <param name="material">メッシュ中のプリミティブに割り当てられるマテリアル。</param>
            <returns>テセレーションによって作成されたメッシュ</returns>
        </member>
        <member name="M:GLSharp.Tessellator.Tessellate(System.String)">
            <summary>
            テセレーションを行い、ディスプレイリストに格納する。
            </summary>
            <param name="displaylistName">作成されるディスプレイリストの名前</param>
            <returns>テセレーション結果を表すディスプレイリスト</returns>
        </member>
        <member name="M:GLSharp.Tessellator.BeginGLDraw(System.Int32)">
            <summary>
            gl.Begin( BeginMode ) と等価。
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:GLSharp.Tessellator.EndGLDraw">
            <summary>
            gl.End() と等価。
            </summary>
        </member>
        <member name="M:GLSharp.Tessellator.VertexGLDraw(System.IntPtr)">
            <summary>
            gl.Vertex3( double[] ) と等価。
            </summary>
            <param name="data">頂点配列(double[3])へのポインタ</param>
        </member>
        <member name="M:GLSharp.Tessellator.Error(System.Int32)">
            <summary>
            エラーが発生した場合、例外をスローする。
            </summary>
            <param name="err">エラー番号</param>
        </member>
        <member name="M:GLSharp.Tessellator.Tessellate(GLSharp.Contour[],OpenTK.Graphics.OpenGL.TessWinding,System.Single[],GLSharp.Material,System.Single[])">
            <summary>
            輪郭線のテセレーションを行い、メッシュを作成する。
            </summary>
            <param name="contour">テセレーションを行う輪郭線。</param>
            <param name="windingRule">ワインディングの規則を指定する。</param>
            <param name="faceFrontDirection">
            float[]{ x, y, z ]。規格化不要。
            テセレーションによって作成される面の向きの基準方向を指定する。
            </param>
            <param name="material">作成されるポリゴンに指定されるマテリアル。</param>
            <param name="primitiveNormal">
            テセレーションによって作成されるプリミティブの面・頂点法線を指定する。
            すべての頂点が同一平面ならば、この引数で法線を設定できる。
            nullを指定すると、Mesh.GenNormals()メソッドによって法線が作成される。
            </param>
            <returns>テセレーションによって作成されたメッシュ。</returns>
        </member>
        <member name="M:GLSharp.Tessellator.Tessellate(GLSharp.Contour[],OpenTK.Graphics.OpenGL.TessWinding,System.Single[],System.String)">
            <summary>
            輪郭線のテセレーションを行い、それによって描画される内容をディスプレイリストに格納する。
            </summary>
            <param name="contour">テセレーションを行う輪郭線。</param>
            <param name="windingRule">ワインディングの規則を指定する。</param>
            <param name="normal">作成される面の向きを指定するベクトル。</param>
            <param name="displayListName">作成されるディスプレイリストの名前。</param>
            <returns>作成されたディスプレイリスト。</returns>
        </member>
        <member name="M:GLSharp.Tessellator.Dispose">
            <summary>
            このインスタンスが持つGLUのテセレーションオブジェクトを削除する。
            </summary>
        </member>
        <member name="P:GLSharp.Tessellator.TessObject">
            <summary>
            GLUのテセレーションオブジェクトへのポインタを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.Tessellator.Winding">
            <summary>
            ワインディング・ルールを取得・設定する。
            </summary>
        </member>
        <member name="P:GLSharp.Tessellator.FaceFrontDirection">
            <summary>
            テセレーションによって作成される面の向きの基準方向を取得・設定する。
            表がこのベクトルの方向を向くように、面が作成される。
            double[]{ x, y, z }。規格化不要。
            glu.TessNormalとほぼ同等。
            </summary>
        </member>
        <member name="P:GLSharp.Tessellator.CallbackBegin">
            <summary>
            コールバック関数を取得・設定する。
            </summary>
        </member>
        <member name="P:GLSharp.Tessellator.CallbackEnd">
            <summary>
            コールバック関数を取得・設定する。
            </summary>
        </member>
        <member name="P:GLSharp.Tessellator.CallbackVertex">
            <summary>
            コールバック関数を取得・設定する。
            </summary>
        </member>
        <member name="P:GLSharp.Tessellator.CallbackError">
            <summary>
            コールバック関数を取得・設定する。
            </summary>
        </member>
        <member name="P:GLSharp.Tessellator.CallbackCombine">
            <summary>
            コールバック関数を取得・設定する。
            </summary>
        </member>
        <member name="T:GLSharp.Contour">
            <summary>
            輪郭を表す頂点群を持つクラス。
            Tessellattorクラスで用いる。
            </summary>
        </member>
        <member name="F:GLSharp.Contour.vertexes">
            <summary>
            輪郭を表す頂点群
            </summary>
        </member>
        <member name="M:GLSharp.Contour.ScaleVertices(System.Double)">
            <summary>
            頂点群の座標をスケーリングする。
            </summary>
            <param name="scale">拡大率</param>
        </member>
        <member name="M:GLSharp.Contour.ToMesh(GLSharp.Material)">
            <summary>
            輪郭線を、線分のみで構成されるメッシュに変換する。
            </summary>
            <param name="material"></param>
            <returns></returns>
        </member>
        <member name="T:GLSharp.Primitive">
            <summary>
            プリミティブを表す。
            </summary>
            <remarks>
            頂点インデックス、面法線ベクトル、各頂点のUV座標、マテリアル、頂点カラーを持つ。
            </remarks>
        </member>
        <member name="F:GLSharp.Primitive.vertexIndex">
            <summary>
            頂点インデックス
            </summary>
        </member>
        <member name="F:GLSharp.Primitive.faceNormal">
            <summary>
            面法線ベクトル
            </summary>
        </member>
        <member name="F:GLSharp.Primitive.material">
            <summary>
            マテリアルインデックス
            </summary>
        </member>
        <member name="F:GLSharp.Primitive.uv">
            <summary>
            各頂点のUV座標
            </summary>
        </member>
        <member name="F:GLSharp.Primitive.vertexNormal">
            <summary>
            各頂点の頂点法線ベクトル
            </summary>
        </member>
        <member name="F:GLSharp.Primitive.vertexColor">
            <summary>
            頂点カラー(RGBA)
            </summary>
        </member>
        <member name="M:GLSharp.Primitive.#ctor">
             <summary>
            コンストラクタ。
             </summary>
        </member>
        <member name="M:GLSharp.Primitive.#ctor(System.Int32[],System.Single[][],System.Int32)">
            <summary>
            コンストラクタ。
            </summary>
            <param name="vertexIndex">頂点インデックス</param>
            <param name="uv">各頂点のUV座標。テクスチャを使用しない場合はnull。</param>
            <param name="materialIndex">マテリアルのインデックス</param>
        </member>
        <member name="M:GLSharp.Primitive.#ctor(System.Int32[],System.Single[],System.Single[][],System.Int32)">
            <summary>
            コンストラクタ。
            </summary>
            <param name="vertexIndex">頂点インデックス</param>
            <param name="faceNormal">面法線ベクトル</param>
            <param name="uv">各頂点のUV座標。テクスチャを使用しない場合はnull。</param>
            <param name="materialIndex">マテリアルのインデックス</param>
        </member>
        <member name="M:GLSharp.Primitive.#ctor(System.Int32[],System.Single[],System.Single[][],System.Single[][],System.Int32)">
            <summary>
            コンストラクタ。
            </summary>
            <param name="vertexIndex">頂点インデックス</param>
            <param name="faceNormal">面法線ベクトル</param>
            <param name="vertexNormal">頂点法線ベクトル</param>
            <param name="uv">各頂点のUV座標。テクスチャを使用しない場合はnull。</param>
            <param name="materialIndex">マテリアルのインデックス</param>
        </member>
        <member name="M:GLSharp.Primitive.Clone">
            <summary>
            このインスタンスのコピーを、新規のインスタンスとして作成する。
            </summary>
            <returns>このインスタンスのコピー</returns>
        </member>
        <member name="T:GLSharp.TexCoordFunc">
            <summary>
            テクスチャ座標を指定するメソッドを表すデリゲート。
            </summary>
            <param name="coord">テクスチャ座標</param>
        </member>
        <member name="T:GLSharp.Mesh">
            <summary>
            3Dモデルのメッシュを表す。
            頂点、マテリアル、プリミティブなどを持つ。
            </summary>
        </member>
        <member name="F:GLSharp.Mesh.DefaultWireframeMaterial">
            <summary>
            デフォルトの、ワイヤーフレームを描くときに使用するマテリアル。
            Meshクラスの新しいインスタンスが作成されるとき、wireframeMaterialfiフィールドにこのマテリアルが割り当てられる。
            </summary>
        </member>
        <member name="F:GLSharp.Mesh.DefaultVertexMaterial">
            <summary>
            デフォルトの、頂点を描く時に使用するマテリアル。
            Meshクラスの新しいインスタンスが作成されるとき、vertexMaterialフィールドにこのマテリアルが割り当てられる。        
            </summary>
        </member>
        <member name="F:GLSharp.Mesh.DefaultVertexNormalMaterial">
            <summary>
            デフォルトの、法線ベクトルを描く時に使用するマテリアル。
            Meshクラスの新しいインスタンスが作成されるとき、vertexNormalMaterialフィールドにこのマテリアルが割り当てられる。        
            </summary>
        </member>
        <member name="F:GLSharp.Mesh.vertexes">
            <summary>
            頂点座標のリスト
            </summary>
        </member>
        <member name="F:GLSharp.Mesh.materials">
            <summary>
            マテリアルのリスト
            </summary>
        </member>
        <member name="F:GLSharp.Mesh.primitives">
            <summary>
            プリミティブのリスト
            </summary>
            <remarks>
            PrimitiveメンバのvertexIndex.Lenthプロパティによって、種類を区別している。
            vertexIndex.Lenth : 1=GL_POINTS、2=GL_LINES、3=GL_TRIANGLES、4=GL_QUADS。
            これら以外の場合は無視される。
            </remarks>
        </member>
        <member name="F:GLSharp.Mesh.smoothingAngle">
            <summary>
            スムージング角（角度）
            </summary>
        </member>
        <member name="F:GLSharp.Mesh.smoothingBound">
            <summary>
            スムージング境界（内積値）
            </summary>
        </member>
        <member name="F:GLSharp.Mesh.shadingModel">
            <summary>
            シェーディング方法（フラット・スムーズ）の指定
            </summary>
        </member>
        <member name="F:GLSharp.Mesh.aabb">
            <summary>
            このメッシュのバウンディング・ボックス。
            </summary>
        </member>
        <member name="F:GLSharp.Mesh.lineWidth">
            <summary>
            線プリミティブを描画する時の線の幅
            </summary>
            <remarks>
            メッシュ内の線プリミティブを描画するときの、線の幅を指定する。
            </remarks>
        </member>
        <member name="F:GLSharp.Mesh.pointSize">
            <summary>
            点プリミティブを描画する時の点のサイズ
            </summary>
            <remarks>
            メッシュ内の点プリミティブを描画するときの、点のサイズを指定する。
            </remarks>
        </member>
        <member name="F:GLSharp.Mesh.showWireFrame">
            <summary>
            ワイヤーフレームを描画するかどうかを指定する。
            </summary>
            <remarks>
            trueが設定されている場合、メッシュ内のプリミティブをワイヤーフレームで描画する。
            </remarks>
        </member>
        <member name="F:GLSharp.Mesh.wireframeLineWidth">
            <summary>
            ワイヤーフレームの線の幅
            </summary>
            <remarks>
            ワイヤーフレームを描画するときの、
            ワイヤーフレームの線の幅を指定する。
            </remarks>
        </member>
        <member name="F:GLSharp.Mesh.wireframeMaterial">
            <summary>
            ワイヤーフレームを描くときに使用するマテリアル
            </summary>
        </member>
        <member name="F:GLSharp.Mesh.wireframeLighting">
            <summary>
            ワイヤーフレーム描画時に、
            ライティングを有効にするかどうかを指定する。
            </summary>
            <remarks>
            trueが指定されている場合、ワイヤーフレーム描画時にライティングが適用される。
            法線ベクトルは、プリミティブが持っている法線ベクトルが適用される。
            </remarks>
        </member>
        <member name="F:GLSharp.Mesh.hiddenByFaces">
            <summary>
            trueを設定した場合、面が非表示でも、ワイヤーフレームや頂点、頂点法線の描画時に、それらが面に隠れるようになる。
            </summary>
            <remarks>
            実際には、透明なマテリアルを使用して面を描画して、ワイヤーフレームや頂点、頂点法線が面に隠れるようにしている。
            </remarks>
        </member>
        <member name="F:GLSharp.Mesh.wireframeUseFaceMaterial">
            <summary>
            面に設定されたマテリアルを使用してワイヤーフレームを描画するかどうかを表すフラグを設定・取得する。
            </summary>
            <remarks>
            trueが設定されている場合、ワイヤーフレームを描画するときに、
            プリミティブが持っているマテリアルが適用される。
            falseの場合は、wireframeMaterialフィールドで指定されたマテリアルが適用される。
            </remarks>
        </member>
        <member name="F:GLSharp.Mesh.showVertexPoints">
            <summary>
            頂点を点として描画するかどうかを指定する。
            </summary>
            <remarks>
            trueが設定されている場合は、メッシュ内の頂点データを点として描画する。
            </remarks>
        </member>
        <member name="F:GLSharp.Mesh.vertexPointSize">
            <summary>
            頂点を描画する時の点のサイズ
            </summary>
            <remarks>
            頂点を描画する時の、点のサイズを指定する。
            </remarks>
        </member>
        <member name="F:GLSharp.Mesh.vertexMaterial">
            <summary>
            頂点を描く時に使用するマテリアル
            </summary>
        </member>
        <member name="F:GLSharp.Mesh.vertexPointsUseFaceMaterial">
            <summary>
            頂点を描画するときに、面に設定されたマテリアルを使用するかどうかを指定する。
            </summary>
            <remarks>
            trueが設定されている場合、メッシュ内の頂点データを点として描画するときに、
            プリミティブが持っているマテリアルが適用される。
            falseの場合は、vertexMaterialフィールドで指定されたマテリアルが適用される。
            </remarks>
        </member>
        <member name="F:GLSharp.Mesh.vertexPointsLighting">
            <summary>
            頂点を描画する際に、頂点法線を元にライティングを適用するかどうかを指定する。
            </summary>
            <remarks>
            trueが指定されている場合、頂点を描画するときにライティングが適用される。
            法線ベクトルは、プリミティブが持っている法線ベクトルが適用される。
            </remarks>
        </member>
        <member name="F:GLSharp.Mesh.showVertexNormals">
            <summary>
            頂点法線ベクトルを描画するかどうかを指定する。
            </summary>
            <remarks>
            trueが設定されている場合、メッシュ内のプリミティブが持っている頂点法線ベクトルを描画する。
            </remarks>
        </member>
        <member name="F:GLSharp.Mesh.vertexNormalLength">
            <summary>
            頂点法線を描画する際の、法線ベクトルを表す線の長さ
            </summary>
            <remarks>
            頂点法線を描画するときの、法線ベクトルを表す線の長さを指定する。
            </remarks>
        </member>
        <member name="F:GLSharp.Mesh.vertexNormalWidth">
            <summary>
            頂点法線を描画する際の、法線ベクトルを表す線の太さ
            </summary>
            <remarks>
            頂点法線を描画するときの、法線ベクトルを表す線の太さを指定する。
            </remarks>
        </member>
        <member name="F:GLSharp.Mesh.vertexNormalMaterial">
            <summary>
            法線ベクトルを描く時に使用するマテリアル
            </summary>
        </member>
        <member name="F:GLSharp.Mesh.showFaceNormals">
            <summary>
            面法線ベクトルを描画するかどうかを指定する。
            </summary>
            <remarks>
            trueが設定されている場合、メッシュ内のプリミティブが持っている面法線ベクトルを描画する。
            </remarks>
        </member>
        <member name="F:GLSharp.Mesh.faceNormalLength">
            <summary>
            面法線を描画する際の、法線ベクトルを表す線の長さ
            </summary>
            <remarks>
            面法線を描画するときの、法線ベクトルを表す線の長さを指定する。
            </remarks>
        </member>
        <member name="F:GLSharp.Mesh.faceNormalWidth">
            <summary>
            面法線を描画する際の、法線ベクトルを表す線の太さ
            </summary>
            <remarks>
            面法線を描画するときの、法線ベクトルを表す線の太さを指定する。
            </remarks>
        </member>
        <member name="F:GLSharp.Mesh.faceNormalMaterial">
            <summary>
            面ベクトルを描く時に使用するマテリアル
            </summary>
        </member>
        <member name="F:GLSharp.Mesh.showFaces">
            <summary>
            面を描画するかどうかを指定する。
            </summary>
            <remarks>
            trueが設定されている場合は、面（三角・四角形プリミティブの面だけでなく、線・点プリミティブも含む）を描画する。
            falseの場合は描画されない。
            </remarks>
        </member>
        <member name="F:GLSharp.Mesh.polygonOffsetUnits">
            <summary>
            面とワイヤーフレームまたは頂点を同時に描画する際に使用される、ポリゴンオフセットのパラメータ。
            </summary>
        </member>
        <member name="F:GLSharp.Mesh.polygonOffsetFactor">
            <summary>
            面とワイヤーフレームまたは頂点を同時に描画する際に使用される、ポリゴンオフセットのパラメータ。
            </summary>
        </member>
        <member name="F:GLSharp.Mesh.clearMaterial">
            <summary>
            内部で使用されるダミーマテリアル
            </summary>
        </member>
        <member name="M:GLSharp.Mesh.CreateVertexArray">
            <summary>
            <para>（試作中・・・）</para>
            <para>Vertexesプロパティに格納されている頂点リストから、
            頂点配列を作成する。</para>
            <para>作成された頂点配列はVertexArrayプロパティに格納される。</para>
            </summary>
        </member>
        <member name="M:GLSharp.Mesh.CreateVertexBuffer(OpenTK.Graphics.OpenGL.BufferUsageHint)">
            <summary>
            <para>（試作中・・・）</para>
            <para>頂点配列を格納したバッファオブジェクトを作成する。</para>
            <para>作成されたバッファオブジェクトはVertexArrayプロパティに格納される。</para>
            </summary>
            <param name="usage"></param>
        </member>
        <member name="M:GLSharp.Mesh.GenNormals">
            <summary>
            面法線・頂点法線を作成する。
            </summary>
        </member>
        <member name="M:GLSharp.Mesh.GenNormals(System.Int32,System.Int32)">
            <summary>
            指定した範囲の面法線・頂点法線を作成する。
            </summary>
            <param name="from">面法線・頂点法線の作成を開始するプリミティブのインデックス</param>
            <param name="to">面法線・頂点法線の作成を終了するプリミティブのインデックス</param>
        </member>
        <member name="M:GLSharp.Mesh.FlipFaces(System.Int32,System.Int32)">
            <summary>
            プリミティブの面の向きを裏返す。
            </summary>
            <param name="from">処理を開始するプリミティブのインデックス</param>
            <param name="to">処理を終了するプリミティブのインデックス</param>
            <remarks>
            法線などがあれば、それらも同時に設定されるので、
            このメソッドの使用後に別途再設定する必要はない。
            </remarks>
        </member>
        <member name="M:GLSharp.Mesh.FlipFaces">
            <summary>
            すべてのプリミティブの面の向きを裏返す。
            </summary>
            <remarks>
            法線などがあれば、それらも同時に設定されるので、
            このメソッドの使用後に別途再設定する必要はない。
            </remarks>
        </member>
        <member name="M:GLSharp.Mesh.FlipFaces(System.Int32,System.Int32,System.Single[])">
            <summary>
            プリミティブの面の向きをそろえる。
            </summary>
            <param name="from">処理を開始するプリミティブのインデックス</param>
            <param name="to">処理を終了するプリミティブのインデックス</param>
            <param name="direction">
            基準となる向きを表すベクトル。
            float[]{ x, y, z }。
            規格化不要。
            このベクトルの向きから見て、プリミティブの面が表を向くように、 
            面の向きがそろえられる。
            </param>
            <remarks>
            法線などがあれば、それらも同時に設定されるので、
            このメソッドの使用後に別途再設定する必要はない。
            </remarks>
        </member>
        <member name="M:GLSharp.Mesh.FlipFaces(System.Single[])">
            <summary>
            すべてのプリミティブの面の向きをそろえる。
            </summary>
            <param name="direction">
            基準となる向きを表すベクトル。
            float[]{ x, y, z }。
            規格化不要。
            このベクトルの向きから見て、プリミティブの面が表を向くように、 
            面の向きがそろえられる。
            </param>
            <remarks>
            法線などがあれば、それらも同時に設定されるので、
            このメソッドの使用後に別途再設定する必要はない。
            </remarks>
        </member>
        <member name="M:GLSharp.Mesh.CreateBackFace(System.Int32,System.Int32)">
            <summary>
            面の裏面を作成し、両面化する。
            点、線プリミティブは無視される。
            </summary>
            <param name="from">裏面を作成するプリミティブのインデックス</param>
            <param name="to">裏面の作成を終了するプリミティブのインデックス</param>
        </member>
        <member name="M:GLSharp.Mesh.CreateBackFace">
            <summary>
            面の裏面を作成し、両面化する。
            点、線プリミティブは無視される。
            </summary>
        </member>
        <member name="M:GLSharp.Mesh.Mirror(GLSharp.Axis,System.Boolean,System.Single)">
            <summary>
            
            </summary>
            <param name="mirrorAxis"></param>
            <param name="connect"></param>
            <param name="connectionDistance">接続を制限する距離。負の値なら制限無し。</param>
        </member>
        <member name="M:GLSharp.Mesh.TranslateVertices(System.Single[])">
            <summary>
            全ての頂点座標を平行移動する
            </summary>
            <param name="translation">平行移動を表すベクトル</param>
        </member>
        <member name="M:GLSharp.Mesh.ScaleVertexes(System.Single,System.Single,System.Single)">
            <summary>
            頂点座標をスケーリング（拡大・縮小）する。
            </summary>
            <param name="scale_x">x軸方向の拡大率</param>
            <param name="scale_y">y軸方向の拡大率</param>
            <param name="scale_z">z軸方向の拡大率</param>
        </member>
        <member name="M:GLSharp.Mesh.TransformVertices(System.Single[])">
            <summary>
            全ての頂点座標に変換行列を適用する。
            </summary>
            <param name="rotationMatrix">変換行列</param>
        </member>
        <member name="M:GLSharp.Mesh.SortPrimitives">
            <summary>
            プリミティブを描画しやすいようにソートして、描画の高速化を図る。
            マテリアルとプリミティブの種類によってソートする。
            </summary>
            <remarks>
            ソートして高速化、といっても、マテリアルとプリミティブの種類をそろえて並べて、
            OpenGLへのプリミティブの種類やマテリアルの変更命令の回数を最小限に抑えるだけ。
            </remarks>
        </member>
        <member name="M:GLSharp.Mesh.DrawSmooth(GLSharp.IRenderingParams)">
            <summary>
            スムーズシェーディングで描画する。
            </summary>
        </member>
        <member name="M:GLSharp.Mesh.DrawSmoothWithAMaterial(GLSharp.IRenderingParams,GLSharp.Material)">
            <summary>
            指定した単一マテリアルのみを用いてスムーズシェーディングで描画する。
            </summary>
            <param name="renderingParams">描画先パラメータ</param>
            <param name="material">描画に使用するマテリアル</param>
        </member>
        <member name="M:GLSharp.Mesh.DrawFlat(GLSharp.IRenderingParams)">
            <summary>
            フラットシェーディングで描画する。
            </summary>
        </member>
        <member name="M:GLSharp.Mesh.DrawFlatWithAMaterial(GLSharp.IRenderingParams,GLSharp.Material)">
            <summary>
            指定した単一マテリアルのみを用いてフラットシェーディングで描画する。
            </summary>
            <param name="renderingParams">描画パラメータ</param>
            <param name="mat">描画に使用するマテリアル</param>
        </member>
        <member name="M:GLSharp.Mesh.DrawVertexes(GLSharp.IRenderingParams)">
            <summary>
            頂点を、点として描画する。
            </summary>
            <remarks>
            vertexPointSize, vertexMaterial, vertexPointsUseFaceMaterial, vertexPointsLighting, shadeMode 
            の、各フィールドが描画結果に影響する。
            </remarks>
        </member>
        <member name="M:GLSharp.Mesh.DrawVertexNormals">
            <summary>
            メッシュ内の各プリミティブが持つ頂点法線ベクトルを描画する。
            ライティングは適用されない。
            </summary>
            <remarks>
            faceNormalWidth, faceNormalLenth, faceNormalMaterial 
            の、各フィールドが描画結果に影響する。
            </remarks>
        </member>
        <member name="M:GLSharp.Mesh.DrawFaceNormals">
            <summary>
            メッシュ内の各プリミティブが持つ面法線ベクトルを描画する。
            ライティングは適用されない。
            </summary>
            <remarks>
            faceNormalWidth, faceNormalLenth, faceNormalMaterial 
            の、各フィールドが描画結果に影響する。
            </remarks>
        </member>
        <member name="M:GLSharp.Mesh.DrawWireFrame(GLSharp.IRenderingParams)">
            <summary>
            ワイヤーフレームを描画する。
            </summary>
            <remarks>
            gl.PolygonMode( gl.FRONT_AND_BACK, gl.LINE );
            を設定して描画する。
            wireframeLineWidth, wireframeMaterial, wireframeUseFaceMaterial, wireframeLighting 
            の、各フィールドが描画結果に影響する。
            </remarks>
        </member>
        <member name="M:GLSharp.Mesh.DrawSmoothWireframeWithLines">
            <summary>
            ワイヤーフレームを描画する。
            スムーズシェーディング。
            </summary>
            <remarks>
            線プリミティブで頂点間を結んで描画する。
            wireframeLineWidth, wireframeMaterialが描画結果に影響する。
            </remarks>
        </member>
        <member name="M:GLSharp.Mesh.DrawFlatWireframeWithLines">
            <summary>
            ワイヤーフレームを描画する。
            フラットシェーディング。
            </summary>
            <remarks>
            線プリミティブで頂点間を結んで描画する。
            wireframeLineWidth, wireframeMaterialが描画結果に影響する。
            </remarks>
        </member>
        <member name="M:GLSharp.Mesh.Draw(GLSharp.IRenderingParams)">
            <summary>
            このメッシュを描画する。
            </summary>
        </member>
        <member name="M:GLSharp.Mesh.MeasureAABB">
            <summary>
            メッシュのすべての頂点座標を調べて、AABBプロパティの値を設定する。
            </summary>
        </member>
        <member name="M:GLSharp.Mesh.Clone">
            <summary>
            クローン（同じ値の新規インスタンス）を作成する。
            頂点やプリミティブ、マテリアル(と、そのテクスチャ)なども、クローンが作成される。
            </summary>
            <returns>このメッシュのクローン</returns>
        </member>
        <member name="M:GLSharp.Mesh.Clone(System.Boolean)">
            <summary>
            クローン（同じ値の新規インスタンス）を作成する。
            頂点やプリミティブ、マテリアル(と、そのテクスチャ)なども、クローンが作成される。
            </summary>
            <param name="cloneMaterials">マテリアルのクローンを作成するかどうかを指定する。</param>
            <returns>このメッシュのクローン</returns>
        </member>
        <member name="M:GLSharp.Mesh.Dispose">
            <summary>
            マテリアルが持っているテクスチャを破棄します。
            </summary>
        </member>
        <member name="P:GLSharp.Mesh.Vertexes">
            <summary>
            頂点座標のリスト
            </summary>
        </member>
        <member name="P:GLSharp.Mesh.VertexArray">
            <summary>
            [get,set] 頂点配列、または頂点配列を格納したバッファオブジェクト
            </summary>
        </member>
        <member name="P:GLSharp.Mesh.VertexDataSource">
            <summary>
            <para>（試作中・・・）</para>
            <para>[get,set] 頂点データのソース。</para>
            <para>デフォルトはVertexList。</para>
            <para>VertexPointerまたはVertexBufferを設定する場合は、
            VertexArrayプロパティに頂点配列または頂点配列を格納したバッファオブジェクトを設定する必要がある。
            </para>
            </summary>
            <remarks>
            <para>CreateVertexArray()で頂点配列、CreateVertexBuffer()で頂点配列を格納したバッファオブジェクトを
            Vertexesプロパティに格納されている頂点リストから作成できる。</para>
            </remarks>
        </member>
        <member name="P:GLSharp.Mesh.Materials">
            <summary>
            マテリアルのリスト
            </summary>
        </member>
        <member name="P:GLSharp.Mesh.Primitives">
            <summary>
            プリミティブのリスト
            </summary>
            <remarks>
            PrimitiveメンバのvertexIndex.Lenthプロパティによって、種類を区別している。
            vertexIndex.Lenth : 1=GL_POINTS、2=GL_LINES、3=GL_TRIANGLES、4=GL_QUADS。
            これら以外の場合は無視される。
            </remarks>
        </member>
        <member name="P:GLSharp.Mesh.SmoothingAngle">
            <summary>
            スムージング角[degree]
            </summary>
        </member>
        <member name="P:GLSharp.Mesh.SmoothingBound">
            <summary>
            スムージング角のコサイン値
            </summary>
        </member>
        <member name="P:GLSharp.Mesh.ShadingModel">
            <summary>
            シェーディング方法（フラット・スムーズ）を取得・設定する。
            </summary>
        </member>
        <member name="P:GLSharp.Mesh.AABB">
            <summary>
            このメッシュのバウンディング・ボックスを取得・設定する。
            </summary>
        </member>
        <member name="F:GLSharp.Mesh.VertexDataMode.VertexList">
            <summary>
            Vertexesプロパティに格納されている頂点リストを元に描画する。
            </summary>
        </member>
        <member name="F:GLSharp.Mesh.VertexDataMode.VertexPointer">
            <summary>
            VertexArrayプロパティに格納されている頂点配列を描画する。
            </summary>
        </member>
        <member name="F:GLSharp.Mesh.VertexDataMode.VertexBuffer">
            <summary>
            VertexArrayプロパティに格納されている頂点配列のバッファオブジェクトを描画する。
            </summary>
        </member>
        <member name="T:GLSharp.Mesh.VertexArrayElementFunc">
            <summary>
            <para>指定したインデックスの頂点をOpenGLに指定するメソッドを表すデリゲート。</para>
            <para>（glVertex、glArrayElementなど。）</para>
            </summary>
            <param name="index">頂点インデックス</param>
        </member>
        <member name="T:GLSharp.PolygonTextLabel">
            <summary>
            アウトラインフォントを使用して文字列をポリゴンで描画するクラス。
            描画テキストの簡単なレイアウトも設定可能。
            </summary>
        </member>
        <member name="T:GLSharp.TextLabel`2">
            <summary>
            複数のグリフをテキストとしてレイアウトし、描画する機能を提供する抽象クラス。
            </summary>
        </member>
        <member name="F:GLSharp.TextLabel`2.text">
            <summary>
            描画する文字列。
            </summary>
        </member>
        <member name="F:GLSharp.TextLabel`2.charList">
            <summary>
            描画される文字のリスト。
            </summary>
        </member>
        <member name="F:GLSharp.TextLabel`2.charSpace_1">
            <summary>
            chaeSpace + 1f
            </summary>
        </member>
        <member name="F:GLSharp.TextLabel`2.lineSpace_1">
            <summary>
            lineSpace + 1f
            </summary>
        </member>
        <member name="F:GLSharp.TextLabel`2.layout">
            <summary>
            描画するテキストのレイアウト
            </summary>
        </member>
        <member name="F:GLSharp.TextLabel`2.verticalText">
            <summary>
            テキストが縦書きかどうかを表すフラグ。
            </summary>
        </member>
        <member name="F:GLSharp.TextLabel`2.textMetrics">
            <summary>
            描画するテキストのサイズなどの情報を格納する。
            </summary>
        </member>
        <member name="F:GLSharp.TextLabel`2.lineMetrics">
            <summary>
            描画するテキストの各行ごとのサイズなどの情報を格納する。
            </summary>
        </member>
        <member name="F:GLSharp.TextLabel`2.offset">
            <summary>
            最初の1文字目の描画位置へのオフセット。
            </summary>
        </member>
        <member name="M:GLSharp.TextLabel`2.#ctor(System.String,`1,GLSharp.TextLayout,System.Boolean,System.Single,System.Single,GLSharp.GlyphDictionary{`0,`1})">
            <summary>
            任意のテキストで初期化する。
            </summary>
            <param name="text">テキスト</param>
            <param name="glyphFont">フォントなどの指定</param>
            <param name="layout">テキストのレイアウト</param>
            <param name="vertical">縦書きかどうかの指定</param>
            <param name="charSpace">文字間のスペース。0で標準、1.0で約1文字分のスペース。</param>
            <param name="lineSpace">行間のスペース。0で標準、1.0で約1行分のスペース。</param>
            <param name="dictionary">グリフを作成・管理するオブジェクト</param>
        </member>
        <member name="M:GLSharp.TextLabel`2.#ctor(GLSharp.TextLayout,System.Single,System.Single)">
            <summary>
            テキスト無しで初期化する。
            </summary>
            <param name="layout">テキストのレイアウト</param>
            <param name="charSpace">文字間のスペース。0で標準、1.0で約1文字分のスペース。</param>
            <param name="lineSpace">行間のスペース。0で標準、1.0で約1行分のスペース。</param>
        </member>
        <member name="M:GLSharp.TextLabel`2.RebuildText(System.String,`1,GLSharp.GlyphDictionary{`0,`1})">
            <summary>
            描画する文字列をすべて再構成する。
            </summary>
            <param name="text">描画する文字列</param>
            <param name="glyphFont">フォントなどの指定</param>
            <param name="dictionary">グリフを作成・管理するオブジェクト</param>
        </member>
        <member name="M:GLSharp.TextLabel`2.ClearText">
            <summary>
            描画するテキストをすべて削除する。
            </summary>
        </member>
        <member name="M:GLSharp.TextLabel`2.RemoveText(System.Int32,System.Int32)">
            <summary>
            <para>描画するテキストから、インデックスで指定した範囲の文字列を削除する。</para>
            <para>
            追加された文字列は自動的にレイアウトされません。
            このメソッドを呼び出した後は、LayOutTextメソッドでテキストの再レイアウトを行ってください。
            </para>
            </summary>
            <param name="startIndex">削除を開始するインデックス</param>
            <param name="count">削除する文字数</param>
        </member>
        <member name="M:GLSharp.TextLabel`2.AddText(System.String,`1,GLSharp.GlyphDictionary{`0,`1})">
            <summary>
            <para>描画する文字列を追加する。</para>
            <para>
            追加された文字列は自動的にレイアウトされません。
            このメソッドを呼び出した後は、LayOutTextメソッドでテキストの再レイアウトを行ってください。
            </para>
            </summary>
            <param name="text">追加する文字列</param>
            <param name="glyphFont">フォントなどの指定</param>
            <param name="dictionary">グリフを作成・管理するオブジェクト</param>
        </member>
        <member name="M:GLSharp.TextLabel`2.AddText(System.Char,`1,GLSharp.GlyphDictionary{`0,`1})">
            <summary>
            <para>描画する文字を追加する。</para>
            <para>
            追加された文字は自動的にレイアウトされません。
            このメソッドを呼び出した後は、LayOutTextメソッドでテキストの再レイアウトを行ってください。
            </para>
            </summary>
            <param name="c">追加する文字</param>
            <param name="glyphFont">フォントなどの指定</param>
            <param name="dictionary">グリフを作成・管理するオブジェクト</param>
        </member>
        <member name="F:GLSharp.TextLabel`2.offsetToOrigin">
            <summary>
            <para>テキストの原点へのオフセット。 ( float[]{ x, y, z } )</para>
            <para>OrginプロパティがLastBaseLineLeftのとき、この値は(0,0,0)となる。</para>
            </summary>
        </member>
        <member name="M:GLSharp.TextLabel`2.CalcOffsetToOrigin">
            <summary>
            オフセットを計算する。
            </summary>
        </member>
        <member name="M:GLSharp.TextLabel`2.Draw">
            <summary>
            文字列を描画する。
            </summary>
        </member>
        <member name="M:GLSharp.TextLabel`2.LayOutText">
            <summary>
            現在のLayoutプロパティの値でテキストをレイアウトする。
            </summary>
        </member>
        <member name="M:GLSharp.TextLabel`2.LayOutText(GLSharp.TextLayout,System.Single,System.Single)">
            <summary>
            テキストをレイアウトする。
            </summary>
            <param name="layout">テキストのレイアウト</param>
            <param name="charSpace">各文字間のスペース。0なら文字同士が詰めて配置される。1.0fで文字1つ分のスペース。</param>
            <param name="lineSpace">各行間のスペース。0なら各行が詰めて配置される。1.0fで１行分のスペース。</param>
        </member>
        <member name="M:GLSharp.TextLabel`2.LayOutText(GLSharp.TextLayout)">
            <summary>
            テキストをレイアウトする。
            </summary>
            <param name="layout">テキストのレイアウト</param>
        </member>
        <member name="M:GLSharp.TextLabel`2.GetAABB">
            <summary>
            このインスタンスのAABBを取得する。
            </summary>
            <returns></returns>
        </member>
        <member name="M:GLSharp.TextLabel`2.Clone">
            <summary>
            このインスタンスのクローンを作成する。
            </summary>
            <returns>このインスタンスのクローン</returns>
        </member>
        <member name="P:GLSharp.TextLabel`2.Text">
            <summary>
            [get] 描画する文字列
            </summary>
        </member>
        <member name="P:GLSharp.TextLabel`2.CharList">
            <summary>
            [get] 描画される文字のリスト
            </summary>
        </member>
        <member name="P:GLSharp.TextLabel`2.CharSpace">
            <summary>
            <para>[get,set] 文字間のスペース。</para>
            <para>0なら詰めて、1.0fで1文字分のスペースが空く。</para>
            </summary>
        </member>
        <member name="P:GLSharp.TextLabel`2.LineSpace">
            <summary>
            <para>[get,set] 行間のスペース。</para>
            <para>0なら詰めて、1.0fで1行分のスペースが空く。</para>
            </summary>
        </member>
        <member name="P:GLSharp.TextLabel`2.Layout">
            <summary>
            <para>[get] 描画するテキストのレイアウト。</para>
            <para>設定する場合は、LayOutTextメソッドを使用してください。</para>
            </summary>
        </member>
        <member name="P:GLSharp.TextLabel`2.VerticalText">
            <summary>
            <para>[get,set] テキストが縦書きかどうか。</para>
            </summary>
        </member>
        <member name="P:GLSharp.TextLabel`2.TextMetrics">
            <summary>
            <para>[get] 描画するテキストのサイズなどの情報</para>
            </summary>
        </member>
        <member name="P:GLSharp.TextLabel`2.LineMetrics">
            <summary>
            <para>[get] 描画するテキストの各行ごとのサイズなどの情報。</para>
            </summary>
        </member>
        <member name="P:GLSharp.TextLabel`2.FirstCharPosition">
            <summary>
            <para>[get] 最初の1文字目の描画位置。</para>
            </summary>
        </member>
        <member name="P:GLSharp.TextLabel`2.Origin">
            <summary>
            <para>描画されるテキストの原点を取得・設定する。</para>
            <para>デフォルトは LastBaseLineLeft = 最後の行のベースラインの左端。</para>
            </summary>
        </member>
        <member name="P:GLSharp.TextLabel`2.OffsetToOrigin">
            <summary>
            <para>テキストの原点へのオフセットを取得する。 ( float[]{ x, y, z } )</para>
            <para>OrginプロパティがLastBaseLineLeftのとき、この値は(0,0,0)となる。</para>
            </summary>
        </member>
        <member name="M:GLSharp.PolygonTextLabel.#ctor(GLSharp.TextLayout,System.Single,System.Single)">
            <summary>
            ポリゴンで描画される文字列を作成する。
            描画する文字列なしで初期化する。
            </summary>
            <param name="layout">テキストのレイアウト</param>
            <param name="charSpace">文字間のスペース</param>
            <param name="lineSpace">行間のスペース</param>
        </member>
        <member name="M:GLSharp.PolygonTextLabel.#ctor(System.String,GLSharp.PolygonGlyphFont,GLSharp.TextLayout,System.Single,System.Single,GLSharp.PolygonGlyphDictionary)">
            <summary>
            ポリゴンで描画される文字列を作成する。
            </summary>
            <param name="text">描画するテキスト</param>
            <param name="glyphFont">フォントや文字サイズなどの指定</param>
            <param name="layout">テキストのレイアウト</param>
            <param name="charSpace">文字間のスペース</param>
            <param name="lineSpace">行間のスペース</param>
            <param name="dictionary">グリフのディスプレイリストを作成・保持するOutlineGlyphDictionaryのインスタンス</param>
        </member>
        <member name="M:GLSharp.PolygonTextLabel.#ctor(System.String,System.Drawing.Font,System.Single,System.Single,GLSharp.TextLayout,System.Single,System.Single,GLSharp.PolygonGlyphDictionary)">
            <summary>
            ポリゴンで描画される文字列を作成する。
            </summary>
            <param name="text">描画するテキスト</param>
            <param name="font">テキストのフォント</param>
            <param name="size">文字のサイズ</param>
            <param name="extrusion">文字の厚み</param>
            <param name="layout">テキストのレイアウト</param>
            <param name="charSpace">文字間のスペース</param>
            <param name="lineSpace">行間のスペース</param>
            <param name="dictionary">グリフのディスプレイリストを作成・保持するOutlineGlyphDictionaryのインスタンス</param>
        </member>
        <member name="M:GLSharp.PolygonTextLabel.Draw">
            <summary>
            文字列を描画する。
            </summary>
        </member>
        <member name="M:GLSharp.PolygonTextLabel.AddText(System.String,System.Drawing.Font,System.Single,System.Single,GLSharp.PolygonGlyphDictionary)">
            <summary>
            <para>描画する文字列を追加する。</para>
            <para>
            追加された文字列は自動的にレイアウトされません。
            このメソッドを呼び出した後は、LayOutTextメソッドでテキストの再レイアウトを行ってください。
            </para>
            </summary>
            <param name="text">追加する文字列</param>
            <param name="font">フォント</param>
            <param name="size">サイズ</param>
            <param name="extrusion">文字の厚さ</param>
            <param name="dictionary">グリフを作成・管理するオブジェクト</param>
        </member>
        <member name="M:GLSharp.PolygonTextLabel.AddText(System.Char,System.Drawing.Font,System.Single,System.Single,GLSharp.PolygonGlyphDictionary)">
            <summary>
            <para>描画する文字を追加する。</para>
            <para>
            追加された文字は自動的にレイアウトされません。
            このメソッドを呼び出した後は、LayOutTextメソッドでテキストの再レイアウトを行ってください。
            </para>
            </summary>
            <param name="c">追加する文字</param>
            <param name="font">フォント</param>
            <param name="size">サイズ</param>
            <param name="extrusion">文字の厚さ</param>
            <param name="dictionary">グリフを作成・管理するオブジェクト</param>
        </member>
        <member name="T:GLSharp.PolygonGlyph">
            <summary>
            ポリゴンで描画される文字のグリフを表す。
            </summary>
        </member>
        <member name="T:GLSharp.GlyphBase">
            <summary>
            [abstract] 文字のグリフを表す。
            </summary>
        </member>
        <member name="T:GLSharp.IGlyph">
            <summary>
            メトリクスを持ち、文字として配置可能なグリフであることを表す。
            </summary>
        </member>
        <member name="M:GLSharp.IGlyph.ResetMetrics">
            <summary>
            Metricsプロパティの値を、デフォルトの値にリセットする。
            </summary>
        </member>
        <member name="M:GLSharp.IGlyph.Layout">
            <summary>
            このオブジェクトが持っている子オブジェクトをレイアウトする。
            また、このオブジェクト自身のMetricsプロパティの値も決定される。
            </summary>
        </member>
        <member name="M:GLSharp.IGlyph.Dispose">
            <summary>
            このオブジェクトが使用するアンマネージリソースを解放する。
            </summary>
        </member>
        <member name="P:GLSharp.IGlyph.OriginalMetrics">
            <summary>
            グリフの基準メトリックを取得する。
            ただし、
            Metrics.cellX, cellY, cellZ フィールドは、
            次の文字の原点への移動量として扱われる。
            </summary>
        </member>
        <member name="P:GLSharp.IGlyph.Metrics">
            <summary>
            レイアウトに使用されるメトリックを取得・設定する。
            ただし、
            Metrics.cellX, cellY, cellZ フィールドは、
            次の文字の原点への移動量として扱われる。
            </summary>
        </member>
        <member name="P:GLSharp.IGlyph.BreakLine">
            <summary>
            改行を表す文字かどうかを表すフラグを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.IGlyph.IsControl">
            <summary>
            制御文字かどうかを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.IGlyph.Vertical">
            <summary>
            縦書きかどうかを表すフラグを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.IGlyph.CellHeight">
            <summary>
            グリフのセルの高さを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.IGlyph.IsDisposed">
            <summary>
            このオブジェクトが使用するアンマネージリソースを解放済みかどうかを取得する。
            trueの場合、このオブジェクトは破棄されたものとみなされる。
            </summary>
        </member>
        <member name="F:GLSharp.GlyphBase.character">
            <summary>
            このインスタンスが表す文字
            </summary>
        </member>
        <member name="F:GLSharp.GlyphBase.originalMetrics">
            <summary>
            <para>グリフの基準メトリック</para>
            <para>ただし、
            Metrics.cellX, cellY, cellZ フィールドは、
            次の文字の原点への移動量として扱われる。</para>
            </summary>
        </member>
        <member name="F:GLSharp.GlyphBase.metrics">
            <summary>
            <para>レイアウトに使用されるメトリック</para>
            <para>ただし、
            Metrics.cellX, cellY, cellZ フィールドは、
            次の文字の原点への移動量として扱われる。</para>
            </summary>
        </member>
        <member name="F:GLSharp.GlyphBase.br">
            <summary>
            [readonly] 改行を表す文字かどうかを表すフラグ
            </summary>
        </member>
        <member name="F:GLSharp.GlyphBase.isControl">
            <summary>
            [readonly] 制御文字かどうかのフラグ
            </summary>
        </member>
        <member name="M:GLSharp.GlyphBase.Draw">
            <summary>
            このインスタンスが表す文字を描画する。
            </summary>
        </member>
        <member name="M:GLSharp.GlyphBase.Layout">
            <summary>
            このオブジェクトが持っている子オブジェクトをレイアウトする。
            また、このオブジェクト自身のMetricsプロパティの値も決定される。
            </summary>
        </member>
        <member name="M:GLSharp.GlyphBase.ResetMetrics">
            <summary>
            Metricsプロパティの値を、OriginalMetricsの値にリセットする。
            </summary>
        </member>
        <member name="M:GLSharp.GlyphBase.Clone">
            <summary>
            クローンを作成する。
            </summary>
            <returns>このインスタンスのクローン</returns>
        </member>
        <member name="M:GLSharp.GlyphBase.Dispose">
            <summary>
            文字を描画するディスプレイリストを破棄する。
            </summary>
        </member>
        <member name="P:GLSharp.GlyphBase.Character">
            <summary>
            [get] このインスタンスが表す文字
            </summary>
        </member>
        <member name="P:GLSharp.GlyphBase.OriginalMetrics">
            <summary>
            <para>[get] グリフの基準メトリック</para>
            <para>ただし、
            Metrics.cellX, cellY, cellZ フィールドは、
            次の文字の原点への移動量として扱われる。</para>
            </summary>
        </member>
        <member name="P:GLSharp.GlyphBase.Metrics">
            <summary>
            <para>[get,set] レイアウトに使用されるメトリック。</para>
            <para>ただし、
            Metrics.cellX, cellY, cellZ フィールドは、
            次の文字の原点への移動量として扱われる。</para>
            </summary>
        </member>
        <member name="P:GLSharp.GlyphBase.BreakLine">
            <summary>
            [get] 改行を表す文字かどうか
            </summary>
        </member>
        <member name="P:GLSharp.GlyphBase.IsControl">
            <summary>
            [get] 制御文字かどうか
            </summary>
        </member>
        <member name="P:GLSharp.GlyphBase.Vertical">
            <summary>
            [get] 縦書きかどうか
            </summary>
        </member>
        <member name="P:GLSharp.GlyphBase.CellHeight">
            <summary>
            [get] グリフのセルの高さ
            </summary>
        </member>
        <member name="P:GLSharp.GlyphBase.IsDisposed">
            <summary>
            [get] Dispose()が呼び出されたかどうか
            </summary>
        </member>
        <member name="F:GLSharp.PolygonGlyph.extrusion">
            <summary>
            文字の厚さ
            </summary>
        </member>
        <member name="F:GLSharp.PolygonGlyph.size">
            <summary>
            文字のサイズ
            </summary>
        </member>
        <member name="M:GLSharp.PolygonGlyph.ResetMetrics">
            <summary>
            Metricsプロパティの値を、デフォルトの値にリセットする。
            </summary>
        </member>
        <member name="M:GLSharp.PolygonGlyph.Layout">
            <summary>
            このインスタンスのMetricsプロパティの値がリセットされる（= ResetMetrics()が実行される）だけ。
            </summary>
        </member>
        <member name="P:GLSharp.PolygonGlyph.Extrusion">
            <summary>
            [get,set] 文字の厚み
            </summary>
        </member>
        <member name="P:GLSharp.PolygonGlyph.Size">
            <summary>
            [get,set] 文字のサイズ
            </summary>
        </member>
        <member name="P:GLSharp.PolygonGlyph.CellHeight">
            <summary>
            [get] グリフのセルの高さ
            </summary>
        </member>
        <member name="T:GLSharp.PolygonCharGlyph">
            <summary>
            ポリゴンの文字と、それを描画するディスプレイリストを表す。
            </summary>
        </member>
        <member name="F:GLSharp.PolygonCharGlyph.displayList">
            <summary>
            このインスタンスが表す文字を描画するディスプレイリスト
            </summary>
        </member>
        <member name="F:GLSharp.PolygonCharGlyph.deviation">
            <summary>
            実際のアウトラインフォントとのズレ
            </summary>
        </member>
        <member name="F:GLSharp.PolygonCharGlyph.format">
            <summary>
            文字の描画方法
            </summary>
        </member>
        <member name="M:GLSharp.PolygonCharGlyph.#ctor(System.IntPtr,System.Char,System.Drawing.Font,System.Single,System.Single,System.Single,GLSharp.OutlineFontFormat)">
            <summary>
            wgl.UseFontOutlinesメソッドを使用して、ポリゴンで文字を描画するディスプレイリストを作成する。
            </summary>
            <param name="hDC">描画先のデバイスコンテキストのハンドル</param>
            <param name="character">このインスタンスが表す文字</param>
            <param name="font">文字のフォント</param>
            <param name="size">文字のサイズ</param>
            <param name="deviation">アウトラインフォントとのズレ</param>
            <param name="extrusion">文字の厚み</param>
            <param name="format">POLIGON またはLINE</param>
        </member>
        <member name="M:GLSharp.PolygonCharGlyph.#ctor(System.Char,GLSharp.PolygonGlyphFont,System.IntPtr)">
            <summary>
            wgl.UseFontOutlinesメソッドを使用して、ポリゴンで文字を描画するディスプレイリストを作成する。
            </summary>
            <param name="c">このインスタンスが表す文字</param>
            <param name="glyphFont">フォントなどの指定</param>
            <param name="hDC">デバイスコンテキストのハンドル</param>
        </member>
        <member name="M:GLSharp.PolygonCharGlyph.Initialize(System.IntPtr,System.Char,System.Drawing.Font,System.Single,System.Single,System.Single,GLSharp.OutlineFontFormat)">
            <summary>
            初期化を行う。
            </summary>
        </member>
        <member name="M:GLSharp.PolygonCharGlyph.#ctor(GLSharp.PolygonCharGlyph,System.Single,System.Single)">
            <summary>
            <para>既存のインスタンスを元に、新規インスタンスを作成する。
            グリフを描画するディスプレイリストは、既存のインスタンスから参照がコピーされる。</para>
            <para>破棄済みのインスタンスが渡された場合、例外が発生する。</para>
            </summary>
            <param name="pg">元となるインスタンス</param>
            <param name="size">文字のサイズ</param>
            <param name="extrusion">文字の厚み</param>
        </member>
        <member name="M:GLSharp.PolygonCharGlyph.Draw">
            <summary>
            このインスタンスが表す文字を描画する。
            </summary>
        </member>
        <member name="M:GLSharp.PolygonCharGlyph.Clone">
            <summary>
            クローンを作成する。
            </summary>
            <returns></returns>
        </member>
        <member name="M:GLSharp.PolygonCharGlyph.Dispose">
            <summary>
            文字を描画するディスプレイリストを破棄します。
            </summary>
        </member>
        <member name="P:GLSharp.PolygonCharGlyph.DisplayList">
            <summary>
            [get]このインスタンスが表す文字を描画するディスプレイリスト
            </summary>
        </member>
        <member name="P:GLSharp.PolygonCharGlyph.Deviation">
            <summary>
            [get,set] 実際のアウトラインフォントとのズレ
            </summary>
        </member>
        <member name="P:GLSharp.PolygonCharGlyph.Format">
            <summary>
            [get] 文字の描画方法
            </summary>
        </member>
        <member name="T:GLSharp.PolygonControlGlyph`1">
            <summary>
            描画される際に任意の制御を実行する制御文字
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:GLSharp.PolygonColorMaterialChar">
            <summary>
            glColorMaterialでマテリアルの変更を行う制御文字
            </summary>
            <remarks>
            <para>
            まず、PolygonColorMaterialChar.BeginChar でカラーマテリアルモードを開始して、
            それから PolygonColorMaterialChar でマテリアルの変更を行う。
            PolygonColorMaterialChar.EndChar でカラーマテリアルモードを終了する。
            </para>
            </remarks>
        </member>
        <member name="M:GLSharp.PolygonColorMaterialChar.Draw">
            <summary>
            glColor( color ) を呼び出す。
            </summary>
        </member>
        <member name="T:GLSharp.PolygonColorMaterialChar.BeginChar">
            <summary>
            カラーマテリアルモードを有効にする制御文字
            </summary>
        </member>
        <member name="T:GLSharp.PolygonColorMaterialChar.EndChar">
            <summary>
            カラーマテリアルモードを無効にする制御文字
            </summary>
        </member>
        <member name="T:GLSharp.PolygonMaterialChar">
            <summary>
            マテリアルを設定する制御文字
            </summary>
        </member>
        <member name="F:GLSharp.PolygonMaterialChar.material">
            <summary>
            マテリアル
            </summary>
        </member>
        <member name="F:GLSharp.PolygonMaterialChar.mode">
            <summary>
            マテリアルの設定方法
            </summary>
        </member>
        <member name="T:GLSharp.PolygonMaterialChar.Mode">
            <summary>
            
            </summary>
        </member>
        <member name="F:GLSharp.PolygonMaterialChar.Mode.MaterialAndTexture">
            <summary>
            マテリアルとテクスチャを設定する。 (material.Apply( true ) を呼び出す。)
            </summary>
        </member>
        <member name="F:GLSharp.PolygonMaterialChar.Mode.MaterialOnly">
            <summary>
            マテリアルのみを設定する。 (material.Applu( false ) を呼び出す。)
            </summary>
        </member>
        <member name="F:GLSharp.PolygonMaterialChar.Mode.TextureOnly">
            <summary>
            テクスチャを設定する。 (material.BindTexture() を呼び出す。)
            </summary>
        </member>
        <member name="F:GLSharp.PolygonMaterialChar.Mode.MaterialParams">
            <summary>
            各マテリアルのパラメータを設定する。 (material.ApplyMaterialParams() を呼び出す。)
            </summary>
        </member>
        <member name="F:GLSharp.PolygonMaterialChar.Mode.Color">
            <summary>
            色のみを設定する。 (material.ApplyColor() を呼び出す。)
            </summary>
        </member>
        <member name="T:GLSharp.PolygonGlyphFont">
            <summary>
            ポリゴンで描画されるグリフの情報を格納する。
            </summary>
        </member>
        <member name="T:GLSharp.IGlyphFont">
            <summary>
            グリフのフォント情報
            </summary>
        </member>
        <member name="F:GLSharp.PolygonGlyphFont.font">
            <summary>
            フォント
            </summary>
        </member>
        <member name="F:GLSharp.PolygonGlyphFont.size">
            <summary>
            グリフのサイズ
            </summary>
        </member>
        <member name="F:GLSharp.PolygonGlyphFont.deviation">
            <summary>
            実際のアウトラインフォントのグリフとのズレ
            </summary>
        </member>
        <member name="F:GLSharp.PolygonGlyphFont.extrusion">
            <summary>
            文字の厚さ
            </summary>
        </member>
        <member name="F:GLSharp.PolygonGlyphFont.format">
            <summary>
            グリフの形状を指定するフォーマット
            </summary>
        </member>
        <member name="M:GLSharp.PolygonGlyphFont.#ctor(System.Drawing.Font,System.Single,System.Single,System.Single,GLSharp.OutlineFontFormat)">
            <summary>
            フォントの情報を元にOutlineFontInfoクラスのインスタンスを初期化する。
            </summary>
            <param name="font">フォント</param>
            <param name="size">文字サイズ</param>
            <param name="deviation">実際のアウトラインフォントのグリフとのズレ</param>
            <param name="extrusion">文字の厚さ</param>
            <param name="format">フォーマット</param>
        </member>
        <member name="M:GLSharp.PolygonGlyphFont.ToString">
            <summary>
            このインスタンスを表す文字列を取得する。
            </summary>
            <returns>"FontName, FontStyle, VerticalFont"</returns>
        </member>
        <member name="T:GLSharp.PolygonGlyphDictionary">
             <summary>
             <para>アウトラインフォントを描画するディスプレイリストの作成を制御し、
             作成したディスプレイリストを管理する。
             同一グリフのディスプレイリストの多重作成を避けることができる。</para>
             <para>内部でディスプレイリストを使用するので、
            レンダリングコンテキストによって使い分けること。 </para>
             </summary>
        </member>
        <member name="M:GLSharp.GlyphDictionary`2.CountGlyph">
            <summary>
            保持しているグリフの総数を取得する。
            </summary>
            <returns>保持しているグリフの総数</returns>
        </member>
        <member name="M:GLSharp.GlyphDictionary`2.CreateGlyph(System.Char,`1,System.IntPtr)">
            <summary>
            <para>グリフを作成する。</para>
            <para>作成されたグリフは、引数の"c"と"fontInfo"をキーとして内部コレクションに格納される。</para>
            </summary>
            <param name="c">文字</param>
            <param name="glyphFont">フォントなどの指定</param>
            <param name="hDC">デバイスコンテキストのハンドル</param>
            <returns>新規に作成されたグリフ</returns>
        </member>
        <member name="M:GLSharp.GlyphDictionary`2.DrawText(System.String,`1)">
            <summary>
            簡易的なテキスト描画を行う。
            </summary>
            <param name="text">テキスト</param>
            <param name="glyphFont">フォントなどの指定</param>
            <returns>描画された文字列の最後の行の幅。</returns>
        </member>
        <member name="M:GLSharp.GlyphDictionary`2.GetGlyph(`1,System.Char)">
            <summary>
            <para>指定されたグリフを内部コレクションから取得する。</para>
            <para>内部コレクションに無い場合は、新規に作成し内部コレクションに追加される。</para>
            </summary>
            <param name="glyphFont">フォントなどの指定</param>
            <param name="c">文字</param>
            <returns>指定されたグリフ。
            内部コレクションに格納されているインスタンスが返されるので、
            むやみに変更しないこと。</returns>
        </member>
        <member name="M:GLSharp.GlyphDictionary`2.AddToGlyphDictionary(`1,System.String)">
            <summary>
            指定した文字列を描画するのに必要なディスプレイリストを、Dictionary内に追加する。
            </summary>
            <param name="glyphFont">フォントなどの指定</param>
            <param name="text">テキスト</param>
        </member>
        <member name="M:GLSharp.GlyphDictionary`2.AddToGlyphDictionary(`1,System.UInt16,System.UInt16)">
            <summary>
            引数startCharから引数lengthの範囲の文字コードの文字を描画するのに必要なディスプレイリストを、Dictionary内に追加する。
            </summary>
            <param name="glyphFont">フォントなどの指定</param>
            <param name="startChar">ディスプレイリストの作成を開始する最初の文字または文字コード</param>
            <param name="length">ディスプレイリストを作成する文字の範囲</param>
        </member>
        <member name="M:GLSharp.GlyphDictionary`2.Dispose">
            <summary>
            このオブジェクトが保持しているグリフをすべて破棄します。
            </summary>
        </member>
        <member name="P:GLSharp.GlyphDictionary`2.HDC">
            <summary>
            グリフを作成するデバイスコンテキストのハンドルを取得・設定する。
            </summary>
        </member>
        <member name="P:GLSharp.GlyphDictionary`2.Item(`1,System.Char)">
            <summary>
            指定したフォント・文字のグリフを取得する
            </summary>
            <param name="c">文字</param>
            <param name="glyphFont">フォントなどの指定</param>
            <returns>指定したフォント・文字のグリフ</returns>
            <remarks>
            <para>オーバーライドされない場合は、内部コレクションから取得したグリフのクローンが返される。</para>
            <para>オーバーライドする場合も、内部コレクションから取得したグリフを直接返すべきではない。</para>
            </remarks>
        </member>
        <member name="F:GLSharp.PolygonGlyphDictionary.size">
            <summary>
            (readonly) 文字の基準サイズ。常に1.0f。
            </summary>
        </member>
        <member name="F:GLSharp.PolygonGlyphDictionary.format">
            <summary>
            (readonly) 文字列がポリゴンで描画されるか、またはアウトラインのみで描画されるかの指定。
            </summary>
        </member>
        <member name="M:GLSharp.PolygonGlyphDictionary.#ctor(System.IntPtr,GLSharp.OutlineFontFormat)">
            <summary>
            コンストラクタ。
            </summary>
            <param name="hDC">描画先のデバイスコンテキストのハンドル。RenderingContext.DCなどを渡せばよい。</param>
            <param name="deviation">実際のアウトラインフォントとのズレ</param>
            <param name="format">文字の描画方法</param>
        </member>
        <member name="M:GLSharp.PolygonGlyphDictionary.DrawText(System.String,GLSharp.PolygonGlyphFont)">
            <summary>
            簡易的なテキスト描画を行う。
            </summary>
            <param name="text">テキスト</param>
            <param name="glyphFont">フォントなどの指定</param>
            <returns>描画された文字列の最後の行の幅。</returns>
        </member>
        <member name="P:GLSharp.PolygonGlyphDictionary.Item(GLSharp.PolygonGlyphFont,System.Char)">
            <summary>
            指定したフォント・文字のグリフを取得する
            </summary>
            <param name="c">文字</param>
            <param name="glyphFont">フォントなどの指定</param>
            <returns>指定したフォント・文字のグリフ</returns>
        </member>
        <member name="T:GLSharp.IRenderingParams">
            <summary>
            描画方法を指定するパラメータを表す。
            </summary>
        </member>
        <member name="T:GLSharp.EmptyRenderingParams">
            <summary>
            データのない描画パラメータ。
            </summary>
        </member>
        <member name="T:GLSharp.Capture">
            <summary>
            バッファの内容をキャプチャするためのクラス。
            </summary>
        </member>
        <member name="M:GLSharp.Capture.CaptureBufferAsBitmapRGBA(OpenTK.Graphics.OpenGL.ReadBufferMode,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            バッファの内容をキャプチャする(RGBA)。
            </summary>
            <param name="target">キャプチャするバッファを指定する</param>
            <param name="x">キャプチャする領域の左下隅のx座標</param>
            <param name="y">キャプチャする領域の左下隅のy座標</param>
            <param name="width">キャプチャする領域の幅</param>
            <param name="height">キャプチャする領域の高さ</param>
            <param name="disableAlpha">
            アルファ値を無効にするかどうかを指定する。
            trueにした場合、キャプチャした画像のアルファ値はすべて1になる。
            </param>
            <returns>キャプチャした画像</returns>
        </member>
        <member name="M:GLSharp.PixelFormatDescriptor.ToString">
            <summary>
            このインスタンスを表す文字列を取得する。
            </summary>
            <returns>このインスタンスを表す文字列</returns>
        </member>
        <member name="M:GLSharp.PixelFormatDescriptor.ToString(System.Boolean)">
            <summary>
            このインスタンスを表す文字列を取得する。
            </summary>
            <param name="breakLine">文字列に改行を含める場合はtrue、そうでなければfalse。</param>
            <returns>このインスタンスを表す文字列</returns>
        </member>
        <member name="T:GLSharp.PFDTypeConverter">
            <summary>
            (PixelFormatAttributesをデザイナのプロパティブラウザで使用できるようにするためのクラス)
            </summary>
        </member>
        <member name="T:GLSharp.PfdPixelFormat">
            <summary>
            Pixel format flags for PixelFormatDescripter.PixelFormat
            </summary>
        </member>
        <member name="T:GLSharp.PfdPixelType">
            <summary>
            Pixel type flags for PixelFormatDescripter.PixelType
            </summary>
        </member>
        <member name="T:GLSharp.PfdLayerType">
            <summary>
            Layer Type flags for PixelFormatDescripter.LayerType
            </summary>
        </member>
        <member name="T:GLSharp.LayerPlaneDescriptor">
            <summary>
            Describes the pixel format of a drawing surface.
            </summary>
        </member>
        <member name="F:GLSharp.GlyphMetricsFloat.blackBoxX">
            <summary>
            グリフを完全に囲む最小の矩形の幅。
            </summary>
        </member>
        <member name="F:GLSharp.GlyphMetricsFloat.blackBoxY">
            <summary>
            グリフを完全に囲む最小の矩形の高さ。
            </summary>
        </member>
        <member name="F:GLSharp.GlyphMetricsFloat.glyphOrigin">
            <summary>
            グリフを完全に囲む最小の矩形の左上角の座標。
            </summary>
        </member>
        <member name="F:GLSharp.GlyphMetricsFloat.cellIncX">
            <summary>
            現在の文字セルの原点から次の文字セルの原点までの垂直距離。
            </summary>
        </member>
        <member name="F:GLSharp.GlyphMetricsFloat.cellIncY">
            <summary>
            現在の文字セルの原点から次の文字セルの原点までの水平距離。
            </summary>
        </member>
        <member name="F:GLSharp.win32.SND_SYNC">
            <summary>
                Synchronous playback of a sound event.  <b>PlaySound</b> returns after the sound
                event completes.
            </summary>
        </member>
        <member name="F:GLSharp.win32.SND_ASYNC">
            <summary>
                The sound is played asynchronously and <b>PlaySound</b> returns immediately after
                beginning the sound.  To terminate an asynchronously played waveform sound, call
                <b>PlaySound</b> with <i>sound</i> set to NULL.
            </summary>
        </member>
        <member name="F:GLSharp.win32.SND_NODEFAULT">
            <summary>
                No default sound event is used.  If the sound cannot be found, <b>PlaySound</b>
                returns silently without playing the default sound.
            </summary>
        </member>
        <member name="F:GLSharp.win32.SND_MEMORY">
            <summary>
                A sound event's file is loaded in RAM.  The parameter specified by <i>sound</i>
                must point to an image of a sound in memory.
            </summary>
        </member>
        <member name="F:GLSharp.win32.SND_LOOP">
            <summary>
                The sound plays repeatedly until <b>PlaySound</b> is called again with the
                <i>sound</i> parameter set to NULL.  You must also specify the
                <see cref="F:GLSharp.win32.SND_ASYNC"/> flag to indicate an asynchronous sound event.
            </summary>
        </member>
        <member name="F:GLSharp.win32.SND_NOSTOP">
            <summary>
                <para>
                    The specified sound event will yield to another sound event that is already
                    playing.  If a sound cannot be played because the resource needed to
                    generate that sound is busy playing another sound, the function immediately
                    returns FALSE without playing the requested sound.
                </para>
                <para>
                    If this flag is not specified, <b>PlaySound</b> attempts to stop the currently
                    playing sound so that the device can be used to play the new sound.
                </para>
            </summary>
        </member>
        <member name="F:GLSharp.win32.SND_NOWAIT">
            <summary>
                If the driver is busy, return immediately without playing the sound.
            </summary>
        </member>
        <member name="F:GLSharp.win32.SND_ALIAS">
            <summary>
                The <i>sound</i> parameter is a system-event alias in the registry or the WIN.INI
                file.  Do not use with either <see cref="F:GLSharp.win32.SND_FILENAME"/> or
                <see cref="F:GLSharp.win32.SND_RESOURCE"/>.
            </summary>
        </member>
        <member name="F:GLSharp.win32.SND_ALIAS_ID">
            <summary>
                The <i>sound</i> parameter is a predefined sound identifier.
            </summary>
        </member>
        <member name="F:GLSharp.win32.SND_FILENAME">
            <summary>
                The <i>sound</i> parameter is a filename.
            </summary>
        </member>
        <member name="F:GLSharp.win32.SND_RESOURCE">
            <summary>
                The <i>sound</i> parameter is a resource identifier; <i>mod</i> must identify the
                instance that contains the resource.
            </summary>
        </member>
        <member name="F:GLSharp.win32.SND_PURGE">
            <summary>
                <para>
                    Sounds are to be stopped for the calling task.  If <i>sound</i> is not
                    NULL, all instances of the specified sound are stopped.  If <i>sound</i> is
                    NULL, all sounds that are playing on behalf of the calling task are stopped.
                </para>
                <para>
                    You must also specify the instance handle to stop <see cref="F:GLSharp.win32.SND_RESOURCE"/>
                    events.
                </para>
            </summary>
        </member>
        <member name="F:GLSharp.win32.SND_APPLICATION">
            <summary>
                The sound is played using an application-specific association.
            </summary>
        </member>
        <member name="F:GLSharp.win32.JOY_BUTTON1">
            <summary>
                First joystick button is pressed.
            </summary>
        </member>
        <member name="F:GLSharp.win32.JOY_BUTTON2">
            <summary>
                Second joystick button is pressed.
            </summary>
        </member>
        <member name="F:GLSharp.win32.JOY_BUTTON3">
            <summary>
                Third joystick button is pressed.
            </summary>
        </member>
        <member name="F:GLSharp.win32.JOY_BUTTON4">
            <summary>
                Four joystick button is pressed.
            </summary>
        </member>
        <member name="F:GLSharp.win32.JOY_BUTTON1CHG">
            <summary>
            First joystick button state is changed.
            </summary>
        </member>
        <member name="F:GLSharp.win32.JOY_BUTTON2CHG">
            <summary>
            Second joystick button state is changed.
            </summary>
        </member>
        <member name="F:GLSharp.win32.JOY_BUTTON3CHG">
            <summary>
            Third joystick button state is changed.
            </summary>
        </member>
        <member name="F:GLSharp.win32.JOY_BUTTON4CHG">
            <summary>
            Four joystick button state is changed.
            </summary>
        </member>
        <member name="F:GLSharp.win32.JOYCAPS_HASZ">
            <summary>
                Joystick has z-coordinate information.
            </summary>
        </member>
        <member name="F:GLSharp.win32.JOYCAPS_HASR">
            <summary>
                Joystick has rudder (fourth axis) information.
            </summary>
        </member>
        <member name="F:GLSharp.win32.JOYCAPS_HASU">
            <summary>
                Joystick has u-coordinate (fifth axis) information.
            </summary>
        </member>
        <member name="F:GLSharp.win32.JOYCAPS_HASV">
            <summary>
                Joystick has v-coordinate (sixth axis) information.
            </summary>
        </member>
        <member name="F:GLSharp.win32.JOYCAPS_HASPOV">
            <summary>
                Joystick has point-of-view information.
            </summary>
        </member>
        <member name="F:GLSharp.win32.JOYCAPS_POV4DIR">
            <summary>
                Joystick point-of-view supports discrete values (centered, forward, backward, left, and right).
            </summary>
        </member>
        <member name="F:GLSharp.win32.JOYCAPS_POVCTS">
            <summary>
                Joystick point-of-view supports continuous degree bearings.
            </summary>
        </member>
        <member name="F:GLSharp.win32.JOY_RETURNX">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JOY_RETURNY">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JOY_RETURNZ">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JOY_RETURNR">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JOY_RETURNU">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JOY_RETURNV">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JOY_RETURNPOV">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JOY_RETURNBUTTONS">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JOY_RETURNRAWDATA">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JOY_RETURNPOVCTS">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JOY_RETURNCENTERED">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JOY_USEDEADZONE">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JOY_RETURNALL">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JOY_CAL_READALWAYS">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JOY_CAL_READXYONLY">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JOY_CAL_READ3">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JOY_CAL_READ4">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JOY_CAL_READXONLY">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JOY_CAL_READYONLY">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JOY_CAL_READ5">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JOY_CAL_READ6">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JOY_CAL_READZONLY">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JOY_CAL_READRONLY">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JOY_CAL_READUONLY">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JOY_CAL_READVONLY">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JOY_POVCENTERED">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JOY_POVFORWARD">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JOY_POVRIGHT">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JOY_POVBACKWARD">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JOY_POVLEFT">
            <summary></summary>
        </member>
        <member name="M:GLSharp.win32.GetDC(System.IntPtr)">
            <summary>
            return device context of the window
            </summary>
            <param name="hwnd">Handle to window</param>
            <returns>Handle to device context of the window</returns>
        </member>
        <member name="M:GLSharp.win32.ChoosePixelFormat(System.IntPtr,GLSharp.PixelFormatDescriptor)">
            <summary>
            (gdi) Retrieves an index for a pixel format closest to what is passed
            </summary>
            <param name="hdc">Device context</param>
            <param name="p_pfd">Pixel Format Descriptor struct</param>
            <returns></returns>
        </member>
        <member name="M:GLSharp.win32.SetPixelFormat(System.IntPtr,System.Int32,GLSharp.PixelFormatDescriptor)">
            <summary>
            (gdi) Sets the pixel format for the device context to the format specified by the index
            </summary>
            <param name="hdc">Device Context</param>
            <param name="iPixelFormat">Index to a pixel format returned ChoosePixelFormat</param>
            <param name="p_pfd">Pixel Format Descriptor</param>
            <returns></returns>
        </member>
        <member name="M:GLSharp.win32.DescribePixelFormat(System.IntPtr,System.Int32,System.Int32,GLSharp.PixelFormatDescriptor)">
            <summary>
            (gdi)
            </summary>
            <param name="deviceContext"></param>
            <param name="pixel"></param>
            <param name="pfdSize"></param>
            <param name="pixelFormat"></param>
            <returns></returns>
        </member>
        <member name="M:GLSharp.win32.DeleteObject(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="objectHandle"></param>
        </member>
        <member name="M:GLSharp.win32.GetGlyphMetrics(System.IntPtr,System.Char,System.Drawing.Font,GLSharp.MAT2@,GLSharp.Glyphmetrics@)">
            <summary>
            GetGlyphOutlineを使用して、グリフのメトリックのみを取得する。
            </summary>
            <param name="hDC">デバイスコンテキストのハンドル</param>
            <param name="c">グリフのメトリクスを取得する文字</param>
            <param name="font">フォント</param>
            <param name="matrix">グリフの回転を表す行列</param>
            <param name="gm">グリフのメトリック</param>
        </member>
        <member name="M:GLSharp.win32.GetGlyphImage(System.IntPtr,System.Char,System.Drawing.Font,GLSharp.AntiAliasFormat,GLSharp.MAT2,GLSharp.Metrics@,System.Drawing.Size@)">
            <summary>
            GetGlyphOutlineを使用して、グリフのイメージを取得する。
            </summary>
            <param name="hDC">デバイスコンテキストのハンドル</param>
            <param name="character">グリフを取得する文字</param>
            <param name="font">フォント</param>
            <param name="format">フォーマット</param>
            <param name="matrix">グリフの回転を表す行列</param>
            <param name="metrics">グリフのメトリック</param>
            <param name="imageSize">戻り値のグリフイメージのサイズ[pixel]</param>
            <returns>グリフイメージ</returns>
        </member>
        <member name="F:GLSharp.win32.MMSYSERR_BASE">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.MMSYSERR_NOERROR">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.MMSYSERR_ERROR">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.MMSYSERR_BADDEVICEID">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.MMSYSERR_NOTENABLED">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.MMSYSERR_ALLOCATED">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.MMSYSERR_INVALHANDLE">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.MMSYSERR_NODRIVER">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.MMSYSERR_NOMEM">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.MMSYSERR_NOTSUPPORTED">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.MMSYSERR_BADERRNUM">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.MMSYSERR_INVALFLAG">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.MMSYSERR_INVALPARAM">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.MMSYSERR_LASTERROR">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JOYERR_NOERROR">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JOYERR_PARMS">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JOYERR_NOCANDO">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JOYERR_UNPLUGGED">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JOYSTICKID1">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JOYSTICKID2">
            <summary></summary>
        </member>
        <member name="M:GLSharp.win32.PlaySound(System.String,System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
            <param name="sound"></param>
            <param name="mod"></param>
            <param name="soundFlags"></param>
            <returns></returns>
        </member>
        <member name="M:GLSharp.win32.JoyConfigChanged(System.Int64)">
            <summary>
                The joyConfigChanged function informs the joystick driver
                that the configuration has changed and should be reloaded from the registry.
            </summary>
            <param name="dwFlags">
                Reserved for future use. Must equal zero.
            </param>
            <returns>
                Returns JOYERR_NOERROR if successful. Returns JOYERR_PARMS if the parameter is non-zero.
            </returns>
            <remarks>
                <para>
                    This function causes a window message to be sent to all top-level windows.
                    This message may be defined by applications
                    that need to respond to changes in joystick calibration
                    by using RegisterWindowMessage with the following message ID:
                </para>
                <code>
                    #define JOY_CONFIGCHANGED_MSGSTRING     "MSJSTICK_VJOYD_MSGSTR"
                </code>
            </remarks>
        </member>
        <member name="M:GLSharp.win32.JoyGetDevCaps(System.UInt32,GLSharp.JoyCaps@,System.Int32)">
            <summary>
                The joyGetDevCaps function queries a joystick to determine its capabilities.
            </summary>
            <param name="joyID">
                Identifier of the joystick to be queried. Valid values for uJoyID range from -1 to 15.
                A value of -1 enables retrieval of the szRegKey member of the JOYCAPS structure
                whether a device is present or not.
                For Windows NT 4.0, valid values are limited to zero (JOYSTICKID1) and JOYSTICKID2.
            </param>
            <param name="caps">
                Pointer to a <see cref="!:JOYCAPS"/> structure to contain the capabilities of the joystick.
            </param>
            <param name="joyCapsSize"> 
                Size, in bytes, of the JOYCAPS structure.
            </param>
            <returns>
                <para>
                    Returns JOYERR_NOERROR if successful or one of the following error values:
                </para>
                <para>
                    <see cref="F:GLSharp.win32.MMSYSERR_NODRIVER"/> - The joystick driver is not present. Windows NT/2000/XP: The specified joystick identifier is invalid.
                    <see cref="F:GLSharp.win32.MMSYSERR_INVALPARAM"/> - An invalid parameter was passed. Windows 95/98/Me: The specified joystick identifier is invalid.
                </para>
            </returns>
            <remarks>
                <para>
                    Use the <see cref="!:joyGetNumDevs"/> function to determine the number of joystick devices supported by the driver.
                </para>
                <para>
                    Windows NT/2000/XP: This method fails when passed an invalid value for the cbjc parameter.
                    Windows 95/98/Me: This method succeeds when passed an invalid value for the cbjc parameter.
                </para>
            </remarks>
            <seealso cref="!:JOYCAPS"/>
            <seealso cref="!:joyGetNumDevs"/>
        </member>
        <member name="M:GLSharp.win32.JoyGetNumDevs">
            <summary>
                The joyGetNumDevs function queries the joystick driver for the number of joysticks it supports.
            </summary>
            <returns>
                The joyGetNumDevs function returns the number of joysticks supported by the current driver or zero if no driver is installed.
            </returns>
            <remarks>
                <para>
                    Use the <see cref="!:joyGetPos"/> function to determine whether a given joystick is physically attached to the system. If the specified joystick is not connected, joyGetPos returns a <see cref="F:GLSharp.win32.JOYERR_UNPLUGGED"/> error value.
                </para>
            </remarks>
        </member>
        <member name="M:GLSharp.win32.JoyGetPos(System.UInt32,GLSharp.JoyInfo@)">
            <summary>
                The joyGetPos function queries a joystick for its position and button status.
            </summary>
            <param name="joyID">
                Identifier of the joystick to be queried. Valid values for uJoyID range from zero (<see cref="F:GLSharp.win32.JOYSTICKID1"/>) to 15, except for Windows NT 4.0. For Windows NT 4.0, valid values are limited to <see cref="F:GLSharp.win32.JOYSTICKID1"/> and <see cref="F:GLSharp.win32.JOYSTICKID2"/>.
            </param>
            <param name="ji">
                Pointer to a <see cref="!:JOYINFO"/> structure that contains the position and button status of the joystick.
            </param>
            <returns>
                Returns <see cref="F:GLSharp.win32.JOYERR_NOERROR"/> if successful or one of the following error values.
                <para>
                    <see cref="F:GLSharp.win32.MMSYSERR_NODRIVER"/> - The joystick driver is not present.
                    <see cref="F:GLSharp.win32.MMSYSERR_INVALPARAM"/> - An invalid parameter was passed.
                    <see cref="F:GLSharp.win32.JOYERR_UNPLUGGED"/> - The specified joystick is not connected to the system.
                </para>
            </returns>
            <remarks>
                For devices that have four to six axes of movement, a point-of-view control, or more than four buttons, use the <see cref="!:joyGetPosEx"/> function.
            </remarks>
        </member>
        <member name="M:GLSharp.win32.JoyGetPosEx(System.UInt32,GLSharp.JoyInfoEx@)">
            <summary>
                The joyGetPosEx function queries a joystick for its position and button status.
            </summary>
            <param name="joyID">
                Identifier of the joystick to be queried. Valid values for uJoyID range from zero (<see cref="F:GLSharp.win32.JOYSTICKID1"/>) to 15, except for Windows NT 4.0. For Windows NT 4.0, valid values are limited to <see cref="F:GLSharp.win32.JOYSTICKID1"/> and <see cref="F:GLSharp.win32.JOYSTICKID2"/>.
            </param>
            <param name="ji">
                Pointer to a <see cref="!:JOYINFOEX"/> structure that contains extended position information and button status of the joystick. You must set the dwSize and dwFlags members or joyGetPosEx will fail. The information returned from joyGetPosEx depends on the flags you specify in dwFlags.
            </param>
            <returns>
                Returns JOYERR_NOERROR if successful or one of the following error values.
                <para>
                    Returns JOYERR_NOERROR if successful or one of the following error values.
                </para>
                <para>
                    <see cref="F:GLSharp.win32.MMSYSERR_NODRIVER"/> - The joystick driver is not present.
                    <see cref="F:GLSharp.win32.MMSYSERR_INVALPARAM"/> - An invalid parameter was passed. Windows 95/98/Me: The specified joystick identifier is invalid.
                    <see cref="F:GLSharp.win32.MMSYSERR_BADDEVICEID"/> - Windows 95/98/Me: The specified joystick identifier is invalid.
                    <see cref="F:GLSharp.win32.JOYERR_UNPLUGGED"/> - The specified joystick is not connected to the system.
                    <see cref="F:GLSharp.win32.JOYERR_PARMS"/> - Windows NT/2000/XP: The specified joystick identifier is invalid.
                </para>
            </returns>
            <remarks>
                This function provides access to extended devices such as rudder pedals, point-of-view hats, devices with a large number of buttons, and coordinate systems using up to six axes. For joystick devices that use three axes or fewer and have fewer than four buttons, use the joyGetPos function.
            </remarks>
        </member>
        <member name="M:GLSharp.win32.JoyGetThreshold(System.UInt32,System.UInt32@)">
            <summary>
                The joyGetThreshold function queries a joystick for its current movement threshold.
            </summary>
            <param name="joyID">
                Identifier of the joystick. Valid values for uJoyID range from zero (<see cref="F:GLSharp.win32.JOYSTICKID1"/>) to 15, except for Windows NT 4.0. For Windows NT 4.0, valid values are limited to <see cref="F:GLSharp.win32.JOYSTICKID1"/> and <see cref="F:GLSharp.win32.JOYSTICKID2"/>.
            </param>
            <param name="threshold">
                Pointer to a variable that contains the movement threshold value.
            </param>
            <returns>
                <para>
                    Returns JOYERR_NOERROR if successful or one of the following error values.
                </para>
                <para>
                    <see cref="F:GLSharp.win32.MMSYSERR_NODRIVER"/> - The joystick driver is not present.
                    <see cref="F:GLSharp.win32.MMSYSERR_INVALPARAM"/> - An invalid parameter was passed.
                </para>
            </returns>
            <remarks>
                The movement threshold is the distance the joystick must be moved before a joystick position-change message (<see cref="!:MM_JOY1MOVE"/>, <see cref="!:MM_JOY1ZMOVE"/>, <see cref="!:MM_JOY2MOVE"/>, or <see cref="!:MM_JOY2ZMOVE"/>) is sent to a window that has captured the device. The threshold is initially zero.
            </remarks>
        </member>
        <member name="M:GLSharp.win32.JoyReleaseCapture(System.UInt32)">
            <summary>
                The joyReleaseCapture function releases the specified captured joystick.
            </summary>
            <param name="yoyID">
                Identifier of the joystick. Valid values for uJoyID range from zero (<see cref="F:GLSharp.win32.JOYSTICKID1"/>) to 15, except for Windows NT 4.0. For Windows NT 4.0, valid values are limited to <see cref="F:GLSharp.win32.JOYSTICKID1"/> and <see cref="F:GLSharp.win32.JOYSTICKID2"/>.
            </param>
            <returns>
                <para>
                    Returns <see cref="F:GLSharp.win32.JOYERR_NOERROR"/> if successful or one of the following error values.
                </para>
                <para>
                    <see cref="F:GLSharp.win32.MMSYSERR_NODRIVER"/> - The joystick driver is not present.
                    <see cref="F:GLSharp.win32.MMSYSERR_INVALPARAM"/> - Windows 95/98/Me: The specified joystick device identifier uJoyID is invalid. Windows NT/2000/XP: The specified joystick identifier is valid, but the joystick has not been captured.
                    <see cref="F:GLSharp.win32.JOYERR_PARMS"/> - Windows NT/2000/XP: The specified joystick device identifier uJoyID is invalid.
                </para>
            </returns>
            <remarks>
                Windows 95/98/Me: This method returns JOYERR_NOERROR when passed a valid joystick identifier that has not been captured.
            </remarks>
        </member>
        <member name="M:GLSharp.win32.JoySetCapture(System.IntPtr,System.UInt32,System.Int32,System.Boolean)">
            <summary>
                The joySetCature function captures a joystick by causing its messages to be sent to the specified window.
            </summary>
            <param name="hwnd">
                Handle to the window to receive the joystick messages.
            </param>
            <param name="joyID">
                Identifier of the joystick. Valid values for uJoyID range from zero (<see cref="F:GLSharp.win32.JOYSTICKID1"/>) to 15, except for Windows NT 4.0. For Windows NT 4.0, valid values are limited to <see cref="F:GLSharp.win32.JOYSTICKID1"/> and <see cref="F:GLSharp.win32.JOYSTICKID2"/>.
            </param>
            <param name="period">
                Polling frequency, in milliseconds.
            </param>
            <param name="changed">
                Change position flag. Specify TRUE for this parameter to send messages only when the position changes by a value greater than the joystick movement threshold. Otherwise, messages are sent at the polling frequency specified in uPeriod.
            </param>
            <returns>
                <para>
                    Returns JOYERR_NOERROR if successful or one of the following error values.
                </para>
                <para>
                    <see cref="F:GLSharp.win32.MMSYSERR_NODRIVER"/> - The joystick driver is not present.
                    <see cref="F:GLSharp.win32.MMSYSERR_INVALPARAM"/> - Windows 95/98/Me: Invalid joystick ID or hwnd is NULL.
                    <see cref="F:GLSharp.win32.JOYERR_NOCANDO"/> - Cannot capture joystick input because a required service (such as a Windows timer) is unavailable.
                    <see cref="F:GLSharp.win32.JOYERR_UNPLUGGED"/> - The specified joystick is not connected to the system.
                    <see cref="F:GLSharp.win32.JOYERR_PARMS"/> - Windows NT/2000/XP: Invalid joystick ID or hwnd is NULL.
                </para>
            </returns>
            <remarks>
                This function fails if the specified joystick is currently captured. Call the joyReleaseCapture function to release the captured joystick, or destroy the window to release the joystick automatically.
            </remarks>
        </member>
        <member name="M:GLSharp.win32.JoySetThreshold(System.UInt32,System.UInt32)">
            <summary>
                The joySetThreshold function sets the movement threshold of a joystick.
            </summary>
            <param name="joyID">
                Identifier of the joystick. Valid values for uJoyID range from zero (<see cref="F:GLSharp.win32.JOYSTICKID1"/>) to 15, except for Windows NT 4.0. For Windows NT 4.0, valid values are limited to <see cref="F:GLSharp.win32.JOYSTICKID1"/> and <see cref="F:GLSharp.win32.JOYSTICKID2"/>.
            </param>
            <param name="threshold">
                New movement threshold.
            </param>
            <returns>
                <para>
                    Returns JOYERR_NOERROR if successful or one of the following error values.
                </para>
                <para>
                    <see cref="F:GLSharp.win32.MMSYSERR_NODRIVER"/> - The joystick driver is not present.
                    <see cref="F:GLSharp.win32.JOYERR_PARMS"/> - The specified joystick device identifier uJoyID is invalid.
                </para>
            </returns>
            <remarks>
                The movement threshold is the distance the joystick must be moved before a joystick position-change message (<see cref="!:MM_JOY1MOVE"/>, <see cref="!:MM_JOY1ZMOVE"/>, <see cref="!:MM_JOY2MOVE"/>, or <see cref="!:MM_JOY2ZMOVE"/>) is sent to a window that has captured the device. The threshold is initially zero.
            </remarks>
        </member>
        <member name="F:GLSharp.win32.JoyReturn.ReturnX">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JoyReturn.ReturnY">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JoyReturn.ReturnZ">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JoyReturn.ReturnR">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JoyReturn.ReturnU">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JoyReturn.ReturnV">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JoyReturn.ReturnPov">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JoyReturn.ReturnButtons">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JoyReturn.ReturnRawData">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JoyReturn.ReturnPovCts">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JoyReturn.ReturnCenterd">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JoyReturn.UseDeadZone">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JoyReturn.ReturnAll">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JoyCal.CalReadALWAYS">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JoyCal.CalReadXYOnly">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JoyCal.CalRead3">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JoyCal.CalRead4">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JoyCal.CalReadXOnly">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JoyCal.CalReadYOnly">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JoyCal.CalRead5">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JoyCal.CalRead6">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JoyCal.CalReadZOnly">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JoyCal.CalReadROnly">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JoyCal.CalReadUOnly">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JoyCal.CalReadVOnly">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.MmError.NoError">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.MmError.MmSysErrBase">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.MmError.Error">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.MmError.BadDevice">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.MmError.NotEnabled">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.MmError.Allocated">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.MmError.InvalHandle">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.MmError.NoDriver">
            <summary>The joystick driver is not present.</summary>
        </member>
        <member name="F:GLSharp.win32.MmError.NoMem">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.MmError.NotSupported">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.MmError.BadErrNum">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.MmError.InvalFlag">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.MmError.InvalParam">
            <summary>An invalid parameter was passed.</summary>
        </member>
        <member name="F:GLSharp.win32.MmError.LastError">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.MmError.Params">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.MmError.NoCanDo">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.MmError.UnPlugged">
            <summary></summary>
        </member>
        <member name="F:GLSharp.win32.JoysticEventMessage.Joy1Move">
            <summary>
            JOYSTICKID1 XY axis changed
            </summary>
        </member>
        <member name="F:GLSharp.win32.JoysticEventMessage.Joy2Move">
            <summary>
            JOYSTICKID2 JOYSTICKID2
            </summary>
        </member>
        <member name="F:GLSharp.win32.JoysticEventMessage.Joy1ZMove">
            <summary>
            JOYSTICKID1 Z axis changed
            </summary>
        </member>
        <member name="F:GLSharp.win32.JoysticEventMessage.Joy2ZMove">
            <summary>
            JOYSTICKID2 Z axis changed
            </summary>
        </member>
        <member name="F:GLSharp.win32.JoysticEventMessage.Joy1ButtonDown">
            <summary>
            JOYSTICKID1 bunnon downed
            </summary>
        </member>
        <member name="F:GLSharp.win32.JoysticEventMessage.Joy2ButtonDown">
            <summary>
            JOYSTICKID2 bunnon downed
            </summary>
        </member>
        <member name="F:GLSharp.win32.JoysticEventMessage.Joy1ButtonUp">
            <summary>
            JOYSTICKID1 bunnon upped
            </summary>
        </member>
        <member name="F:GLSharp.win32.JoysticEventMessage.Joy2ButtonUp">
            <summary>
            JOYSTICKID2 bunnon upped
            </summary>
        </member>
        <member name="M:GLSharp.wgl.CreateContext(System.IntPtr)">
            <summary>
            Creates a rendering context for the Device context.
            </summary>
            <param name="hdc">Device Context</param>
            <returns>Handle to the rendering context</returns>
        </member>
        <member name="M:GLSharp.wgl.MakeCurrent(System.IntPtr,System.IntPtr)">
            <summary>
            Sets the current rendering context
            </summary>
            <param name="hdc">Device Context</param>
            <param name="hrc">Rendering Context</param>
            <returns></returns>
        </member>
        <member name="M:GLSharp.wgl.DeleteContext(System.IntPtr)">
            <summary>
            Deletes the rendering context
            </summary>
            <param name="hrc">Rendering context to delet</param>
            <returns></returns>
        </member>
        <member name="M:GLSharp.wgl.SwapBuffers(System.IntPtr)">
            <summary>
            Swaps the display buffers in a double buffer context
            </summary>
            <param name="hdc">Device context</param>
            <returns></returns>
        </member>
        <member name="F:GLSharp.TTPOLYGONHEADER.countBuffer">
            <summary>
            バッファのサイズ
            </summary>
        </member>
        <member name="F:GLSharp.TTPOLYGONHEADER.type">
            <summary>
            アウトラインの種類
            </summary>
        </member>
        <member name="F:GLSharp.TTPOLYGONHEADER.start">
            <summary>
            開始点
            </summary>
        </member>
        <member name="F:GLSharp.TTPOLYCURVEHEADER.type">
            <summary>
            曲線の種類（1=折れ線、2=ベジェ曲線）
            </summary>
        </member>
        <member name="F:GLSharp.TTPOLYCURVEHEADER.countPFX">
            <summary>
            点の数
            </summary>
        </member>
        <member name="F:GLSharp.FIXED.fract">
            <summary>
            小数部分( 0x10000 = 1.0 )
            </summary>
        </member>
        <member name="F:GLSharp.FIXED.value">
            <summary>
            整数部分
            </summary>
        </member>
        <member name="M:GLSharp.POINTFX.ToFloatArray">
            <summary>
            float[]{x,y}に変換する。
            </summary>
            <returns></returns>
        </member>
        <member name="F:GLSharp.GetGlyphOutlineFormat.METRICS">
            <summary>
            GLYPHMETRICS 構造体だけを取得する。
            ほかのバッファは無視される。
            </summary>
        </member>
        <member name="F:GLSharp.GetGlyphOutlineFormat.BITMAP">
            <summary>
            グリフビットマップを取得
            </summary>
        </member>
        <member name="F:GLSharp.GetGlyphOutlineFormat.NATIVE">
            <summary>
            ラスタライザの曲線データポイントをネイティブ形式で取得し、フォントのデザイン単位を使う。
            この値が指定されている場合、lpMatrix パラメータで指定されている変換はいずれも無視される。
            </summary>
        </member>
        <member name="F:GLSharp.GetGlyphOutlineFormat.BEZIER">
            <summary>
            曲線データを、4 次スプライン形式ではなく 3 次ベジェスプラインとして取得
            </summary>
        </member>
        <member name="F:GLSharp.GetGlyphOutlineFormat.GRAY2_BITMAP">
            <summary>
            5 階調のグレーのグリフビットマップを取得する。
            </summary>
        </member>
        <member name="F:GLSharp.GetGlyphOutlineFormat.GRAY4_BITMAP">
            <summary>
            17 階調のグレーのグリフビットマップを取得
            </summary>
        </member>
        <member name="F:GLSharp.GetGlyphOutlineFormat.GRAY8_BITMAP">
            <summary>
            65 階調のグレーのグリフビットマップを取得
            </summary>
        </member>
        <member name="F:GLSharp.GetGlyphOutlineFormat.GLYPH_INDEX">
            <summary>
            Windows 95、Windows NT 4.0 および Windows 2000：グリフに対する ABC 文字間隔を取得する。
            この場合、A はグリフ左側の空白、B はグリフの幅、C はグリフ右側の空白を表す。
            </summary>
        </member>
        <member name="F:GLSharp.GetGlyphOutlineFormat.UNHINTED">
            <summary>
            Windows 2000：ヒンティングを行わないアウトラインだけを返す。
            このフラグは GGO_BEZIER および GGO_NATIVE フラグと共に使う場合にだけ機能する。
            </summary>
        </member>
        <member name="T:GLSharp.KeySet">
            <summary>
            <para>キーと修飾キーのセット</para>
            <para>KeyEventArgs型やKeys型のオブジェクトと直接==、!=演算子で比較できる。</para>
            </summary>
            <remarks>
            <example>
            <code>
            KeySet key = new KeySet( Keys.F, false, true, false );
            protected override void OnKeyDown( KeyEventArgs e )
            {
                if( e == key )
                {
                    // ...
                }
            }
            </code>
            </example>
            </remarks>
        </member>
        <member name="F:GLSharp.KeySet.Shift">
            <summary>
            Shift修飾キー
            </summary>
        </member>
        <member name="F:GLSharp.KeySet.Control">
            <summary>
            Control修飾キー
            </summary>
        </member>
        <member name="F:GLSharp.KeySet.Alt">
            <summary>
            Alt修飾キー
            </summary>
        </member>
        <member name="F:GLSharp.KeySet.KeyCode">
            <summary>
            修飾キーを含まないキーコード
            </summary>
        </member>
        <member name="F:GLSharp.KeySet.AllModifiers">
            <summary>
            (Keys.Shift | Keys.Control | Keys.Alt)
            </summary>
        </member>
        <member name="T:GLSharp.Texture">
            <summary>
            テクスチャを表す基礎クラス。
            </summary>
        </member>
        <member name="F:GLSharp.Texture.id">
            <summary>
            OpenGLによって与えられる、このテクスチャのテクスチャオブジェクトの識別番号。
            </summary>
            <remarks>
            glGenTexturesで取得したテクスチャオブジェクトの識別番号を割り当てる。
            必ず、テクスチャを作成したときに（コンストラクタ内などで）割り当てること。
            </remarks>
        </member>
        <member name="F:GLSharp.Texture.name">
            <summary>
            このテクスチャの名前。
            </summary>
        </member>
        <member name="F:GLSharp.Texture.target">
            <summary>
            [readonty] テクスチャターゲット
            </summary>
        </member>
        <member name="F:GLSharp.Texture.texCoordFunc">
            <summary>
            <para>テクスチャ座標を指定するメソッド</para>
            <para>デフォルトは glTexCoord2fv()</para>
            </summary>
        </member>
        <member name="M:GLSharp.Texture.#ctor">
            <summary>
            デフォルトコンストラクタ。
            自動的にテクスチャIDが作成されます。
            </summary>
        </member>
        <member name="M:GLSharp.Texture.Bind">
            <summary>
            このテクスチャをバインドする。
            つまり、現在のテクスチャに設定する。
            </summary>
        </member>
        <member name="M:GLSharp.Texture.Dispose">
            <summary>
            OpenGL上のテクスチャデータを破棄する。
            </summary>
        </member>
        <member name="P:GLSharp.Texture.ID">
            <summary>
            [gt] OpenGLによって与えられる、このテクスチャの識別番号
            </summary>
        </member>
        <member name="P:GLSharp.Texture.Target">
            <summary>
            
            [get] このテクスチャのターゲット
            </summary>
        </member>
        <member name="P:GLSharp.Texture.TexCoordFunc">
            <summary>
            <para>[get] テクスチャ座標を指定するメソッド</para>
            <para>デフォルトは glTexCoord2fv()</para>
            </summary>
        </member>
        <member name="P:GLSharp.Texture.SizeNonPowerOfTwoSupported">
            <summary>
            [get] エクステンション GL_ARB_texture_non_power_of_two がサポートされているかどうかを取得する。
            サポートされている場合、サイズが2のn乗でない画像をそのままテクスチャとして使用できる。
            （ただし、実装によってはパフォーマンスの低下を伴う場合があるので注意。）
            </summary>
        </member>
        <member name="T:GLSharp.IConvertibleToBitmap">
            <summary>
            System.Drawing.Bitmap クラスのインスタンスとして
            画像を取得するためのメソッドを提供する。
            </summary>
        </member>
        <member name="M:GLSharp.IConvertibleToBitmap.ToBitmap">
            <summary>
            System.Drawing.Bitmap クラスのインスタンスとして、画像を取得する。
            </summary>
            <returns>このインスタンスから取得した画像。</returns>
        </member>
        <member name="T:GLSharp.TextureID">
            <summary>
            テクスチャIDを表します。
            </summary>
        </member>
        <member name="F:GLSharp.TextureID.id">
            <summary>
            テクスチャのID
            </summary>
        </member>
        <member name="M:GLSharp.TextureID.#ctor">
            <summary>
            テクスチャIDを作成します。
            </summary>
        </member>
        <member name="M:GLSharp.TextureID.Dispose">
            <summary>
            OpenGL上のテクスチャデータを破棄します。
            </summary>
        </member>
        <member name="P:GLSharp.TextureID.Disposed">
            <summary>
            このテクスチャが破棄されているかどうかを取得します。
            </summary>
        </member>
        <member name="T:GLSharp.Texture2D">
            <summary>
            2次元のテクスチャを表すクラス。
            主にRGBA画像を扱う。
            </summary>
        </member>
        <member name="F:GLSharp.Texture2D.pixelFormat">
            <summary>
            テクスチャの作成元となった画像のピクセルフォーマット
            </summary>
        </member>
        <member name="F:GLSharp.Texture2D.pixelType">
            <summary>
            ピクセルデータの型。
            デフォルトはUnsignedByte。
            </summary>
        </member>
        <member name="F:GLSharp.Texture2D.pixelArrayElementDataType">
            <summary>
            ピクセルデータの配列の要素の型。
            </summary>
        </member>
        <member name="F:GLSharp.Texture2D.level">
            <summary>
            このテクスチャのレベル。
            </summary>
        </member>
        <member name="F:GLSharp.Texture2D.width">
            <summary>
            このテクスチャの幅
            </summary>
        </member>
        <member name="F:GLSharp.Texture2D.height">
            <summary>
            このテクスチャの高さ
            </summary>
        </member>
        <member name="F:GLSharp.Texture2D.border">
            <summary>
            テクスチャの境界幅がある場合は1、無い場合は0。
            </summary>
        </member>
        <member name="F:GLSharp.Texture2D.internalFormat">
            <summary>
            このテクスチャの内部フォーマット
            </summary>
        </member>
        <member name="F:GLSharp.Texture2D.numCompornents">
            <summary>
            1テクセルあたりの要素数
            </summary>
        </member>
        <member name="F:GLSharp.Texture2D.mipmapGened">
            <summary>
            ミップマップが作成済みかどうかを表すフラグ
            </summary>
        </member>
        <member name="F:GLSharp.Texture2D.textureMatirx">
            <summary>
            テクスチャ座標変換行列を表す。
            textureMatrixEnabledフィールドがtrueの時のみ適用される。
            テクスチャをバインド時に適用される。
            </summary>
        </member>
        <member name="F:GLSharp.Texture2D.textureMatrixEnabled">
            <summary>
            textureMatrixフィールドで指定されたテクスチャ座標変換行列を適用するかどうかを表すフラグ。
            falseの場合、テクスチャ座標変換行列は用いられず、指定したVU座標がそのまま適用される。
            デフォルトはfalse。
            </summary>
            <remarks>
            テクスチャ座標自動生成を利用する場合などは、
            textureMatrixEnabledフィールドをtrueにし、
            textureMatirxを設定して、自動生成されたUV座標を変換するために使用できる。
            </remarks>
        </member>
        <member name="F:GLSharp.Texture2D.texGenMode">
            <summary>
            テクスチャ座標自動生成のモード
            </summary>
        </member>
        <member name="M:GLSharp.Texture2D.#ctor(System.String,System.Boolean)">
            <summary>
            テクスチャ画像のファイルパスを指定して、テクスチャを作成する。
            </summary>
            <param name="textureImageFilePath">テクスチャ画像のファイルパス(bmp, jpg, png, gif)</param>
            <param name="buildMipmaps">ミップマップを作成するかどうかの指定</param>
            <exception cref="T:System.Exception">現在のレンダリングコンテキストが無効です。</exception>
            <exception cref="T:System.IO.FileNotFoundException">指定されたテクスチャの画像ファイルが見つかりません。</exception>
        </member>
        <member name="M:GLSharp.Texture2D.#ctor(System.Drawing.Bitmap,System.String,System.Boolean)">
            <summary>
            指定したBitmapからテクスチャを作成する。
            </summary>
            <param name="texture">テクスチャの元となるビットマップ</param>
            <remarks>作成されるテクスチャはRGBA形式になる。</remarks>
            <param name="name">このテクスチャの名前</param>
            <param name="buildMipmaps">ミップマップを作成するかどうかの指定</param>
            <exception cref="T:System.Exception">現在のレンダリングコンテキストが無効です。</exception>
        </member>
        <member name="M:GLSharp.Texture2D.CreateTexture2D``1(System.String,``0[],OpenTK.Graphics.OpenGL.PixelType,OpenTK.Graphics.OpenGL.PixelFormat,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.OpenGL.PixelInternalFormat,System.Int32,System.Boolean)">
            <summary>
            バイト型配列の画像からテクスチャを作成する。
            </summary>
            <param name="name">作成するテクスチャの名前</param>
            <param name="image">テクスチャ画像のテクセルデータ</param>
            <param name="pixelType">テクセルデータのデータ型</param>
            <param name="imageFormat">テクセルデータのフォーマット</param>
            <param name="width">画像の幅</param>
            <param name="height">画像の高さ</param>
            <param name="border">テクスチャの境界幅がある場合は1、無い場合は0を指定する。</param>
            <param name="internalFormat">テクスチャのフォーマット</param>
            <param name="numCompornents">テクスチャの1テクセルあたりの要素数</param>
            <param name="buildMipmaps">ミップマップを作成するかどうかの指定</param>
        </member>
        <member name="M:GLSharp.Texture2D.#ctor(System.String,GLSharp.TextureID,OpenTK.Graphics.OpenGL.PixelInternalFormat,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="name"></param>
            <param name="id"></param>
            <param name="internalFormat"></param>
            <param name="numCompornents"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="border"></param>
        </member>
        <member name="M:GLSharp.Texture2D.ProxyTexture2D">
            <summary>
            テクスチャ・プロキシにより、テクスチャが作成可能かどうかを確認する。
            </summary>
        </member>
        <member name="M:GLSharp.Texture2D.Bind">
            <summary>
            このテクスチャをバインドする。
            つまり、現在のテクスチャに設定する。
            同時に、テクスチャ座標自動生成やテクスチャ座標変換行列が有効な場合は、
            それらも適用される。
            </summary>
        </member>
        <member name="M:GLSharp.Texture2D.ApplyTexGenMode">
            <summary>
            テクスチャ座標自動生成の設定を適用する。
            </summary>
        </member>
        <member name="M:GLSharp.Texture2D.Bind(System.Boolean)">
            <summary>
            このテクスチャをバインドする。
            つまり、現在のテクスチャに設定する。
            </summary>
            <param name="bindOnly">trueを指定した場合、テクスチャのバインド(gl.BindTexture())のみが行われる。</param>
        </member>
        <member name="M:GLSharp.Texture2D.SubImage(System.Drawing.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            このテクスチャの一部を書き換える。
            （=このテクスチャに対してglTexSubImage2D(...)を行う。）
            </summary>
            <param name="image">テクスチャに新しく上書きをするのに使用する画像</param>
            <param name="xOffset">書き込みを開始する位置のx座標[pixel]</param>
            <param name="yOffset">書き込みを開始する位置のy座標[pixel]</param>
            <param name="width">上書きする幅[pixel]</param>
            <param name="height">上書きする高さ[pixel]</param>
        </member>
        <member name="M:GLSharp.Texture2D.SubImage(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,OpenTK.Graphics.OpenGL.PixelFormat)">
            <summary>
            このテクスチャの一部を書き換える。
            （=このテクスチャに対してglTexSubImage2D(...)を行う。）
            </summary>
            <param name="image">テクスチャに新しく上書きをするのに使用する画像（RGBA）</param>
            <param name="xOffset">書き込みを開始する位置のx座標[pixel]</param>
            <param name="yOffset">書き込みを開始する位置のy座標[pixel]</param>
            <param name="width">上書きする幅[pixel]</param>
            <param name="height">上書きする高さ[pixel]</param>
            <param name="format">テクスチャの1ピクセルあたりの色要素の形式。GL_RGBAなど。</param>
        </member>
        <member name="M:GLSharp.Texture2D.BuildMipMaps(OpenTK.Graphics.OpenGL.PixelInternalFormat,System.Int32,System.Int32,OpenTK.Graphics.OpenGL.PixelFormat,OpenTK.Graphics.OpenGL.PixelType,System.Array)">
            <summary>
            ミップマップを作成する。
            </summary>
            <param name="internalFormat"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="format"></param>
            <param name="pixelType"></param>
            <param name="texImageByteArray">元となるテクスチャの画像</param>
        </member>
        <member name="M:GLSharp.Texture2D.CheckSizeAndScale``1(``0[0:,0:]@,OpenTK.Graphics.OpenGL.PixelFormat,System.Int32@,System.Int32@,System.Int32,OpenTK.Graphics.OpenGL.PixelType)">
            <summary>
            texture = T[width*height, components] or T[height, width*components] or T[height, width]
            </summary>
            <typeparam name="T"></typeparam>
            <param name="texture"></param>
            <param name="format"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="compornents"></param>
            <param name="pixelType"></param>
        </member>
        <member name="M:GLSharp.Texture2D.CheckSizeAndScale``1(``0[0:,0:,0:]@,OpenTK.Graphics.OpenGL.PixelFormat,System.Int32@,System.Int32@,System.Int32,OpenTK.Graphics.OpenGL.PixelType)">
            <summary>
            texture = T[height, width, components]
            </summary>
            <typeparam name="T"></typeparam>
            <param name="texture"></param>
            <param name="format"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="compornents"></param>
            <param name="pixelType"></param>
        </member>
        <member name="M:GLSharp.Texture2D.ConvertBitmapToByteArrayRGBA(System.Drawing.Bitmap)">
            <summary>
            Bitmapからbyte[]型RGBA配列を作成する
            </summary>
            <param name="bmp">ビットマップ</param>
            <returns>byte[]型RGBA配列</returns>
        </member>
        <member name="M:GLSharp.Texture2D.ToBitmap(OpenTK.Graphics.OpenGL.PixelFormat,System.Int32,System.Drawing.Imaging.PixelFormat)">
            <summary>
            OpenGLからこのテクスチャの内容を取得して、Bitmapクラスのインスタンスを作成する。
            </summary>
        </member>
        <member name="M:GLSharp.Texture2D.Clone">
            <summary>
            クローンを作成する。
            </summary>
            <returns>作成されたクローン</returns>
            <remarks>
            テクスチャの画像は、OpenGLからGetTexImage2Dで取得してコピーされる。
            </remarks>
        </member>
        <member name="P:GLSharp.Texture2D.SizeNonPowerOfTwoEnabled">
            <summary>
            <para>[get,set] サイズが2のn乗ではないテクスチャを作成するかどうかを取得・設定する。</para>
            <para>デフォルトはfalse。</para>
            <para>falseの場合は、テクスチャ作成時にサイズが2のn乗になるように自動的にスケーリングされる。
            trueだと、サイズが2のn乗ではない画像もそのままのサイズでテクスチャが作成される。</para>
            <para>エクステンション GL_ARB_texture_non_power_of_two がサポートされている場合にのみ、trueを設定できる。</para>
            </summary>
        </member>
        <member name="P:GLSharp.Texture2D.OriginalImageFilePath">
            <summary>
            テクスチャの作成元となった画像ファイルのパスを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.Texture2D.OriginalImagePixelFormat">
            <summary>
            テクスチャの作成元となった画像のピクセルフォーマットを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.Texture2D.PixelType">
            <summary>
            ピクセルデータの型を取得する。
            デフォルトはUnsignedByte。
            </summary>
        </member>
        <member name="P:GLSharp.Texture2D.Level">
            <summary>
            このテクスチャのレベルを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.Texture2D.Width">
            <summary>
            このテクスチャの幅を取得する。
            </summary>
        </member>
        <member name="P:GLSharp.Texture2D.Height">
            <summary>
            このテクスチャの高さを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.Texture2D.Border">
            <summary>
            テクスチャの境界幅がある場合は1、無い場合は0。
            </summary>
        </member>
        <member name="P:GLSharp.Texture2D.InternalFormat">
            <summary>
            このテクスチャの内部フォーマットを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.Texture2D.NumCompornents">
            <summary>
            1テクセルあたりの要素数を取得する。
            </summary>
        </member>
        <member name="P:GLSharp.Texture2D.TextureGened">
            <summary>
            OpenGL上でテクスチャを作成済みかどうかを示すフラグを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.Texture2D.MipmapGened">
            <summary>
            ミップマップが作成済みかどうかを表すフラグを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.Texture2D.TexGenMode">
            <summary>
            テクスチャ座標自動生成のモードを取得・設定する。
            </summary>
        </member>
        <member name="P:GLSharp.Texture2D.TexGenS_Enabled">
            <summary>
            テクスチャ座標の自動生成を行うかどうかを取得・設定する。
            </summary>
        </member>
        <member name="P:GLSharp.Texture2D.TexGenT_Enabled">
            <summary>
            テクスチャ座標の自動生成を行うかどうかを取得・設定する。
            </summary>
        </member>
        <member name="P:GLSharp.Texture2D.TexGenR_Enabled">
            <summary>
            テクスチャ座標の自動生成を行うかどうかを取得・設定する。
            </summary>
        </member>
        <member name="P:GLSharp.Texture2D.TexGenQ_Enabled">
            <summary>
            テクスチャ座標の自動生成を行うかどうかを取得・設定する。
            </summary>
        </member>
        <member name="T:GLSharp.DepthTexture">
            <summary>
            シャドウマッピングのためのデプステクスチャを扱う。
            </summary>
        </member>
        <member name="M:GLSharp.DepthTexture.#ctor(System.Int32,System.Int32,GLSharp.TextureCompairFunc,GLSharp.DepthTexureMode)">
            <summary>
            デプステクスチャを作成する。
            </summary>
            <param name="width">テクスチャの幅</param>
            <param name="height">テクスチャの高さ</param>
            <param name="compairFunc">デプステクスチャの比較関数</param>
            <param name="compairMode">比較結果の適用方法</param>
        </member>
        <member name="M:GLSharp.DepthTexture.EnableTexGen">
            <summary>
            OpenGLのテクスチャ座標自動生成をシャドウマッピングのために有効にする。
            </summary>
        </member>
        <member name="M:GLSharp.DepthTexture.DisableTexGen">
            <summary>
            OpenGLのテクスチャ座標自動生成を無効にする。
            </summary>
        </member>
        <member name="M:GLSharp.DepthTexture.CopyFromBuffer">
            <summary>
            バッファの内容をこのテクスチャにコピーする。
            </summary>
        </member>
        <member name="M:GLSharp.DepthTexture.CopyFromBuffer(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            バッファの内容をこのテクスチャにコピーする。
            </summary>
            <param name="xOffset">テクセルのX座標のオフセット</param>
            <param name="yOffset">テクセルのY座標のオフセット</param>
            <param name="x">バッファのコピーを開始する点のX座標</param>
            <param name="y">バッファのコピーを開始する点のY座標</param>
            <param name="width">コピーする幅</param>
            <param name="height">コピーする高さ</param>
        </member>
        <member name="P:GLSharp.TextureDictionaly.Item(System.String)">
            <summary>
            テクスチャを取得します。
            <para>
            指定したファイルからすでにテクスチャを作成している場合は、
            その作成済みのテクスチャを返す。</para>
            <para>そうでない場合は、新規にテクスチャを作成し、このインスタンスがファイル名をキーとしてその参照を保持する。</para>
            </summary>
            <param name="fileName">テクスチャにする画像ファイル</param>
            <returns>テクスチャ</returns>
        </member>
        <member name="P:GLSharp.TextureDictionaly.Item(System.String,System.Reflection.Assembly)">
            <summary>
            <para> テクスチャを取得します。</para>
            <para> 指定したファイルからすでにテクスチャを作成している場合は、
            その作成済みのテクスチャを返す。</para>
            <para>そうでない場合は、指定したアセンブリの埋め込みリソースから新規にテクスチャを作成し、このインスタンスがファイル名をキーとしてその参照を保持する。</para>
            </summary>
            <param name="fileName">テクスチャにする画像ファイル</param>
            <param name="assembly">画像ファイルが埋め込みリソースとして含まれているアセンブリ</param>
            <returns>テクスチャ</returns>
        </member>
        <member name="T:GLSharp.Material">
            <summary>
            マテリアルを表すクラス
            </summary>
            <remarks>
            マテリアルを扱うためのクラス。
            マテリアルとテクスチャをまとめて扱うことが出来る。
            </remarks>
        </member>
        <member name="F:GLSharp.Material.name">
            <summary>
            このマテリアルの名前
            </summary>
        </member>
        <member name="F:GLSharp.Material.color">
            <summary>
            マテリアルの色(RGBA, Lenth = 4)
            </summary>
        </member>
        <member name="F:GLSharp.Material.ambientRatio">
            <summary>
            colorとambientの比
            </summary>
        </member>
        <member name="F:GLSharp.Material.ambient">
            <summary>
            環境色(RGBA, Lenth = 4)
            </summary>
        </member>
        <member name="F:GLSharp.Material.diffuse">
            <summary>
            散乱色(RGBA, Lenth = 4)
            </summary>
        </member>
        <member name="F:GLSharp.Material.specular">
            <summary>
            反射色(RGBA, Lenth = 4)
            </summary>
        </member>
        <member name="F:GLSharp.Material.emission">
            <summary>
            自己照明色(RGBA, Lenth = 4)
            </summary>
        </member>
        <member name="F:GLSharp.Material.shininess">
            <summary>
            反射強度(0～128)
            </summary>
        </member>
        <member name="F:GLSharp.Material.texture">
            <summary>
            テクスチャ(null可)
            </summary>
        </member>
        <member name="F:GLSharp.Material.vertexColor">
            <summary>
            頂点カラーかどうかを表すフラグ
            デフォルトはfalse。
            </summary>
        </member>
        <member name="F:GLSharp.Material.alphaTestEnabled">
            <summary>
            アルファテストを有効にするかどうかのフラグ。
            デフォルトはfalse。
            </summary>
        </member>
        <member name="F:GLSharp.Material.defaultAmbient">
            <summary>
            デフォルトの環境光の明るさ (= 0.5)
            </summary>
        </member>
        <member name="F:GLSharp.Material.defaultDiffuse">
            <summary>
            デフォルトの拡散光の明るさ (= 1.0)
            </summary>
        </member>
        <member name="F:GLSharp.Material.defaultSpecular">
            <summary>
            デフォルトの反射光の明るさ (= 1.0)
            </summary>
        </member>
        <member name="F:GLSharp.Material.defaultEmission">
            <summary>
            デフォルトの放射光の明るさ(= 0.0)
            </summary>
        </member>
        <member name="F:GLSharp.Material.defaultShinnes">
            <summary>
            デフォルトの反射光の強さ (= 50)
            </summary>
        </member>
        <member name="M:GLSharp.Material.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            コンストラクタ（テクスチャ無し）
            </summary>
            <param name="name">マテリアルの名前</param>
            <param name="r">赤</param>
            <param name="g">緑</param>
            <param name="b">青</param>
            <param name="a">アルファ</param>
            <param name="amb">環境光に対する明るさ</param>
            <param name="diff">拡散光の明るさ</param>
            <param name="spec">反射光の明るさ</param>
            <param name="emi">自己照明の明るさ</param>
            <param name="shin">反射光の強度</param>
        </member>
        <member name="M:GLSharp.Material.#ctor(System.String,System.Drawing.Color,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            コンストラクタ（テクスチャ無し）
            </summary>
            <param name="name">マテリアルの名前</param>
            <param name="color">色</param>
            <param name="a">色のアルファ値</param>
            <param name="amb">環境光に対する明るさ</param>
            <param name="diff">拡散光の明るさ</param>
            <param name="spec">反射光の明るさ</param>
            <param name="emi">自己照明の明るさ</param>
            <param name="shin">反射光の強度</param>
        </member>
        <member name="M:GLSharp.Material.#ctor(System.String,System.Drawing.Color,System.Single)">
            <summary>
            コンストラクタ（テクスチャ無し）
            </summary>
            <param name="name">マテリアルの名前</param>
            <param name="color">色</param>
            <param name="a">色のアルファ値</param>
        </member>
        <member name="M:GLSharp.Material.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,GLSharp.Texture2D)">
            <summary>
            コンストラクタ（テクスチャ有り）
            </summary>
            <param name="name">マテリアルの名前</param>
            <param name="r">赤</param>
            <param name="g">緑</param>
            <param name="b">青</param>
            <param name="a">アルファ</param>
            <param name="amb">環境光に対する明るさ</param>
            <param name="diff">拡散光の明るさ</param>
            <param name="spec">反射光の明るさ</param>
            <param name="emi">自己照明の明るさ</param>
            <param name="shin">反射光の強度</param>
            <param name="texture">テクスチャ</param>
        </member>
        <member name="M:GLSharp.Material.#ctor(System.String,System.Drawing.Color,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,GLSharp.Texture2D)">
            <summary>
            コンストラクタ（テクスチャ有り）
            </summary>
            <param name="name">マテリアルの名前</param>
            <param name="color">色</param>
            <param name="a">色のアルファ値</param>
            <param name="amb">環境光に対する明るさ</param>
            <param name="diff">拡散光の明るさ</param>
            <param name="spec">反射光の明るさ</param>
            <param name="emi">自己照明の明るさ</param>
            <param name="shin">反射光の強度</param>
            <param name="texture">テクスチャ</param>
        </member>
        <member name="M:GLSharp.Material.#ctor(System.String,System.Drawing.Color,System.Single,GLSharp.Texture2D)">
            <summary>
            コンストラクタ（テクスチャ有り）
            </summary>
            <param name="name">マテリアルの名前</param>
            <param name="color">色</param>
            <param name="a">色のアルファ値</param>
            <param name="texture">テクスチャ</param>
        </member>
        <member name="M:GLSharp.Material.#ctor(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            コンストラクタ（テクスチャ無し）
            </summary>
            <param name="name">マテリアルの名前</param>
            <param name="r">Red</param>
            <param name="g">Gren</param>
            <param name="b">Blue</param>
            <param name="a">Alpha</param>
        </member>
        <member name="M:GLSharp.Material.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,GLSharp.Texture2D)">
            <summary>
            コンストラクタ（テクスチャ有り）
            </summary>
            <param name="name">マテリアルの名前</param>
            <param name="r">Red</param>
            <param name="g">Gren</param>
            <param name="b">Blue</param>
            <param name="a">Alpha</param>
            <param name="texture">テクスチャ</param>
        </member>
        <member name="M:GLSharp.Material.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.String,System.Boolean)">
            <summary>
            コンストラクタ（テクスチャ有り）
            </summary>
            <param name="name">マテリアルの名前</param>
            <param name="r">赤</param>
            <param name="g">緑</param>
            <param name="b">青</param>
            <param name="a">アルファ</param>
            <param name="amb">環境光に対する明るさ</param>
            <param name="diff">拡散光の明るさ</param>
            <param name="spec">反射光の明るさ</param>
            <param name="emi">自己照明の明るさ</param>
            <param name="shin">反射光の強度</param>
            <param name="textureFilePath">テクスチャの元になる画像ファイルのパス</param>
            <param name="buildMipmaps">テクスチャのミップマップを自動的に作成するかどうかの指定。</param>
        </member>
        <member name="M:GLSharp.Material.#ctor(System.String,System.Drawing.Color,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.String,System.Boolean)">
            <summary>
            コンストラクタ（テクスチャ有り）
            </summary>
            <param name="name">マテリアルの名前</param>
            <param name="color">色</param>
            <param name="a">色のアルファ値</param>
            <param name="amb">環境光に対する明るさ</param>
            <param name="diff">拡散光の明るさ</param>
            <param name="spec">反射光の明るさ</param>
            <param name="emi">自己照明の明るさ</param>
            <param name="shin">反射光の強度</param>
            <param name="textureFilePath">テクスチャの元になる画像ファイルのパス</param>
            <param name="buildMipmaps">テクスチャのミップマップを自動的に作成するかどうかの指定。</param>
        </member>
        <member name="M:GLSharp.Material.#ctor(System.String,System.Drawing.Color,System.Single,System.String,System.Boolean)">
            <summary>
            コンストラクタ（テクスチャ有り）
            </summary>
            <param name="name">マテリアルの名前</param>
            <param name="color">色</param>
            <param name="a">色のアルファ値</param>
            <param name="textureFilePath">テクスチャの元になる画像ファイルのパス</param>
            <param name="buildMipmaps">テクスチャのミップマップを自動的に作成するかどうかの指定。</param>
        </member>
        <member name="M:GLSharp.Material.SetAmbient(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            マテリアルの環境光の色を設定する。
            </summary>
            <param name="r">赤</param>
            <param name="g">緑</param>
            <param name="b">青</param>
            <param name="a">アルファ</param>
        </member>
        <member name="M:GLSharp.Material.SetDiffuse(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            マテリアルの拡散光の色を設定する。
            </summary>
            <param name="r">赤</param>
            <param name="g">緑</param>
            <param name="b">青</param>
            <param name="a">アルファ</param>
        </member>
        <member name="M:GLSharp.Material.SetSpecular(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            マテリアルの反射光の色を設定する。
            </summary>
            <param name="r">赤</param>
            <param name="g">緑</param>
            <param name="b">青</param>
            <param name="a">アルファ</param>
        </member>
        <member name="M:GLSharp.Material.SetEmision(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            マテリアルの自己照明の色を設定する。
            </summary>
            <param name="r">赤</param>
            <param name="g">緑</param>
            <param name="b">青</param>
            <param name="a">アルファ</param>
        </member>
        <member name="M:GLSharp.Material.Apply">
            <summary>
            OpenGLにマテリアルを適用する（テクスチャ無し）。
            テクスチャを使用する場合は、もう一方のオーバーロードメソッドを使用する。
            glBegin( ... ) ～ glEnd() の間では使用不可能。
            </summary>
        </member>
        <member name="M:GLSharp.Material.Apply(System.Boolean)">
            <summary>
            OpenGLにマテリアルを適用し、テクスチャがあればテクスチャをバインドする。
            glBegin( ... ) ～ glEnd() の間では使用不可能。
            </summary>
            <param name="bindTexture">テクスチャがある場合にテクスチャをバインドするかどうかの指定。trueを指定しても、テクスチャが無い場合はバインドされない。</param>
        </member>
        <member name="M:GLSharp.Material.Apply(System.Single[])">
            <summary>
            指定した色のマテリアルをOpenGLに適用する。
            指定された色で材質特性がこのマテリアルと同じものが適用される。このメソッド内ではテクスチャに関しては何もしない。
            glBegin( ... ) ～ glEnd() の間でも使用可能。
            </summary>
            <param name="colorRGBA">マテリアルの色 (float[4]) (RGBA)</param>
        </member>
        <member name="M:GLSharp.Material.ApplyColor">
            <summary>
            このマテリアルの色(Colorプロパティで表される)を適用する。
            色のみで、マテリアルは適用されない。
            glBegin( ... ) ～ glEnd() の間でも使用可能。
            </summary>
        </member>
        <member name="M:GLSharp.Material.ApplyMaterialParams">
            <summary>
            このマテリアルのパラメータ(Ambient, Diffuse, Specular, Emission, Shininess )を設定する。
            glBegin( ... ) ～ glEnd() の間でも使用可能。
            </summary>
        </member>
        <member name="M:GLSharp.Material.BindTexture">
            <summary>
            このマテリアルが持っているテクスチャをバインドする。
            テクスチャが無い場合は glDisable( GL_TEXTURE_2D ) が設定される。
            glBegin( ... ) ～ glEnd() の間では使用不可能。
            </summary>
        </member>
        <member name="M:GLSharp.Material.CopyTo(GLSharp.Material)">
            <summary>
            このインスタンスの値を、指定したインスタンスにコピーする。
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:GLSharp.Material.ToColorRGB(System.Single[])">
            <summary>
            色を表すfloat型配列（float[]{ R, G, B }）から、
            System.Drawing.Colorに変換する。
            </summary>
            <param name="rgb">色を表すfloat型配列（float[]{ R, G, B }）</param>
            <returns>System.Drawing.Color構造体のインスタンス</returns>
        </member>
        <member name="M:GLSharp.Material.ToColorRGBA(System.Single[])">
            <summary>
            色を表すfloat型配列（float[]{ R, G, B, A }）から、
            System.Drawing.Colorに変換する。
            </summary>
            <param name="rgba">色を表すfloat型配列（float[]{ R, G, B, A }）</param>
            <returns>System.Drawing.Color構造体のインスタンス</returns>
        </member>
        <member name="M:GLSharp.Material.ToFloatArrayRGB(System.Drawing.Color)">
            <summary>
            System.Drawing.Colorから、
            色を表すfloat型配列（float[]{ R, G, B }）に変換する。
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:GLSharp.Material.ToFloatArrayRGBA(System.Drawing.Color)">
            <summary>
            System.Drawing.Colorから、
            色を表すfloat型配列（float[]{ R, G, B, A }）に変換する。
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:GLSharp.Material.Clone">
            <summary>
            このマテリアルのクローンを作成する。テクスチャを持つ場合は、テクスチャオブジェクトもクローンが作成される。
            </summary>
            <returns>このマテリアルのクローン</returns>
        </member>
        <member name="M:GLSharp.Material.Clone(System.Boolean,System.String)">
            <summary>
            このマテリアルのクローンを作成する。
            </summary>
            <param name="cloneTexture">
            テクスチャを持つ場合に、
            テクスチャのクローンを作成するがどうかを指定する。
            trueならば、クローンを作成する。
            falseを指定した場合、参照がコピーされる。
            </param>
            <param name="name">作成されるクローンの名前</param>
            <returns>このマテリアルのクローン</returns>
        </member>
        <member name="M:GLSharp.Material.ToString">
            <summary>
            このインスタンスを表す文字列を取得する。
            </summary>
            <returns>nameフィールドを返す。</returns>
        </member>
        <member name="M:GLSharp.Material.Dispose">
            <summary>
            テクスチャを持っている場合は、そのテクスチャを削除します。
            </summary>
        </member>
        <member name="M:GLSharp.Material.GetWhiteDefaultMaterial">
            <summary>
            標準的な白色のマテリアルのインスタンスを新規に作成する。
            </summary>
        </member>
        <member name="M:GLSharp.Material.GetRedDefaultMaterial">
            <summary>
            標準的な赤色のマテリアルのインスタンスを新規に作成する。
            </summary>
        </member>
        <member name="M:GLSharp.Material.GetGreenDefaultMaterial">
            <summary>
            標準的な緑色のマテリアルのインスタンスを新規に作成する。
            </summary>
        </member>
        <member name="M:GLSharp.Material.GetBlueDefaultMaterial">
            <summary>
            標準的な青色のマテリアルのインスタンスを新規に作成する。
            </summary>
        </member>
        <member name="P:GLSharp.Material.AmbientRatio">
            <summary>
            環境光(ambient)の明るさを設定・取得する。
            </summary>
        </member>
        <member name="P:GLSharp.Material.DiffuseRatio">
            <summary>
            マテリアルの色(color)との比(明るさ）で拡散光(diffuse)の色を設定・取得する。
            </summary>
        </member>
        <member name="P:GLSharp.Material.SpecularRatio">
            <summary>
            反射光(speclar)の明るさを設定・取得する。
            </summary>
        </member>
        <member name="P:GLSharp.Material.EmissionRatio">
            <summary>
            マテリアルの色(color)との比(明るさ）で放射光(emission)の色を設定・取得する。
            </summary>
        </member>
        <member name="P:GLSharp.Material.Color">
            <summary>
            マテリアルの色を取得・設定する。
            float[]{ R, G, B, A }。
            設定した場合は、ambeint,diffuse,specular,emission が、
            それぞれ AmbientRatio,DiffuseRate,SpecularRatio,EmissionRatio に基づいて自動的に再設定される。
            </summary>
        </member>
        <member name="P:GLSharp.Material.Alpha">
            <summary>
            マテリアルの透明度を取得・設定する。
            </summary>
        </member>
        <member name="T:GLSharp.JoysticState">
            <summary>
            ジョイスティックの情報を表す。
            </summary>
        </member>
        <member name="M:GLSharp.JoysticState.#ctor(System.UInt32,GLSharp.JoyInfoEx@,GLSharp.JoyCaps@)">
            <summary>
            
            </summary>
            <param name="joysticID">ジョイスティックのID</param>
            <param name="info">ジョイスティックの状態</param>
            <param name="caps">
            <para>
            ジョイスティックのキャパシティ。
            </para>
            <para>
            ただし、各軸の Max には、最大値の代わりに半幅( (Max - Min)/2 )を代入しておくこと。
            0の場合は、その軸は未使用と判断される。
            </para>
            </param>
        </member>
        <member name="M:GLSharp.JoysticState.#ctor(System.UInt32,GLSharp.JoyInfoEx@,GLSharp.JoyCaps@,GLSharp.JoysticButton)">
            <summary>
            
            </summary>
            <param name="joysticID">ジョイスティックのID</param>
            <param name="info">ジョイスティックの状態</param>
            <param name="caps">
            <para>
            ジョイスティックのキャパシティ。
            </para>
            <para>
            ただし、各軸の Max には、最大値の代わりに幅(Max - Min)を代入しておくこと。
            0の場合は、その軸は未使用と判断される。
            </para>
            </param>
            <param name="changedButton">状態が変更されたボタン</param>
        </member>
        <member name="M:GLSharp.JoysticState.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GLSharp.JoysticState.SetValues(System.UInt32,GLSharp.JoyInfoEx@,GLSharp.JoyCaps@)">
            <summary>
            JoyInfoExとJoyCaps構造体の値を元に、各プロパティの値を設定する。
            </summary>
            <param name="joysticID">ジョイスティックのID</param>
            <param name="info">ジョイスティックの状態</param>
            <param name="caps">
            <para>
            ジョイスティックのキャパシティ。
            </para>
            <para>
            ただし、各軸の Max には、最大値の代わりに幅(Max - Min)を代入しておくこと。
            0の場合は、その軸は未使用と判断される。
            </para>
            </param>
        </member>
        <member name="M:GLSharp.JoysticState.SetValues(System.UInt32,GLSharp.JoyInfoEx@,GLSharp.JoyCaps@,GLSharp.JoysticButton)">
            <summary>
            JoyInfoExとJoyCaps構造体の値を元に、各プロパティの値を設定する。
            </summary>
            <param name="joysticID"></param>
            <param name="info"></param>
            <param name="caps">
            <para>
            ジョイスティックのキャパシティ。
            </para>
            <para>
            ただし、各軸の Max には、最大値の代わりに幅(Max - Min)を代入しておくこと。
            0の場合は、その軸は未使用と判断される。
            </para>
            </param>
            <param name="changedButton"></param>
        </member>
        <member name="M:GLSharp.JoysticState.SetValues(GLSharp.JoysticState)">
            <summary>
            値をコピーする。
            </summary>
            <param name="state">コピー元のオブジェクト</param>
        </member>
        <member name="P:GLSharp.JoysticState.XPos">
            <summary>
            [get,set]
            </summary>
        </member>
        <member name="P:GLSharp.JoysticState.YPos">
            <summary>
            [get,set]
            </summary>
        </member>
        <member name="P:GLSharp.JoysticState.ZPos">
            <summary>
            [get,set]
            </summary>
        </member>
        <member name="P:GLSharp.JoysticState.RPos">
            <summary>
            [get,set]
            </summary>
        </member>
        <member name="P:GLSharp.JoysticState.UPos">
            <summary>
            [get,set]
            </summary>
        </member>
        <member name="P:GLSharp.JoysticState.VPos">
            <summary>
            [get,set]
            </summary>
        </member>
        <member name="P:GLSharp.JoysticState.Buttons">
            <summary>
            [get, set] 押されているボタン
            </summary>
        </member>
        <member name="P:GLSharp.JoysticState.NumPressedButtons">
            <summary>
            [get,set] 押されているボタンの数
            </summary>
        </member>
        <member name="P:GLSharp.JoysticState.ChangedButton">
            <summary>
            [get,set] 状態が変更されたボタン
            </summary>
        </member>
        <member name="P:GLSharp.JoysticState.POV">
            <summary>
            <para>[get,set] POVの値</para>
            <para>0.0 - 359.0</para>
            </summary>
        </member>
        <member name="P:GLSharp.JoysticState.ID">
            <summary>
            [get, set] ジョイスティックのID
            </summary>
        </member>
        <member name="T:GLSharp.JoysticEventHandler">
            <summary>
            ジョイスティックのイベントのイベントハンドラ
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:GLSharp.JoysticEventArgs">
            <summary>
            ジョイスティックのイベントの情報を表す。
            </summary>
        </member>
        <member name="M:GLSharp.JoysticEventArgs.#ctor(GLSharp.JoysticState)">
            <summary>
            
            </summary>
            <param name="state">ジョイスティックの状態</param>
        </member>
        <member name="M:GLSharp.JoysticEventArgs.#ctor(System.UInt32,GLSharp.JoyInfoEx@,GLSharp.JoyCaps@)">
            <summary>
            
            </summary>
            <param name="joysticID"></param>
            <param name="info"></param>
            <param name="caps">
            <para>
            ジョイスティックのキャパシティ。
            </para>
            <para>
            ただし、各軸の Max には、最大値の代わりに半幅( (Max - Min)/2 )を代入しておくこと。
            0の場合は、その軸は未使用と判断される。
            </para>
            </param>
        </member>
        <member name="M:GLSharp.JoysticEventArgs.#ctor(System.UInt32,GLSharp.JoyInfoEx@,GLSharp.JoyCaps@,GLSharp.JoysticButton)">
            <summary>
            
            </summary>
            <param name="joysticID"></param>
            <param name="info"></param>
            <param name="caps">
            <para>
            ジョイスティックのキャパシティ。
            </para>
            <para>
            ただし、各軸の Max には、最大値の代わりに幅(Max - Min)を代入しておくこと。
            0の場合は、その軸は未使用と判断される。
            </para>
            </param>
            <param name="changedButton"></param>
        </member>
        <member name="P:GLSharp.JoysticEventArgs.State">
            <summary>
            [get]
            </summary>
        </member>
        <member name="M:GLSharp.Joystic.GetDevices">
            <summary>
            接続されているジョイスティックをすべて取得する。
            </summary>
            <returns>見つかったデバイスの配列。</returns>
        </member>
        <member name="M:GLSharp.Joystic.GetDevice(System.UInt32,GLSharp.win32.MmError@)">
            <summary>
            指定したIDのジョイスティックを取得する。
            取得できなかった場合はnullが返される。
            </summary>
            <param name="joysticID">ジョイスティックのID (0,1,...)</param>
            <param name="error">デバイスを取得できなかった場合は、その原因を表すエラーが返される。</param>
            <returns>
            取得したジョイスティック。
            取得できなかった場合はnullが返される。
            </returns>
        </member>
        <member name="M:GLSharp.Joystic.#ctor(System.UInt32)">
            <summary>
            初期化する。
            必ずGetCaps()でデバイスの性能を取得すること。
            でないと、軸の位置がきちんと取得できない。
            </summary>
            <param name="joysticID">ジョイスティックのID(0,1,...)。</param>
        </member>
        <member name="F:GLSharp.Joystic.caps">
            <summary>
            <para>ジョイスティックのキャパシティ</para>
            <para>ただし、各軸の Max には、軸の最大値の代わりに半幅( (Max - Min)/2 )を格納しておく。</para>
            </summary>
        </member>
        <member name="M:GLSharp.Joystic.GetCaps">
            <summary>
            ジョイスティックの性能を取得する。
            </summary>
        </member>
        <member name="M:GLSharp.Joystic.GetState">
            <summary>
            <para>ジョイスティックの状態を取得する。</para>
            <para>State, LastState, DownedButtons, UppedButtons プロパティが更新される。</para>
            </summary>
        </member>
        <member name="M:GLSharp.Joystic.Capture(System.IntPtr,System.Int32)">
            <summary>
            <para>ジョイスティックをキャプチャする。</para>
            <para>キャプチャすると、
            ジョイスティックが操作されたときに
            ウィンドウにイベントメッセージが送られるようになる。</para>
            </summary>
            <param name="hWnd">ウィンドウのハンドル</param>
            <param name="period">ポーリング周期[ms]</param>
            <returns>
            キャプチャに成功した場合はtrue、失敗した場合はfalse。
            </returns>
        </member>
        <member name="M:GLSharp.Joystic.ReleaseCapture">
            <summary>
            <para>キャプチャしたジョイスティックを解放する。</para>
            <para>キャプチャされていない(=Capturedプロパティがfalse)場合は何も行われない。</para>
            </summary>
        </member>
        <member name="M:GLSharp.Joystic.System#IDisposable#Dispose">
            <summary>
            <para>キャプチャしたジョイスティックを解放する。</para>
            <para>（キャプチャされていない状態で呼び出された場合は、何も行われない。）</para>
            </summary>
        </member>
        <member name="P:GLSharp.Joystic.NumSupportedDevices">
            <summary>
            <para>[get] システムでサポートされているジョイスティックの数。</para>
            <para>サポートされていない場合は0を返す。</para>
            </summary>
        </member>
        <member name="P:GLSharp.Joystic.ID">
            <summary>
            [get] このジョイスティックのID
            </summary>
        </member>
        <member name="P:GLSharp.Joystic.ManufactureID">
            <summary>
            [get]
            </summary>
        </member>
        <member name="P:GLSharp.Joystic.ProductID">
            <summary>
            [get]
            </summary>
        </member>
        <member name="P:GLSharp.Joystic.ProductName">
            <summary>
            [get]
            </summary>
        </member>
        <member name="P:GLSharp.Joystic.RegKey">
            <summary>
            [get]
            </summary>
        </member>
        <member name="P:GLSharp.Joystic.OemVxd">
            <summary>
            [get]
            </summary>
        </member>
        <member name="P:GLSharp.Joystic.NumButtons">
            <summary>
            [get]
            </summary>
        </member>
        <member name="P:GLSharp.Joystic.NumSupportedButtons">
            <summary>
            [get]
            </summary>
        </member>
        <member name="P:GLSharp.Joystic.NumAxes">
            <summary>
            [get]
            </summary>
        </member>
        <member name="P:GLSharp.Joystic.NumSupportedAxes">
            <summary>
            [get]
            </summary>
        </member>
        <member name="P:GLSharp.Joystic.PollingPeriodMin">
            <summary>
            [get]
            </summary>
        </member>
        <member name="P:GLSharp.Joystic.PollingPeriodMax">
            <summary>
            [get]
            </summary>
        </member>
        <member name="P:GLSharp.Joystic.Caps">
            <summary>
            [get]
            </summary>
        </member>
        <member name="P:GLSharp.Joystic.State">
            <summary>
            <para>[get]ジョイスティックの状態。</para>
            <para>GetJoysticState()によって更新される。</para>
            </summary>
        </member>
        <member name="P:GLSharp.Joystic.LastState">
            <summary>
            <para>[get] ジョイスティックの１つ前の状態。</para>
            <para>GetJoysticState()によって更新される。</para>
            </summary>
        </member>
        <member name="P:GLSharp.Joystic.DownedButtons">
            <summary>
            <para>[get] 押されたボタン。</para>
            <para>GetJoysticState()によって更新される。</para>
            </summary>
        </member>
        <member name="P:GLSharp.Joystic.UppedButtons">
            <summary>
            <para>離されたボタンを取得する。</para>
            <para>GetJoysticState()によって更新される。</para>
            </summary>
        </member>
        <member name="P:GLSharp.Joystic.LastError">
            <summary>
            <para>[get] 各操作で発生したエラー。</para>
            <para>取得すると NoError にリセットされる。</para>
            </summary>
        </member>
        <member name="P:GLSharp.Joystic.Captured">
            <summary>
            <para>[get] キャプチャされているかどうかを取得する。</para>
            <para>Capture() メソッドが成功するとtrueに設定される。</para>
            </summary>
        </member>
        <member name="T:GLSharp.BufferObject">
            <summary>
            <para>バッファオブジェクトを表すクラス。</para>
            <para>使用するためには、実行環境で
            エクステンション"GL_ARB_vertex_buffer_object"がサポートされている必要がある。</para>
            </summary>
        </member>
        <member name="M:GLSharp.BufferObject.#ctor(OpenTK.Graphics.OpenGL.BufferTarget)">
            <summary>
            <para>バッファオブジェクトを作成する。</para>
            <para>このバッファオブジェクトの識別名はコンストラクタ内で割り当てられる。</para>
            </summary>
            <param name="target">データの種類</param>
        </member>
        <member name="M:GLSharp.BufferObject.GenBuffers(System.Int32,OpenTK.Graphics.OpenGL.BufferTarget)">
            <summary>
            識別名が割り当てられたバッファオブジェクトを作成する。
            </summary>
            <param name="numBuffers">作成するバッファオブジェクトの数</param>
            <param name="target">データの種類</param>
            <returns>作成されたバッファオブジェクト</returns>
        </member>
        <member name="M:GLSharp.BufferObject.Bind">
            <summary>
            このバッファオブジェクトをバインドし、アクティブにする。
            </summary>
        </member>
        <member name="M:GLSharp.BufferObject.Data``1(``0[],System.Int32,OpenTK.Graphics.OpenGL.BufferUsageHint)">
            <summary>
            データを格納する領域を確保・初期化する。
            </summary>
            <param name="data">バッファに格納するデータ</param>
            <param name="size">頂点ごとの要素の数</param>
            <param name="usage">データがどのように使用されるかについてのヒント</param>
            <typeparam name="T">データの要素の型</typeparam>
        </member>
        <member name="M:GLSharp.BufferObject.Data``1(``0[0:,0:],OpenTK.Graphics.OpenGL.BufferUsageHint)">
            <summary>
            データを格納する領域を確保・初期化する。
            </summary>
            <param name="data">バッファに格納するデータ</param>
            <param name="usage">データがどのように使用されるかについてのヒント</param>
            <typeparam name="T">データの要素の型</typeparam>
        </member>
        <member name="M:GLSharp.BufferObject.Data``1(System.Int32,System.Int32,OpenTK.Graphics.OpenGL.BufferUsageHint)">
            <summary>
            <para>データを格納する領域を確保する。
            初期化は行われない。</para>
            <para>lenght * sizeof( typeof(T) ) [byte]ぶんのサイズが確保される。</para>
            </summary>
            <param name="length">バッファに格納するデータの要素数。</param>
            <param name="size">頂点ごとの要素の数</param>
            <param name="usage">データがどのように使用されるかについてのヒント</param>
            <typeparam name="T">データの要素の型</typeparam>
        </member>
        <member name="M:GLSharp.BufferObject.SubData``1(System.Int32,``0[])">
            <summary>
            指定したデータでバッファ内のデータを更新する。
            </summary>
            <param name="offset">更新するデータの開始位置</param>
            <param name="data">バッファに書き込むデータ</param>
            <typeparam name="T">データの要素の型</typeparam>
        </member>
        <member name="M:GLSharp.BufferObject.SubData``1(System.Int32,``0[0:,0:])">
            <summary>
            指定したデータでバッファ内のデータを更新する。
            </summary>
            <param name="offset">更新するデータの開始位置</param>
            <param name="data">バッファに書き込むデータ</param>
            <typeparam name="T">データの要素の型</typeparam>
        </member>
        <member name="M:GLSharp.BufferObject.Map(OpenTK.Graphics.OpenGL.BufferAccess)">
            <summary>
            <para>バッファオブジェクトのデータ領域へのポインタを取得する。</para>
            <para>データ領域へのアクセスが完了したら、Unmapメソッドでアンマップすること。</para>
            </summary>
            <param name="access">データに対して行う操作の種類</param>
            <returns></returns>
            <remarks>
            <example>
            BufferObject&lt;float&gt; の場合の、マップしたデータへのアクセス例。
            <code>
            unsafe
            {
                //IntPtrからfloat*へキャスト
                float* data = (float*)bufferObject.Map( BufferAccess.ReadOnly );
                if( data != null )
                {
                    //データは、numCoords個の座標{ x0, y0, z0, x1, y1, z1, ... }が格納されている（ことにする）。
                    int numCoords = bufferObject.DataLength / 3;
                    for( int i = 0; i &lt; numCoords; i++ )
                    {
                        data[3 * i + 2] *= 2.0f; /* z値を変更 */
                    }
                    bufferObject.Unmap();
                }
            }
            </code>
            </example>
            </remarks>
            <seealso cref="M:GLSharp.BufferObject.Unmap"/>
        </member>
        <member name="M:GLSharp.BufferObject.Unmap">
            <summary>
            マップされているバッファをアンマップする。
            </summary>
            <seealso cref="M:GLSharp.BufferObject.Map(OpenTK.Graphics.OpenGL.BufferAccess)"/>
        </member>
        <member name="M:GLSharp.BufferObject.Dispose">
            <summary>
            <para>このバッファオブジェクトを削除する。</para>
            <para>IDプロパティは0にリセットされる。</para>
            </summary>
        </member>
        <member name="P:GLSharp.BufferObject.ID">
            <summary>
            このバッファオブジェクトの識別名を取得する。
            </summary>
        </member>
        <member name="P:GLSharp.BufferObject.DataElementType">
            <summary>
            <para>バッファデータに格納される要素の型を取得する。</para>
            <para>void Data&lt;T&gt;( T[,] data, BufferUsageHint usage )で指定されたTの型が設定される。</para>
            </summary>
        </member>
        <member name="P:GLSharp.BufferObject.Target">
            <summary>
            このバッファオブジェクトの種類を取得する。
            </summary>
        </member>
        <member name="P:GLSharp.BufferObject.Usage">
            <summary>
            <para>データがどのように使用されるかについてのヒントを取得する。</para>
            <para>void Data&lt;T&gt;( T[] data, BufferUsageHint usage )で指定されたusageの値が設定される。</para>
            </summary>
        </member>
        <member name="P:GLSharp.BufferObject.BufferSize">
            <summary>
            <para>バッファのサイズ[byte]を取得する。</para>
            <para>void Data&lt;T&gt;( T[] data, BufferUsageHint usage )で指定されたdataのサイズが設定される。</para>
            </summary>
        </member>
        <member name="P:GLSharp.BufferObject.DataElementSize">
            <summary>
            <para>バッファに格納される要素のサイズを取得する。</para>
            <para>このインスタンスの型BufferObject&lt;T&gt;の型パラメータTのサイズ。</para>
            </summary>
        </member>
        <member name="P:GLSharp.BufferObject.DataLength">
            <summary>
            <para>バッファに格納された要素の数を取得する。</para>
            <para>void Data&lt;T&gt;( T[] data, BufferUsageHint usage )で指定されたdataの要素数(data.Length)が設定される。</para>
            </summary>
        </member>
        <member name="P:GLSharp.BufferObject.DataSize">
            <summary>
            <para>バッファに格納されたデータの頂点ごとの要素の数を取得する。</para>
            <para>void Data&lt;T&gt;( T[,] data, BufferUsageHint usage )で指定されたdataの1次元目の要素数(data.GetLength(1))が設定される。</para>
            <para>void Data&lt;T&gt;( T[] data, BufferUsageHint usage )を使用した場合は1が設定される。</para>
            <para>void Data&lt;T&gt;( int length, int size, BufferUsageHint usage )を使用した場合はsizeの値が設定される。</para>
            </summary>
        </member>
        <member name="T:GLSharp.IArrayDataKey">
            <summary>
            
            </summary>
        </member>
        <member name="T:GLSharp.ArrayDataKey">
            <summary>
            IArrayDataの派生クラスと関連づけるためのキーを表すクラス。
            </summary>
            <remarks>
            新しい種類のキーを追加したい場合は、
            このクラスの派生クラスを作成して追加する。
            <example>
            private static ArrayDataKey key = new ArrayDataKey();
            public static IArrayDataKey Key
            { get { return key; } }
            </example>
            </remarks>
        </member>
        <member name="T:GLSharp.IArrayData">
            <summary>
            
            </summary>
        </member>
        <member name="T:GLSharp.ArrayData`1">
            <summary>
            
            </summary>
            <typeparam name="ArrayType"></typeparam>
        </member>
        <member name="M:GLSharp.ArrayData`1.#ctor(OpenTK.Graphics.OpenGL.EnableCap)">
            <summary>
            
            </summary>
            <param name="enableArrayClientStateCap"></param>
        </member>
        <member name="M:GLSharp.ArrayData`1.#ctor(OpenTK.Graphics.OpenGL.EnableCap,`0,System.Int32)">
            <summary>
            
            </summary>
            <param name="enableArrayClientStateCap"></param>
            <param name="data"></param>
            <param name="stride"></param>
        </member>
        <member name="M:GLSharp.ArrayData`1.CreateBufferObject(OpenTK.Graphics.OpenGL.BufferUsageHint)">
            <summary>
            Dataプロパティに設定されているデータを元にバッファオブジェクトを作成する。
            </summary>
            <param name="usage">データがどのように使用されるかについてのヒントデータがどのように使用されるかについてのヒント</param>
        </member>
        <member name="P:GLSharp.ArrayData`1.Data">
            <summary>
            [get,set]
            </summary>
        </member>
        <member name="P:GLSharp.ArrayData`1.GLSharp#IArrayData#Data">
            <summary>
            [get,set]
            </summary>
        </member>
        <member name="P:GLSharp.ArrayData`1.Enabled">
            <summary>
            <para>[get,set]</para>
            <para>デフォルトはtrue。</para>
            </summary>
        </member>
        <member name="P:GLSharp.ArrayData`1.DataStride">
            <summary>
            [get,set]
            </summary>
        </member>
        <member name="P:GLSharp.ArrayData`1.Buffer">
            <summary>
            <para>[get] バッファオブジェクトを取得する。</para>
            <para>バッファオブジェクトはCreateBufferObjectメソッドによって作成される。</para>
            </summary>
        </member>
        <member name="T:GLSharp.VertexArray">
            <summary>
            頂点配列と、頂点配列を格納したバッファオブジェクトを表す。
            </summary>
        </member>
        <member name="M:GLSharp.VertexArray.SetPointer">
            <summary>
            頂点配列をセットする。
            </summary>
        </member>
        <member name="M:GLSharp.VertexArray.CreateBufferObject(System.Single[0:,0:],OpenTK.Graphics.OpenGL.BufferUsageHint)">
            <summary>
            バッファオブジェクトを作成する。
            </summary>
            <param name="data">バッファに格納するデータ</param>
            <param name="usage">データがどのように使用されるかについてのヒント</param>
        </member>
        <member name="M:GLSharp.VertexArray.SetBuffer">
            <summary>
            バッファオブジェクトをセットする。
            </summary>
        </member>
        <member name="M:GLSharp.NormalArray.CreateBufferObject(System.Single[0:,0:],OpenTK.Graphics.OpenGL.BufferUsageHint)">
            <summary>
            バッファオブジェクトを作成する。
            </summary>
            <param name="data">バッファに格納するデータ</param>
            <param name="usage">データがどのように使用されるかについてのヒント</param>
        </member>
        <member name="M:GLSharp.ColorArray.CreateBufferObject(System.Single[0:,0:],OpenTK.Graphics.OpenGL.BufferUsageHint)">
            <summary>
            バッファオブジェクトを作成する。
            </summary>
            <param name="data">バッファに格納するデータ</param>
            <param name="usage">データがどのように使用されるかについてのヒント</param>
        </member>
        <member name="M:GLSharp.SecondaryColorArray.CreateBufferObject(System.Single[0:,0:],OpenTK.Graphics.OpenGL.BufferUsageHint)">
            <summary>
            バッファオブジェクトを作成する。
            </summary>
            <param name="data">バッファに格納するデータ</param>
            <param name="usage">データがどのように使用されるかについてのヒント</param>
        </member>
        <member name="M:GLSharp.TexCoordArray.CreateBufferObject(System.Single[0:,0:],OpenTK.Graphics.OpenGL.BufferUsageHint)">
            <summary>
            バッファオブジェクトを作成する。
            </summary>
            <param name="data">バッファに格納するデータ</param>
            <param name="usage">データがどのように使用されるかについてのヒント</param>
        </member>
        <member name="M:GLSharp.FogCoordArray.CreateBufferObject(System.Single[],OpenTK.Graphics.OpenGL.BufferUsageHint)">
            <summary>
            バッファオブジェクトを作成する。
            </summary>
            <param name="data">バッファに格納するデータ</param>
            <param name="usage">データがどのように使用されるかについてのヒント</param>
        </member>
        <member name="M:GLSharp.EdgeFlagArray.CreateBufferObject(System.Byte[],OpenTK.Graphics.OpenGL.BufferUsageHint)">
            <summary>
            バッファオブジェクトを作成する。
            </summary>
            <param name="data">バッファに格納するデータ</param>
            <param name="usage">データがどのように使用されるかについてのヒント</param>
        </member>
        <member name="T:GLSharp.PrimitiveType">
            <summary>
            <para>プリミティブの種類</para>
            </summary>
        </member>
        <member name="F:GLSharp.PrimitiveType.Polygon">
            <summary>
            ポリゴン
            </summary>
        </member>
        <member name="F:GLSharp.PrimitiveType.Line">
            <summary>
            線
            </summary>
        </member>
        <member name="F:GLSharp.PrimitiveType.Point">
            <summary>
            点
            </summary>
        </member>
        <member name="T:GLSharp.AABB">
            <summary>
            AABB(Axis Aligned Bounding Box)を表すクラス。
            </summary>
        </member>
        <member name="F:GLSharp.AABB.min">
            <summary>
            内包する頂点群の(x,y,z)座標の最小値
            </summary>
        </member>
        <member name="F:GLSharp.AABB.max">
            <summary>
            内包する頂点群の(x,y,z)座標の最大値
            </summary>
        </member>
        <member name="F:GLSharp.AABB.center">
            <summary>
            中心座標
            </summary>
        </member>
        <member name="F:GLSharp.AABB.width">
            <summary>
            x方向の幅
            </summary>
        </member>
        <member name="F:GLSharp.AABB.height">
            <summary>
            y方向の高さ
            </summary>
        </member>
        <member name="F:GLSharp.AABB.depth">
            <summary>
            z方向の長さ
            </summary>
        </member>
        <member name="F:GLSharp.AABB.vertexes">
            <summary>
            <para>このAABBを表す直方体の各頂点の座標</para>
            <para>nullの場合、innerBBは別としてこのAABB自身は頂点を内包していないことを表す。</para>
            </summary>
        </member>
        <member name="F:GLSharp.AABB.innerAABB">
            <summary>
            内包するAABB
            </summary>
        </member>
        <member name="M:GLSharp.AABB.#ctor">
            <summary>
            AABBクラスの新しいインスタンスを初期化する。
            </summary>
        </member>
        <member name="M:GLSharp.AABB.#ctor(System.Single[],System.Single[])">
            <summary>
            AABBクラスの新しいインスタンスを初期化する。
            </summary>
            <param name="min">内包する頂点群の(x,y,z)座標の最小値</param>
            <param name="max">内包する頂点群の(x,y,z)座標の最大値</param>
        </member>
        <member name="M:GLSharp.AABB.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            AABBクラスの新しいインスタンスを初期化する。
            </summary>
            <param name="minX">内包する頂点群のx座標の最小値</param>
            <param name="minY">内包する頂点群のy座標の最小値</param>
            <param name="minZ">内包する頂点群のz座標の最小値</param>
            <param name="maxX">内包する頂点群のx座標の最大値</param>
            <param name="maxY">内包する頂点群のy座標の最大値</param>
            <param name="maxZ">内包する頂点群のz座標の最大値</param>
        </member>
        <member name="M:GLSharp.AABB.#ctor(System.Single[][])">
            <summary>
            指定した頂点群を内包するAABBとして、AABBクラスの新しいインスタンスを初期化する。
            </summary>
            <param name="vertexes">AABBクラスの新しいインスタンスが内包する頂点群</param>
        </member>
        <member name="M:GLSharp.AABB.#ctor(GLSharp.AABB[])">
            <summary>
            指定したAABBを内包するAABBを作成する。
            </summary>
            <param name="aabb">内包されるAABB</param>
        </member>
        <member name="M:GLSharp.AABB.Clone">
            <summary>
            このインスタンスのクローンを作成する。
            </summary>
            <returns>このインスタンスのクローン。</returns>
        </member>
        <member name="M:GLSharp.AABB.Clone(System.Boolean)">
            <summary>
            このインスタンスのクローンを作成する。
            </summary>
            <param name="cloneInnerAABB">innerBBをコピーするかどうかの指定</param>
            <returns>このインスタンスのクローン。</returns>
        </member>
        <member name="M:GLSharp.AABB.TransformVertexes(System.Single[])">
            <summary>
            このAABBの各頂点と、内包するAABBを、
            指定した行列で座標変換する。
            </summary>
            <param name="matrix"></param>
        </member>
        <member name="M:GLSharp.AABB.GenVertexesTransformed(System.Single[])">
            <summary>
            このAABBの各頂点と、内包するAABBを、
            指定した行列で座標変換したものを、新しいインスタンスとして取得する。
            </summary>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:GLSharp.AABB.op_Addition(GLSharp.AABB,GLSharp.AABB)">
            <summary>
            2つのAABBを内包する新しいAABBのインスタンスを取得する。
            </summary>
            <param name="bb1">AABBクラスのインスタンス</param>
            <param name="bb2">AABBクラスのインスタンス</param>
            <returns>2つのAABBを内包する新しいAABB</returns>
            <remarks>
            <para>足しあわせるAABB（bb1及びbb2）のinnerBBフィールドに格納されている子AABBは階層構造にはならず、
            戻り値として返されるインスタンスのinnerBBに格納される。</para>
            </remarks>
        </member>
        <member name="M:GLSharp.AABB.BuildVertexes">
            <summary>
            min、maxの値を元に、AABBの各頂点を作成する。
            </summary>
        </member>
        <member name="M:GLSharp.AABB.MeasureMinMax">
            <summary>
            vertexesとinnerBBから、minとmaxを再計算する。
            </summary>
        </member>
        <member name="M:GLSharp.AABB.Draw(GLSharp.PrimitiveType)">
            <summary>
            このAABBを描画します。
            </summary>
            <param name="mode">描画モード。"|"演算子で組み合わせ可能。</param>
        </member>
        <member name="T:GLSharp.ViewVolume">
            <summary>
            視錐体を表すクラス。
            </summary>
            <remarks>試作中。</remarks>
        </member>
        <member name="M:GLSharp.ViewVolume.Draw(OpenTK.Graphics.OpenGL.PolygonMode)">
            <summary>
            この視錐体を描画します。
            </summary>
            <param name="mode">描画モード。 FILL:ポリゴン、LINE:ワイヤーフレーム、POINT:頂点。"|"演算子で組み合わせ可能。</param>
        </member>
        <member name="T:GLSharp.OrthoViewVolume">
            <remarks>試作中。</remarks>
        </member>
        <member name="M:GLSharp.OrthoViewVolume.#ctor(System.Double[],System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            正射影のビューボリュームを作成する。
            </summary>
            <param name="eyePosition">視点の座標</param>
            <param name="up">視線の上方向を表すベクトル</param>
            <param name="direction">視線の向き</param>
            <param name="left">視野の左側の幅</param>
            <param name="right">視野の右側の幅</param>
            <param name="top">視野の上側の高さ</param>
            <param name="bottom">視野の下側の高さ</param>
            <param name="zNear">手前のクリップ面までの距離</param>
            <param name="zFar">奥のクリップ面までの距離</param>
        </member>
        <member name="M:GLSharp.OrthoViewVolume.#ctor(System.Double[],System.Double[],System.Double[],System.Double[][])">
            <summary>
            指定した頂点群を内包する正射影のビューボリュームを作成する。
            </summary>
            <param name="eyePosition"></param>
            <param name="up">視線の上方向を表すベクトル</param>
            <param name="direction">視線の向き</param>
            <param name="vertexes"></param>
        </member>
        <member name="M:GLSharp.OrthoViewVolume.#ctor(System.Double[],System.Double[],System.Double[],System.Single[][])">
            <summary>
            指定した頂点群を内包する正射影のビューボリュームを作成する。
            </summary>
            <param name="eyePosition"></param>
            <param name="up">視線の上方向を表すベクトル</param>
            <param name="direction">視線の向き</param>
            <param name="vertexes"></param>
        </member>
        <member name="T:GLSharp.PerspectiveViewVolume">
            <remarks>試作中。</remarks>
        </member>
        <member name="M:GLSharp.PerspectiveViewVolume.#ctor(System.Double[],System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double)">
            <summary>
            透視射影のビューボリュームを作成する。
            </summary>
            <param name="eyePosition">視点の座標</param>
            <param name="up">視線の上方向を表すベクトル</param>
            <param name="direction">視線の向き</param>
            <param name="fovy">上下方向の視野角 [degree]</param>
            <param name="aspectRatio">視野のアスペクト比</param>
            <param name="zNear">手前のクリップ面までの距離</param>
            <param name="zFar">奥のクリップ面までの距離</param>
        </member>
        <member name="T:GLSharp.OutlineFontTessellator">
            <summary>
            アウトラインフォントの文字をポリゴン（メッシュ）化するクラス。
            </summary>
        </member>
        <member name="F:GLSharp.OutlineFontTessellator.numCurveSplit">
            <summary>
            アウトラインフォントをポリゴン化する際の、文字のカーブ部の分割数。
            分割数が多いほど曲線がスムーズになるが、その分だけポリゴン数が多くなる。
            デフォルトは4。
            </summary>
        </member>
        <member name="M:GLSharp.OutlineFontTessellator.Tessellate(System.IntPtr,System.Drawing.Font,System.Single,System.Single,System.Char,System.Boolean,System.Boolean,GLSharp.Material,GLSharp.GlyphMetricsFloat@)">
            <summary>
            アウトラインフォントの文字をポリゴン化したメッシュを作成する。
            </summary>
            <param name="hdc">デバイスコンテキストのハンドル</param>
            <param name="font">フォント</param>
            <param name="size">サイズ</param>
            <param name="extrusion">文字モデルの奥行き幅</param>
            <param name="c">ポリゴン化する文字</param>
            <param name="setTextureUVCoords">テクスチャを貼るためのUV座標を設定するかどうかの指定</param>
            <param name="createBackAndSideFaces">側面と底面を作成するかどうかの指定</param>
            <param name="material">文字モデルのマテリアル</param>
            <param name="gmf">アウトラインフォントの文字グリフのメトリックが返される。</param>
            <remarks>
            引数"c"は、'\r'、'\t'非対応。
            引数"font"は、縦書きフォントも使用可能。
            文字モデルのサイズは、フォントのサイズでは指定できない。
            引数"size"で指定すること。
            </remarks>
        </member>
        <member name="M:GLSharp.OutlineFontTessellator.Tessellate(System.IntPtr,System.Drawing.Font,System.Single,System.Single,System.Char,GLSharp.Material,GLSharp.GlyphMetricsFloat@)">
            <summary>
            アウトラインフォントの文字をポリゴン化したメッシュを作成する。
            </summary>
            <param name="hdc">デバイスコンテキストのハンドル</param>
            <param name="font">フォント</param>
            <param name="size">サイズ</param>
            <param name="extrusion">文字モデルの奥行き幅</param>
            <param name="c">ポリゴン化する文字</param>
            <param name="material">文字モデルのマテリアル</param>
            <param name="gmf">アウトラインフォントの文字グリフのメトリックが返される。</param>
            <remarks>
            引数"c"は、'\r'、'\t'非対応。
            引数"font"は、縦書きフォントも使用可能。
            文字モデルのサイズは、フォントのサイズでは指定できない。
            引数"size"で指定すること。
            </remarks>
        </member>
        <member name="M:GLSharp.OutlineFontTessellator.BuildBottomAndSidePolygons(GLSharp.Contour[],GLSharp.Mesh,System.Single)">
            <summary>
            底面と側面を作成する。
            </summary>
            <param name="contour">文字の輪郭線</param>
            <param name="mesh">底面と側面を作成するメッシュ</param>
            <param name="extrusion">文字の厚さ</param>
        </member>
        <member name="M:GLSharp.OutlineFontTessellator.SetPrimitiveUV(GLSharp.Mesh,System.Boolean,System.Single,System.Boolean)">
            <summary>
            作成した文字のメッシュにテクスチャのUV座標を設定する。
            </summary>
            <param name="mesh">UV座標を設定するメッシュ</param>
            <param name="fitToModel">テクスチャをモデルにフィットさせるかどうかの指定</param>
            <param name="size">文字モデルのサイズ</param>
            <param name="verticalFont">縦書きフォントならtrueを指定する</param>
        </member>
        <member name="M:GLSharp.OutlineFontTessellator.GetGlyphShape(System.IntPtr,System.Drawing.Font,System.Single,System.Char,System.Int32,GLSharp.GlyphMetricsFloat@)">
            <summary>
            アウトラインフォントの輪郭形状を取得する。
            </summary>
            <param name="hdc">デバイスコンテキストのハンドル</param>
            <param name="f">フォント</param>
            <param name="size">サイズ</param>
            <param name="c">輪郭形状を取得する文字</param>
            <param name="curveSplitNum">輪郭線のカーブ部の分割数</param>
            <param name="gmf">文字の形状</param>
            <returns>アウトラインフォントの輪郭線</returns>
        </member>
        <member name="M:GLSharp.OutlineFontTessellator.BSpline2D(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            2次B-スプライン曲線上の点を求める。
            １次元、制御点1つ。
            </summary>
            <param name="p1">曲線の開始点</param>
            <param name="p2">制御点</param>
            <param name="p3">曲線の終点</param>
            <param name="t">パラメータ　0 &lt;= t &lt;= 1</param>
            <returns>2次B-スプライン曲線上の点</returns>
        </member>
        <member name="M:GLSharp.OutlineFontTessellator.BSpline2D(GLSharp.POINTFX,GLSharp.POINTFX[],System.Int32)">
            <summary>
            2次B-スプライン曲線上の点を求める。
            複数制御点。
            </summary>
            <param name="startPoint">曲線の開始点、1つ以上の制御点、終点</param>
            <param name="points">制御点</param>
            <param name="splitNum"></param>
            <returns>2次B-スプライン曲線上の点 double[][3]{x,y,z}</returns>
            <remarks>戻り値は都合上、{x,y,z}の3次元座標の配列。</remarks>
        </member>
        <member name="T:GLSharp.GLExtensionNames">
            <summary>
            <para>エクステンションの名前を文字列定数として定義したもの。</para>
            </summary>
        </member>
        <member name="F:GLSharp.FpstAccuracy.Low">
            <summary>
            <para>負荷は軽いが、精度は悪い。</para>
            </summary>
        </member>
        <member name="F:GLSharp.FpstAccuracy.Middle">
            <summary>
            <para>ほどほどの精度。CPUの負荷も比較的軽い。</para>
            </summary>
        </member>
        <member name="F:GLSharp.FpstAccuracy.High">
            <summary>
            <para>それなりの精度。</para>
            </summary>
        </member>
        <member name="F:GLSharp.FpstAccuracy.Heavy">
            <summary>
            <para>正確だが、CPUの負荷が大きい。</para>
            <para>(特に精度が必要な場合以外は、おすすめしない。）</para>
            </summary>
        </member>
        <member name="T:GLSharp.FpsTimer">
            <summary>
            フレームレート制御用タイマ
            </summary>
            <remarks>
            "YaneSDK" (http://yanesdkdotnet.sourceforge.jp/)より拝借。
            時間の取得にSDLを使用せずに
            System.Diagnostics.Stopwatchを使用するように変更。
            </remarks>
        </member>
        <member name="F:GLSharp.FpsTimer.fps">
            <summary>
            FPS(ディフォルトで60)
            </summary>
        </member>
        <member name="F:GLSharp.FpsTimer.frameInterval">
            <summary>
            = 1000/FPS [ms]。1フレームぶんの時間 
            </summary>
        </member>
        <member name="F:GLSharp.FpsTimer.lastDrawTime">
            <summary>
            前回の描画時刻
            </summary>
        </member>
        <member name="F:GLSharp.FpsTimer.drawTime">
            <summary>
            FPS測定用の描画時間計算用
            </summary>
        </member>
        <member name="F:GLSharp.FpsTimer.elapseTime">
            <summary>
            CPU Power測定用
            </summary>
        </member>
        <member name="F:GLSharp.FpsTimer.drawCount">
            <summary>
            <para>WaitFrameを呼び出された回数</para>
            <para>0 ~ 63 32 ~ 63</para>
            </summary>
        </member>
        <member name="F:GLSharp.FpsTimer.skipNextFrame">
            <summary>
            次のフレームはスキップするのか？
            </summary>
        </member>
        <member name="F:GLSharp.FpsTimer.skippedFramesCount">
            <summary>
            フレームスキップカウンタ
            </summary>
        </member>
        <member name="F:GLSharp.FpsTimer.skippedFramesCountNow">
            <summary>
            計測中のフレームスキップカウンタ
            </summary>
        </member>
        <member name="F:GLSharp.FpsTimer.continualFrameSkipCount">
            <summary>
            フレームスキップ10回に1回は強制描画する。そのためのカウンタ。
            </summary>
        </member>
        <member name="F:GLSharp.FpsTimer.timer">
            <summary>
            時間を計測するタイマ。
            </summary>
        </member>
        <member name="M:GLSharp.FpsTimer.Reset">
            <summary>
            時間計測を停止し、経過時間をゼロにリセットする。
            </summary>
        </member>
        <member name="M:GLSharp.FpsTimer.Start">
            <summary>
            時間計測を開始または再開する。
            </summary>
        </member>
        <member name="M:GLSharp.FpsTimer.Stop">
            <summary>
            時間計測を停止する。
            </summary>
        </member>
        <member name="F:GLSharp.FpsTimer.DisableWaitFrame">
            <summary>
            <para>trueを設定すると、
            FPSの値に関係なくWatFrame()がnon-wait modeになる。
            </para>
            <para>デフォルトはfalse。</para>
            </summary>
        </member>
        <member name="F:GLSharp.FpsTimer.Accuracy">
            <summary>
            <para>WaitFrame()の待機時間の精度。</para>
            <para>デフォルトは FpstAccuracy.Middle。</para>
            </summary>
        </member>
        <member name="F:GLSharp.FpsTimer.sleep1Sampled">
            <summary>
            <para>Thread.Sleep( 1 ); で、実際に待機した秒数[ms]。</para>
            <para>(たいていは1msにならない。)</para>
            </summary>
        </member>
        <member name="M:GLSharp.FpsTimer.SamplingSleep1ms">
            <summary>
            
            </summary>
        </member>
        <member name="M:GLSharp.FpsTimer.WaitFrame">
            <summary>
            <para>１フレーム分の時間が来るまで待つ。</para>
            </summary>
            <remarks>
            <para>メインループのなかでは、描画処理を行なったあと、
            このWaitFrame()を呼び出せば、FPSに設定された
            フレームレートに自動的に調整される。</para>
            <para>ToBeSkip プロパティも参照のこと。</para>
            </remarks>
        </member>
        <member name="F:GLSharp.FpsTimer.MillisecondsPerTick">
            <summary>
            このタイマのタイマ刻みあたりの秒数[ms]。
            実行環境に依存する。
            </summary>
        </member>
        <member name="P:GLSharp.FpsTimer.Fps">
            <summary>
            <para>[get,set] FPS (frames/sec)。</para>
            <para>ディフォルトでは60fps。0にするとnon-wait mode(FPS = ∞)</para>
            </summary>
        </member>
        <member name="P:GLSharp.FpsTimer.RealFps">
            <summary>
            <para>[get] FPS（測定値）</para>
            </summary>
            <remarks>
            1秒間に何回WaitFrameを呼び出すかを、
            前回32回の呼び出し時間の平均から算出する。
            </remarks>
        </member>
        <member name="P:GLSharp.FpsTimer.RealFpsInt">
            <summary>
            [get] FPSの取得(測定値、小数点以下を四捨五入した整数値)
            </summary>
            <remarks>
            getRealFpsの戻り値はfloatなので、こちらは、小数点以下を四捨五入して返すメソッド。
            </remarks>
        </member>
        <member name="P:GLSharp.FpsTimer.CpuPower">
            <summary>
            [get] CPU稼動率（測定値）[%]
            </summary>
            <remarks>
            CPUの稼働率に合わせて、0～100の間の値が返る。
            ただしこれは、WaitFrameでSleepした時間から算出されたものであって、
            あくまで参考値である。
            最新の16フレーム間で余ったCPU時間から計測する。16フレーム経過していない場合は100が返る。
            ただし、ここで言うフレームとは、waitFrameの呼び出しごとに１フレームと計算。
            </remarks>
        </member>
        <member name="P:GLSharp.FpsTimer.SkippedFrames">
            <summary>
            [get] スキップされたフレーム数
            </summary>
            <remarks>
            setFpsされた値までの描画に、ToBeSkipがtrueになっていた
            フレーム数を返す。ただし、ここで言うフレーム数とは、
            waitFrameの呼び出しごとに１フレームと計算。
            </remarks>
        </member>
        <member name="P:GLSharp.FpsTimer.ToBeSkip">
            <summary>
            スキップすべきかを示すフラグを返す。
            </summary>
            <remarks>
            while (true){
            	fpstimer.waitFrame();
            	if(!fpstimer.toBeSkip) Draw();
            }
            と書けば、1秒間にsetFPSで設定された回数だけDraw関数が呼び出される
            </remarks>
            <returns></returns>
        </member>
        <member name="P:GLSharp.FpsTimer.IsRunning">
            <summary>
            タイマが実行中かどうかを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.FpsTimer.ElapsedMilliseconds">
            <summary>
            <para>[get] 計測された経過時間の合計([ms])。</para>
            <para>精度はMillisecondsPerTickフィールドにより得られる。</para>
            </summary>
        </member>
        <member name="P:GLSharp.FpsTimer.ElapsedTicks">
            <summary>
            [get] 計測された経過時間の合計（タイマ刻み）。
            </summary>
        </member>
        <member name="T:GLSharp.PixelFormatAttributes">
            <summary>
            ピクセルフォーマットの属性を表す。
            PixelFormatDescriptorの補助的なもの。
            PixelFormatDescriptorだけでは指定できない拡張属性を扱う。
            </summary>
            <remarks>
            <para>PixelFormatDescriptorのメンバと重複する内容のプロパティは、取得のみ可。</para>
            </remarks>
        </member>
        <member name="M:GLSharp.PixelFormatAttributes.GetAttribARB(System.IntPtr,System.Int32,System.Int32,GLSharp.PixelFormatAttributes@)">
            <summary>
            <para>ピクセルフォーマットの属性を取得する。</para>
            </summary>
            <param name="hDC">デバイスコンテキストのハンドル</param>
            <param name="pixelFormat">属性を取得するピクセルフォーマットの番号</param>
            <param name="layerPlane">属性を取得するレイヤープレーンの番号(メインプレーンは0)</param>
            <param name="pfa">取得したピクセルフォーマットの属性が返される。</param>
            <returns>取得に成功した場合はtrue、失敗した場合はfalse。</returns>
        </member>
        <member name="M:GLSharp.PixelFormatAttributes.GetAttribARB(System.IntPtr,System.Int32,System.Int32,GLSharp.PixelFormatAttributes)">
            <summary>
            <para>ピクセルフォーマットの属性を取得する。</para>
            </summary>
            <param name="hDC">デバイスコンテキストのハンドル</param>
            <param name="pixelFormat">属性を取得するピクセルフォーマットの番号</param>
            <param name="layerPlane">属性を取得するレイヤープレーンの番号(メインプレーンは0)</param>
            <param name="pfa">属性が書き込まれるPixelFormatAttributesクラスのインスタンス。</param>
            <returns>取得に成功した場合はtrue、失敗した場合はfalse。</returns>
        </member>
        <member name="M:GLSharp.PixelFormatAttributes.ChoosePixelFormatArb(System.IntPtr,GLSharp.PixelFormatDescriptor,GLSharp.PixelFormatAttributes,GLSharp.RenderingContext,System.Int32@)">
            <summary>
            <para>ピクセルフォーマットを選択する。</para>
            <para>引数"pfd"と"pfa"で指定したものに最も近いフォーマットが選択され、
            "pfd"と"pfa"にはそのフォーマットの設定値が上書きされて返される。</para>
            </summary>
            <param name="hDC">デバイスコンテキストのハンドル</param>
            <param name="pfd">ピクセルフォーマット</param>
            <param name="pfa">ピクセルフォーマットの属性。PixelFormatDescriptorだけでは指定できない拡張属性を指定する。</param>
            <param name="context">レンダリングコンテキスト。エクステンション"WGL_ARB_pixel_format"をサポートしているかどうかをチェックするために必要。</param>
            <param name="pixelFormat">選択されたピクセルフォーマットの1から始まるインデックス。選択に失敗した場合は0が返される。</param>
            <returns>選択に成功した場合はtrue、失敗した場合はfalse。</returns>
        </member>
        <member name="M:GLSharp.PixelFormatAttributes.ChoosePixelFormat(System.IntPtr,GLSharp.PixelFormatDescriptor,GLSharp.PixelFormatAttributes,GLSharp.RenderingContext,System.Int32@)">
            <summary>
            <para>ピクセルフォーマットを選択する。</para>
            <para>引数"pfd"と"pfa"で指定したものに最も近いフォーマットが選択され、
            "pfd"と"pfa"にはそのフォーマットの設定値が上書きされて返される。</para>
            <para>エクステンション"WGL_ARB_pixel_format"がサポートされていない場合は"pfa"の設定は無視され、
            "pfd"のみでエクステンションを使用しないピクセルフォーマットが選択される。</para>
            </summary>
            <param name="hDC">デバイスコンテキストのハンドル</param>
            <param name="pfd">ピクセルフォーマット</param>
            <param name="pfa">ピクセルフォーマットの属性。PixelFormatDescriptorだけでは指定できない拡張属性を指定する。</param>
            <param name="pixelFormat">選択されたピクセルフォーマットの1から始まるインデックス。選択に失敗した場合は0が返される。</param>
            <param name="context">レンダリングコンテキスト。エクステンション"WGL_ARB_pixel_format"をサポートしているかどうかをチェックするために必要。</param>
            <returns>選択に成功した場合はtrue、失敗した場合はfalseが返される。</returns>
        </member>
        <member name="M:GLSharp.PixelFormatAttributes.GetAllPixelFormats(System.IntPtr,GLSharp.RenderingContext,System.Int32[]@,GLSharp.PixelFormatDescriptor[]@,GLSharp.PixelFormatAttributes[]@)">
            <summary>
            すべてのピクセルフォーマットを取得する。
            </summary>
            <param name="hDC">デバイスコンテキストのハンドル</param>
            <param name="context"></param>
            <param name="pixelFormatList"></param>
            <param name="pfdList"></param>
            <param name="pfaList"></param>
            <exception cref="T:System.ArgumentException">デバイスコンテキスト \"hDC\" が無効です。</exception>
            <exception cref="T:System.ArgumentNullException">\"context\" が null です。</exception>
        </member>
        <member name="M:GLSharp.PixelFormatAttributes.ToString">
            <summary>
            このインスタンスを表す文字列を取得する。
            </summary>
            <returns>このインスタンスを表す文字列</returns>
        </member>
        <member name="M:GLSharp.PixelFormatAttributes.ToString(System.Boolean)">
            <summary>
            このインスタンスを表す文字列を取得する。
            </summary>
            <param name="breakLine">文字列に改行を含める場合はtrue、そうでなければfalse。</param>
            <returns>このインスタンスを表す文字列</returns>
        </member>
        <member name="M:GLSharp.PixelFormatAttributes.Clone">
            <summary>
            クローンを作成する。
            </summary>
            <returns>このインスタンスのクローン。</returns>
        </member>
        <member name="P:GLSharp.PixelFormatAttributes.DrawToWindow">
            <summary>
            [get]
            </summary>
        </member>
        <member name="P:GLSharp.PixelFormatAttributes.DrawToBitmap">
            <summary>
            [get]
            </summary>
        </member>
        <member name="P:GLSharp.PixelFormatAttributes.Acceleration">
            <summary>
            [get, set]
            </summary>
        </member>
        <member name="P:GLSharp.PixelFormatAttributes.NeedPalette">
            <summary>
            [get, set]
            </summary>
        </member>
        <member name="P:GLSharp.PixelFormatAttributes.NeedSystemPalette">
            <summary>
            [get, set]
            </summary>
        </member>
        <member name="P:GLSharp.PixelFormatAttributes.SwapLayerBuffers">
            <summary>
            [get]
            </summary>
        </member>
        <member name="P:GLSharp.PixelFormatAttributes.SwapMethod">
            <summary>
            [get]
            </summary>
        </member>
        <member name="P:GLSharp.PixelFormatAttributes.NumberOverlays">
            <summary>
            [get]
            </summary>
        </member>
        <member name="P:GLSharp.PixelFormatAttributes.NumberUnderlays">
            <summary>
            [get]
            </summary>
        </member>
        <member name="P:GLSharp.PixelFormatAttributes.Transparent">
            <summary>
            [get, set]
            </summary>
        </member>
        <member name="P:GLSharp.PixelFormatAttributes.ShareDepth">
            <summary>
            [get, set]
            </summary>
        </member>
        <member name="P:GLSharp.PixelFormatAttributes.ShareStencil">
            <summary>
            [get, set]
            </summary>
        </member>
        <member name="P:GLSharp.PixelFormatAttributes.ShareAccum">
            <summary>
            [get, set]
            </summary>
        </member>
        <member name="P:GLSharp.PixelFormatAttributes.SupportGdi">
            <summary>
            [get]
            </summary>
        </member>
        <member name="P:GLSharp.PixelFormatAttributes.SupportOpengl">
            <summary>
            [get]
            </summary>
        </member>
        <member name="P:GLSharp.PixelFormatAttributes.DoubleBuffer">
            <summary>
            [get]
            </summary>
        </member>
        <member name="P:GLSharp.PixelFormatAttributes.Stereo">
            <summary>
            [get]
            </summary>
        </member>
        <member name="P:GLSharp.PixelFormatAttributes.ColorBits">
            <summary>
            [get]
            </summary>
        </member>
        <member name="P:GLSharp.PixelFormatAttributes.AccumBits">
            <summary>
            [get]
            </summary>
        </member>
        <member name="P:GLSharp.PixelFormatAttributes.DepthBits">
            <summary>
            [get]
            </summary>
        </member>
        <member name="P:GLSharp.PixelFormatAttributes.StencilBits">
            <summary>
            [get]
            </summary>
        </member>
        <member name="P:GLSharp.PixelFormatAttributes.AuxBuffers">
            <summary>
            [get]
            </summary>
        </member>
        <member name="P:GLSharp.PixelFormatAttributes.SampleBuffers">
            <summary>
            [get, set]
            </summary>
        </member>
        <member name="P:GLSharp.PixelFormatAttributes.Samples">
            <summary>
            [get, set]
            </summary>
        </member>
        <member name="P:GLSharp.PixelFormatAttributes.State">
            <summary>
            このインスタンスの持つ値が有効かどうかを取得します。
            </summary>
        </member>
        <member name="P:GLSharp.PixelFormatAttributes.PixelFormatIndex">
            <summary>
            <para>1から始まるピクセルフォーマットのインデックスを取得する。</para>
            <para>無効または未判定の場合は0。</para>
            </summary>
        </member>
        <member name="T:GLSharp.PFAState">
            <summary>
            PixelFormatAttributesのインスタンスが持つ値の状態を表す。
            </summary>
        </member>
        <member name="F:GLSharp.PFAState.NotSupported">
            <summary>
            エクステンションがサポートされていないため、使用不可能。
            </summary>
        </member>
        <member name="F:GLSharp.PFAState.Valid">
            <summary>
            有効。
            </summary>
        </member>
        <member name="F:GLSharp.PFAState.Invalid">
            <summary>
            無効。
            </summary>
        </member>
        <member name="F:GLSharp.PFAState.Undefined">
            <summary>
            不明。
            有効・無効の判定が行われていません。
            </summary>
        </member>
        <member name="T:GLSharp.PixelFormatAttributesTypeConverter">
            <summary>
            (PixelFormatAttributesをデザイナのプロパティブラウザで使用できるようにするためのクラス)
            </summary>
        </member>
        <member name="T:GLSharp.RenderingContext">
            <summary>
            OpenGLのレンダリングコンテキストを表すクラス
            </summary>
        </member>
        <member name="F:GLSharp.RenderingContext.createdContexts">
            <summary>
            key = hRC, value = RenderingContext
            </summary>
        </member>
        <member name="M:GLSharp.RenderingContext.GetContext(System.IntPtr)">
            <summary>
            現在有効なOpenGLレンダリングコンテキストを取得する。
            </summary>
            <param name="hRC"></param>
            <returns></returns>
        </member>
        <member name="M:GLSharp.RenderingContext.GetCurrentContext">
            <summary>
            現在のレンダリングコンテキストを取得する。
            </summary>
            <returns>レンダリングコンテキスト</returns>
        </member>
        <member name="F:GLSharp.RenderingContext.Tag">
            <summary>
            このインスタンスに関連付けられる任意のオブジェクト
            </summary>
        </member>
        <member name="F:GLSharp.RenderingContext.glExtentoins">
            <summary>
            サポートされているエクステンションのリスト(OpenGL, WGL)
            </summary>
        </member>
        <member name="F:GLSharp.RenderingContext.otkContext">
            <summary>
            <para>OpenTKのOpenGLレンダリングコンテキスト（ダミー）。</para>
            <para>OpenTK.Graphics.OpenGL.GLの初期化（OpenGL関数のエントリポイントの取得）に必要。</para>
            </summary>
        </member>
        <member name="M:GLSharp.RenderingContext.#ctor(System.IntPtr,GLSharp.PixelFormatDescriptor)">
            <summary>
            OpenGLのレンダリングコンテキストを作成する。
            </summary>
            <param name="hDC">デバイスコンテキストのハンドル</param>
            <param name="pfd">PixelFormatDescriptor</param>
        </member>
        <member name="M:GLSharp.RenderingContext.#ctor(System.IntPtr,GLSharp.PixelFormatDescriptor,GLSharp.PixelFormatAttributes,GLSharp.RenderingContext)">
            <summary>
            <para>OpenGLのレンダリングコンテキストを作成する。</para>
            <para>エクステンション（アンチエイリアス等）を使用しない場合は、引数"pfa"はnullにしておく。</para>
            <para>"pfa"を指定する場合、dummyContextで渡されたコンテキストを使用して、適切なピクセルフォーマットが選択される。
            dummyContextにnullを指定すると、内部でダミーのウィンドウとコンテキストが作成・使用され、使用後に破棄される。</para>
            <para>引数"pfd"と"pfa"で指定されたものにもっとも近いものが選択され、"pfd"と"pfa"に上書きされて返される。</para>
            </summary>
            <param name="hDC">デバイスコンテキストのハンドル</param>
            <param name="pfd">ピクセルフォーマット</param>
            <param name="pfa">ピクセルフォーマットの属性。エクステンション（アンチエイリアス等）を使用しない場合はnull。</param>
            <param name="dummyContext"><para>ピクセルフォーマットの選択に使用されるコンテキスト。
            nullを渡すと必要に応じて内部で作成されるので、nullでもよい。</para>
            <para>拡張機能（FSAAなど）を利用する場合に使用される。"pfa"がnullの場合は使用されないのでnullでよい。</para></param>
        </member>
        <member name="M:GLSharp.RenderingContext.#ctor(System.Windows.Forms.Control,GLSharp.PixelFormatDescriptor)">
            <summary>
            OpenGLのレンダリングコンテキストを作成する。
            </summary>
            <param name="control">OpenGLで描画する対象となる、フォームやコントロール</param>
            <param name="pfd">PixelFormatDescriptor</param>
        </member>
        <member name="M:GLSharp.RenderingContext.#ctor(System.Windows.Forms.Control,GLSharp.PixelFormatDescriptor,GLSharp.PixelFormatAttributes,GLSharp.RenderingContext)">
            <summary>
            <para>OpenGLのレンダリングコンテキストを作成する。</para>
            <para>エクステンション（アンチエイリアス等）を使用しない場合は、引数"pfa"はnullにしておく。</para>
            <para>"pfa"を指定する場合、dummyContextで渡されたコンテキストを使用して、適切なピクセルフォーマットが選択される。
            dummyContextにnullを指定すると、内部でダミーのコントロールとコンテキストが作成・使用され、使用後に破棄される。</para>
            <para>引数"pfd"と"pfa"で指定されたものにもっとも近いものが選択され、"pfd"と"pfa"に上書きされて返される。</para>
            </summary>
            <param name="control">レンダリングコンテキストを作成するコントロール</param>
            <param name="pfd">ピクセルフォーマット</param>
            <param name="pfa">ピクセルフォーマットの属性。エクステンション（アンチエイリアス等）を使用しない場合はnull。</param>
            <param name="dummyContext">ピクセルフォーマットの選択に使用されるコンテキスト。"pfa"がnullの場合は使用されないのでnullでよい。</param>
        </member>
        <member name="M:GLSharp.RenderingContext.#ctor(System.Windows.Forms.Control)">
            <summary>
            OpenGLのレンダリングコンテキストを作成する。
            </summary>
            <param name="control">OpenGLで描画する対象となる、フォームやコントロール</param>
        </member>
        <member name="M:GLSharp.RenderingContext.MakeCurrent">
            <summary>
            このレンダリングコンテキストを、
            現在のレンダリングコンテキストに設定する。
            </summary>
        </member>
        <member name="M:GLSharp.RenderingContext.SwapBuffers">
            <summary>
            バックバッファの内容をフロントバッファに転送する。
            （ダブルバッファが無効な場合はglFlush()が呼ばれる。）
            </summary>
        </member>
        <member name="M:GLSharp.RenderingContext.Dispose">
            <summary>
            このレンダリングコンテキストを破棄する。
            </summary>
        </member>
        <member name="M:GLSharp.RenderingContext.SupportsExtension(System.String)">
            <summary>
            指定されたOpenGLまたはWGLのエクステンションがサポートされているかどうかを調べる。
            </summary>
            <param name="extentinName">エクステンションの名前</param>
            <returns>サポートされていればtrue、されていなければfalse。</returns>
        </member>
        <member name="M:GLSharp.RenderingContext.CopyContext(GLSharp.RenderingContext,OpenTK.Graphics.OpenGL.AttribMask)">
            <summary>
            このレンダリングコンテキストの設定を、
            指定したレンダリングコンテキストにコピーする。
            </summary>
            <param name="destinationContext">コピー先のレンダリングコンテキスト</param>
            <param name="mask">コピーする値</param>
        </member>
        <member name="M:GLSharp.RenderingContext.ShareLists(GLSharp.RenderingContext)">
            <summary>
            ディスプレイリストを、指定したレンダリングコンテキストと共有する。
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:GLSharp.RenderingContext.HDC">
            <summary>
            [get] デバイスコンテキストのハンドル
            </summary>
        </member>
        <member name="P:GLSharp.RenderingContext.HRC">
            <summary>
            [get] レンダリングコンテキストのハンドル
            </summary>
        </member>
        <member name="P:GLSharp.RenderingContext.PixelFormatIndex">
             <summary>
            [get]  このコンテキストのピクセルフォーマットのインデックス。
             </summary>
        </member>
        <member name="P:GLSharp.RenderingContext.PFD">
            <summary>
            [get] このコンテキストのピクセルフォーマットを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.RenderingContext.PFA">
            <summary>
            [get] このコンテキストのピクセルフォーマットの属性。
            </summary>
        </member>
        <member name="P:GLSharp.RenderingContext.PFASupported">
            <summary>
            [get] PixelFormatAttributesを使用したOpenGLレンダリングコンテキストの作成がサポートされているかどうか。
            </summary>
        </member>
        <member name="P:GLSharp.RenderingContext.SwapControlSupported">
            <summary>
            [get,set] 垂直同期をサポートしているかどうか。
            </summary>
        </member>
        <member name="P:GLSharp.RenderingContext.SwapInterval">
            <summary>
            <para>[get,set] 垂直同期のインターバル。
            0:垂直同期しない。 0以上:垂直同期する。
            </para>
            垂直同期がサポートされていなければ、設定しても無視され、常に0を返す。
            </summary>
        </member>
        <member name="P:GLSharp.RenderingContext.DoubleBuffer">
            <summary>
            このコンテキストでダブルバッファが有効かどうかを取得する。
            </summary>
        </member>
        <member name="T:GLSharp.TextureGlyph">
            <summary>
            文字が描かれたテクスチャ付きの四角形ポリゴンで文字を描画する。
            </summary>
        </member>
        <member name="M:GLSharp.TextureGlyph.ResetMetrics">
            <summary>
            Metricsプロパティの値を、デフォルトの値にリセットする。
            </summary>
        </member>
        <member name="M:GLSharp.TextureGlyph.Layout">
            <summary>
            子オブジェクトを持たないので、
            このインスタンスのMetricsプロパティの値がリセットされる（= ResetMetrics()が実行される）だけ。
            </summary>
        </member>
        <member name="T:GLSharp.TextureCharGlyph">
            <summary>
            文字が描かれたテクスチャ付きの四角形ポリゴンで文字を描画する。
            </summary>
        </member>
        <member name="F:GLSharp.TextureCharGlyph.MinMipFontSize">
            <summary>
            4 [pixel]
            </summary>
        </member>
        <member name="F:GLSharp.TextureCharGlyph.size">
            <summary>
            文字サイズ
            </summary>
        </member>
        <member name="F:GLSharp.TextureCharGlyph.texture">
            <summary>
            グリフテクスチャ
            </summary>
        </member>
        <member name="F:GLSharp.TextureCharGlyph.coords">
            <summary>
            テクスチャ座標
            </summary>
        </member>
        <member name="F:GLSharp.TextureCharGlyph.texCoords">
            <summary>
            テクスチャを貼り付ける四角形ポリゴンの頂点座標
            </summary>
        </member>
        <member name="M:GLSharp.TextureCharGlyph.#ctor(System.IntPtr,System.Char,System.Drawing.Font,System.Single,GLSharp.AntiAliasFormat)">
            <summary>
            文字を描画する四角形のテクスチャ付きポリゴンを作成する。
            </summary>
            <param name="hDC">描画先のデバイスコンテキストのハンドル</param>
            <param name="character">このインスタンスが表す文字</param>
            <param name="font">文字のフォント</param>
            <param name="size">文字サイズ</param>
            <param name="format">アンチエイリアスのフォーマット</param>
        </member>
        <member name="M:GLSharp.TextureCharGlyph.#ctor(GLSharp.TextureCharGlyph,System.Single)">
            <summary>
            <para>既存のインスタンスを元に、新規インスタンスを作成する。
            テクスチャは、既存のインスタンスから参照がコピーされる。</para>
            <para>破棄済みのインスタンスが渡された場合、例外が発生する。</para>
            </summary>
            <param name="tg">元となるTextureGlyphのインスタンス</param>
            <param name="size">文字サイズ</param>
        </member>
        <member name="M:GLSharp.TextureCharGlyph.#ctor(System.IntPtr,System.Char,GLSharp.TextureGlyphFont)">
            <summary>
            文字を描画する四角形のテクスチャ付きポリゴンを作成する。
            </summary>
            <param name="hDC">描画先のデバイスコンテキストのハンドル</param>
            <param name="character">このインスタンスが表す文字</param>
            <param name="font">文字のフォント</param>
        </member>
        <member name="M:GLSharp.TextureCharGlyph.Initialize(System.IntPtr,System.Char,System.Drawing.Font,System.Single,GLSharp.AntiAliasFormat)">
            <summary>
            初期化を行う。（描画用のテクスチャとポリゴンを作成する。）
            </summary>
        </member>
        <member name="M:GLSharp.TextureCharGlyph.ChooseAAFormat(System.Single,GLSharp.AntiAliasFormat@)">
            <summary>
            サイズが10pixel以下の場合は、強制的にアンチエイリアス無しに変更される。
            </summary>
            <param name="fontSizeInPixe"></param>
            <param name="aaFormat"></param>
        </member>
        <member name="M:GLSharp.TextureCharGlyph.Resize(System.Single)">
            <summary>
            グリフの描画サイズを変更する。
            </summary>
            <param name="size">新しいサイズ</param>
        </member>
        <member name="M:GLSharp.TextureCharGlyph.Clone">
            <summary>
            クローンを作成する。
            グリフを描画するディスプレイリストは、このインスタンスの参照がコピーされる。
            </summary>
            <returns></returns>
        </member>
        <member name="M:GLSharp.TextureCharGlyph.ResetMetrics">
            <summary>
            Metricsプロパティの値を、デフォルトの値にリセットする。
            </summary>
        </member>
        <member name="M:GLSharp.TextureCharGlyph.Dispose">
            <summary>
            文字を描画するディスプレイリストを破棄します。
            </summary>
        </member>
        <member name="P:GLSharp.TextureCharGlyph.BaseFontSize">
            <summary>
            <para>グリフテクスチャ作成時のフォントのサイズを取得・設定する。</para>
            <para>デフォルトは128pixel。</para>
            <para>大きいほどテクスチャサイズが大きくなり解像度も大きくなるが、
            メモリ消費も大きくなる。</para>
            </summary>
        </member>
        <member name="P:GLSharp.TextureCharGlyph.UseMipmap">
            <summary>
            <para>[get,set] ミップマップを作成するかどうかの指定。</para>
            <para>ミップマップを使用すると、
            小さく表示されていても文字が読みやすくなる。</para>
            </summary>
        </member>
        <member name="P:GLSharp.TextureCharGlyph.MagFilter">
            <summary>
            <para>[get,set] テクスチャを作成する際に設定するフィルタ（拡大）</para>
            <para>デフォルトは TextureMagFilter.Linear</para>
            </summary>
        </member>
        <member name="P:GLSharp.TextureCharGlyph.MinFilter">
            <summary>
            <para>[get,set] テクスチャを作成する際に設定するフィルタ（縮小）</para>
            <para>デフォルトは TextureMinFilter.LinearMipmapNearest</para>
            </summary>
        </member>
        <member name="P:GLSharp.TextureCharGlyph.UseAnisotropicFilter">
            <summary>
            <para>[get,set] テクスチャの異方性フィルタリングの設定。</para>
            <para>デフォルトは 4.0f。</para>
            <para>1より大きい値なら、異方性フィルタリングが設定される。
            1以下を設定すると異方性フィルタリングはオフになる。</para>
            <para>異方性フィルタリングがサポートされていなければ、指定しても意味はない。</para>
            <para>ミップマップを作成しない場合は、意味がないので無視される。</para>
            </summary>
        </member>
        <member name="P:GLSharp.TextureCharGlyph.Size">
            <summary>
            文字サイズを取得・設定する。
            </summary>
        </member>
        <member name="P:GLSharp.TextureCharGlyph.CellHeight">
            <summary>
            グリフのセルの高さを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.TextureCharGlyph.Texture">
            <summary>
            このインスタンスが表す文字のグリフテクスチャを取得する。
            </summary>
        </member>
        <member name="T:GLSharp.TextureControlGlyph`1">
            <summary>
            描画される際に任意の制御を実行する制御文字
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:GLSharp.TextureColorMaterialChar">
            <summary>
            glColorMaterialでマテリアルの変更を行う制御文字
            </summary>
            <remarks>
            <para>
            まず、TextureColorMaterialChar.BeginChar でカラーマテリアルモードを開始して、
            それから TextureColorMaterialChar でマテリアルの変更を行う。
            TextureColorMaterialChar.EndChar でカラーマテリアルモードを終了する。
            </para>
            </remarks>
        </member>
        <member name="M:GLSharp.TextureColorMaterialChar.Draw">
            <summary>
            glColor( color ) を呼び出す。
            </summary>
        </member>
        <member name="T:GLSharp.TextureColorMaterialChar.BeginChar">
            <summary>
            カラーマテリアルモードを有効にする制御文字
            </summary>
        </member>
        <member name="T:GLSharp.TextureColorMaterialChar.EndChar">
            <summary>
            カラーマテリアルモードを無効にする制御文字
            </summary>
        </member>
        <member name="T:GLSharp.TextureMaterialChar">
            <summary>
            マテリアルを設定する制御文字
            </summary>
        </member>
        <member name="F:GLSharp.TextureMaterialChar.material">
            <summary>
            マテリアル
            </summary>
        </member>
        <member name="T:GLSharp.TextureGlyphFont">
            <summary>
            テクスチャで描画される文字のフォント情報を格納する。
            </summary>
        </member>
        <member name="F:GLSharp.TextureGlyphFont.font">
            <summary>
            フォント
            </summary>
        </member>
        <member name="F:GLSharp.TextureGlyphFont.antiAliasFormat">
            <summary>
            アンチエイリアスの指定
            </summary>
        </member>
        <member name="F:GLSharp.TextureGlyphFont.size">
            <summary>
            文字サイズ
            </summary>
        </member>
        <member name="M:GLSharp.TextureGlyphFont.#ctor(System.Drawing.Font,System.Single,GLSharp.AntiAliasFormat)">
            <summary>
            フォントの情報を元にTextureFontInfoクラスのインスタンスを作成する。
            </summary>
            <param name="font">情報を取得するフォント</param>
            <param name="size">サイズ</param>
            <param name="format">アンチエイリアスのフォーマット</param>
        </member>
        <member name="M:GLSharp.TextureGlyphFont.ToString">
            <summary>
            このインスタンスを表す文字列を取得する。
            </summary>
        </member>
        <member name="T:GLSharp.TextureGlyphDictionary">
            <summary>
            テクスチャで描画される文字オブジェクトを作成・管理するクラス。
            </summary>
        </member>
        <member name="F:GLSharp.TextureGlyphDictionary.size">
            <summary>
            文字のサイズ。1.0f。
            </summary>
        </member>
        <member name="M:GLSharp.TextureGlyphDictionary.#ctor(System.IntPtr)">
            <summary>
            TextureGlyphDictionaryクラスのインスタンスを初期化する。
            </summary>
            <param name="hDC">デバイスコンテキストのハンドル</param>
        </member>
        <member name="M:GLSharp.TextureGlyphDictionary.CreateGlyph(System.Char,GLSharp.TextureGlyphFont,System.IntPtr)">
            <summary>
             指定したフォント・文字のグリフを取得する。
            </summary>
            <param name="c">文字</param>
            <param name="glyphFont">フォント</param>
            <param name="hDC">デバイスコンテキストのハンドル</param>
            <returns></returns>
        </member>
        <member name="M:GLSharp.TextureGlyphDictionary.DrawText(System.String,GLSharp.TextureGlyphFont)">
            <summary>
            簡易的なテキスト描画を行う。
            </summary>
            <param name="text">テキスト</param>
            <param name="glyphFont">フォントなどの指定</param>
            <returns>描画された文字列の最後の行の幅。</returns>
        </member>
        <member name="P:GLSharp.TextureGlyphDictionary.Item(GLSharp.TextureGlyphFont,System.Char)">
            <summary>
            指定したフォント・文字のグリフを取得する。
            </summary>
            <param name="c">文字</param>
            <param name="glyphFont">フォントなどの指定</param>
            <returns>指定したフォント・文字のグリフ</returns>
        </member>
        <member name="M:GLSharp.TextureTextLabel.#ctor(GLSharp.TextLayout,System.Single,System.Single)">
            <summary>
            テキスト無しで初期化する。
            </summary>
            <param name="layout">テキストのレイアウト</param>
            <param name="charSpace">文字間のスペース。0で標準、1.0で約1文字分のスペース。</param>
            <param name="lineSpace">行間のスペース。0で標準、1.0で約1行分のスペース。</param>
        </member>
        <member name="M:GLSharp.TextureTextLabel.#ctor(System.String,GLSharp.TextureGlyphFont,GLSharp.TextLayout,System.Single,System.Single,GLSharp.TextureGlyphDictionary)">
            <summary>
            任意のテキストで初期化する。
            </summary>
            <param name="text">テキスト</param>
            <param name="glyphFont">フォントなどの指定</param>
            <param name="layout">テキストのレイアウト</param>
            <param name="charSpace">文字間のスペース。0で標準、1.0で約1文字分のスペース。</param>
            <param name="lineSpace">行間のスペース。0で標準、1.0で約1行分のスペース。</param>
            <param name="dictionary">グリフを作成・管理するオブジェクト</param>
        </member>
        <member name="M:GLSharp.TextureTextLabel.#ctor(System.String,System.Drawing.Font,System.Single,GLSharp.AntiAliasFormat,GLSharp.TextLayout,System.Single,System.Single,GLSharp.TextureGlyphDictionary)">
            <summary>
            任意のテキストで初期化する。
            </summary>
            <param name="text">テキスト</param>
            <param name="font">フォント</param>
            <param name="size">文字サイズ</param>
            <param name="aaFormat">アンチエイリアスのフォーマット</param>
            <param name="layout">テキストのレイアウト</param>
            <param name="charSpace">文字間のスペース。0で標準、1.0で約1文字分のスペース。</param>
            <param name="lineSpace">行間のスペース。0で標準、1.0で約1行分のスペース。</param>
            <param name="dictionary">グリフを作成・管理するオブジェクト</param>
        </member>
        <member name="F:GLSharp.JoyCapsFlag.HasZ">
            <summary>
            Joystick has z-coordinate information.
            </summary>
        </member>
        <member name="F:GLSharp.JoyCapsFlag.HasR">
            <summary>
            Joystick has rudder (fourth axis) information.
            </summary>
        </member>
        <member name="F:GLSharp.JoyCapsFlag.HasU">
            <summary>
            Joystick has u-coordinate (fifth axis) information.
            </summary>
        </member>
        <member name="F:GLSharp.JoyCapsFlag.HasV">
            <summary>
            Joystick has v-coordinate (sixth axis) information.
            </summary>
        </member>
        <member name="F:GLSharp.JoyCapsFlag.HasPOV">
            <summary>
            Joystick has point-of-view information.
            </summary>
        </member>
        <member name="F:GLSharp.JoyCapsFlag.HasPOV4Dir">
            <summary>
            Joystick point-of-view supports discrete values (centered, forward, backward, left, and right).
            </summary>
        </member>
        <member name="F:GLSharp.JoyCapsFlag.JOYCAPS_POVCTS">
            <summary>
            Joystick point-of-view supports continuous degree bearings.
            </summary>
        </member>
        <member name="F:GLSharp.JoyCaps.manufacturerID">
            <summary>
                Manufacturer identifier. Manufacturer identifiers are defined in Manufacturer and Product Identifiers.
            </summary>
        </member>
        <member name="F:GLSharp.JoyCaps.productID">
            <summary>
                Product identifier. Product identifiers are defined in Manufacturer and Product Identifiers.
            </summary>
        </member>
        <member name="F:GLSharp.JoyCaps.productName">
            <summary>
                Null-terminated string containing the joystick product name.
            </summary>
        </member>
        <member name="F:GLSharp.JoyCaps.xMin">
            <summary>
                Minimum X-coordinate.
            </summary>
        </member>
        <member name="F:GLSharp.JoyCaps.xMax">
            <summary>
                Maximum X-coordinate.
            </summary>
        </member>
        <member name="F:GLSharp.JoyCaps.yMin">
            <summary>
            Minimum Y-coordinate.
            </summary>
        </member>
        <member name="F:GLSharp.JoyCaps.yMax">
            <summary>
                Maximum Y-coordinate.
            </summary>
        </member>
        <member name="F:GLSharp.JoyCaps.zMin">
            <summary>
                Minimum Z-coordinate.
            </summary>
        </member>
        <member name="F:GLSharp.JoyCaps.zMax">
            <summary>
                Maximum Z-coordinate.
            </summary>
        </member>
        <member name="F:GLSharp.JoyCaps.numButtons">
            <summary>
                Number of joystick buttons.
            </summary>
        </member>
        <member name="F:GLSharp.JoyCaps.periodMin">
            <summary>
                Smallest polling frequency supported when captured by the <see cref="!:joySetCapture"/> function.
            </summary>
        </member>
        <member name="F:GLSharp.JoyCaps.periodMax">
            <summary>
                Largest polling frequency supported when captured by <see cref="!:joySetCapture"/>.
            </summary>
        </member>
        <member name="F:GLSharp.JoyCaps.rMin">
            <summary>
                Minimum rudder value. The rudder is a fourth axis of movement.
            </summary>
        </member>
        <member name="F:GLSharp.JoyCaps.rMax">
            <summary>
                Maximum rudder value. The rudder is a fourth axis of movement.
            </summary>
        </member>
        <member name="F:GLSharp.JoyCaps.uMin">
            <summary>
                Minimum u-coordinate (fifth axis) values.
            </summary>
        </member>
        <member name="F:GLSharp.JoyCaps.uMax">
            <summary>
                Maximum u-coordinate (fifth axis) values.
            </summary>
        </member>
        <member name="F:GLSharp.JoyCaps.vMin">
            <summary>
                Minimum v-coordinate (sixth axis) values.
            </summary>
        </member>
        <member name="F:GLSharp.JoyCaps.vMax">
            <summary>
                Maximum v-coordinate (sixth axis) values.
            </summary>
        </member>
        <member name="F:GLSharp.JoyCaps.caps">
            <summary>
                Joystick capabilities The following flags define individual capabilities that a joystick might have:
            </summary>
            <remarks>
                <see cref="!:JOYCAPS_HASZ"/> - Joystick has z-coordinate information.
                <see cref="!:JOYCAPS_HASR"/> - Joystick has rudder (fourth axis) information.
                <see cref="!:JOYCAPS_HASU"/> - Joystick has u-coordinate (fifth axis) information.
                <see cref="!:JOYCAPS_HASV"/> - Joystick has v-coordinate (sixth axis) information.
                <see cref="!:JOYCAPS_HASPOV"/> - Joystick has point-of-view information.
                <see cref="!:JOYCAPS_POV4DIR"/> - Joystick point-of-view supports discrete values (centered, forward, backward, left, and right).
                <see cref="!:JOYCAPS_POVCTS"/> - Joystick point-of-view supports continuous degree bearings.
            </remarks>
        </member>
        <member name="F:GLSharp.JoyCaps.maxAxes">
            <summary>
                Maximum number of axes supported by the joystick.
            </summary>
        </member>
        <member name="F:GLSharp.JoyCaps.numAxes">
            <summary>
                Number of axes currently in use by the joystick.
            </summary>
        </member>
        <member name="F:GLSharp.JoyCaps.maxButtons">
            <summary>
                Maximum number of buttons supported by the joystick.
            </summary>
        </member>
        <member name="F:GLSharp.JoyCaps.regKey">
            <summary>
                Null-terminated string containing the registry key for the joystick.
            </summary>
        </member>
        <member name="F:GLSharp.JoyCaps.oemVxD">
            <summary>
                Null-terminated string identifying the joystick driver OEM.
            </summary>
        </member>
        <member name="F:GLSharp.JoyCaps.Size">
            <summary>
            size [byte] of JoyCaps struct.
            </summary>
        </member>
        <member name="F:GLSharp.JoyInfo.xPos">
            <summary>
                Current X-coordinate.
            </summary>
        </member>
        <member name="F:GLSharp.JoyInfo.yPos">
            <summary>
                Current Y-coordinate.
            </summary>
        </member>
        <member name="F:GLSharp.JoyInfo.zPos">
            <summary>
                Current Z-coordinate.
            </summary>
        </member>
        <member name="F:GLSharp.JoyInfo.buttons">
            <summary>
                Current state of joystick buttons.
            </summary>
            <remarks>
                <para>According to one or more of the following values:</para>
                <para>
                    <see cref="!:JOY_BUTTON1"/> - First joystick button is pressed.
                    <see cref="!:JOY_BUTTON2"/> - Second joystick button is pressed.
                    <see cref="!:JOY_BUTTON3"/> - Third joystick button is pressed.
                    <see cref="!:JOY_BUTTON4"/> - Fourth joystick button is pressed.
                </para>
            </remarks>
        </member>
        <member name="F:GLSharp.JoyInfoFlag.None">
            <summary></summary>
        </member>
        <member name="F:GLSharp.JoyInfoFlag.ReturnX">
            <summary></summary>
        </member>
        <member name="F:GLSharp.JoyInfoFlag.ReturnY">
            <summary></summary>
        </member>
        <member name="F:GLSharp.JoyInfoFlag.ReturnZ">
            <summary></summary>
        </member>
        <member name="F:GLSharp.JoyInfoFlag.ReturnR">
            <summary></summary>
        </member>
        <member name="F:GLSharp.JoyInfoFlag.ReturnU">
            <summary></summary>
        </member>
        <member name="F:GLSharp.JoyInfoFlag.ReturnV">
            <summary></summary>
        </member>
        <member name="F:GLSharp.JoyInfoFlag.ReturnPov">
            <summary></summary>
        </member>
        <member name="F:GLSharp.JoyInfoFlag.ReturnButtons">
            <summary></summary>
        </member>
        <member name="F:GLSharp.JoyInfoFlag.ReturnRawData">
            <summary></summary>
        </member>
        <member name="F:GLSharp.JoyInfoFlag.ReturnPovCts">
            <summary></summary>
        </member>
        <member name="F:GLSharp.JoyInfoFlag.ReturnCenterd">
            <summary></summary>
        </member>
        <member name="F:GLSharp.JoyInfoFlag.UseDeadZone">
            <summary></summary>
        </member>
        <member name="F:GLSharp.JoyInfoFlag.ReturnAll">
            <summary></summary>
        </member>
        <member name="F:GLSharp.JoyInfoFlag.CalReadALWAYS">
            <summary></summary>
        </member>
        <member name="F:GLSharp.JoyInfoFlag.CalReadXYOnly">
            <summary></summary>
        </member>
        <member name="F:GLSharp.JoyInfoFlag.CalRead3">
            <summary></summary>
        </member>
        <member name="F:GLSharp.JoyInfoFlag.CalRead4">
            <summary></summary>
        </member>
        <member name="F:GLSharp.JoyInfoFlag.CalReadXOnly">
            <summary></summary>
        </member>
        <member name="F:GLSharp.JoyInfoFlag.CalReadYOnly">
            <summary></summary>
        </member>
        <member name="F:GLSharp.JoyInfoFlag.CalRead5">
            <summary></summary>
        </member>
        <member name="F:GLSharp.JoyInfoFlag.CalRead6">
            <summary></summary>
        </member>
        <member name="F:GLSharp.JoyInfoFlag.CalReadZOnly">
            <summary></summary>
        </member>
        <member name="F:GLSharp.JoyInfoFlag.CalReadROnly">
            <summary></summary>
        </member>
        <member name="F:GLSharp.JoyInfoFlag.CalReadUOnly">
            <summary></summary>
        </member>
        <member name="F:GLSharp.JoyInfoFlag.CalReadVOnly">
            <summary></summary>
        </member>
        <member name="T:GLSharp.JoyInfoEx">
            <summary>
                The JOYINFOEX structure contains extended information about the joystick position, point-of-view position, and button state.
            </summary>
            <remarks>
                <para>
                    The value of the size member is also used to identify the version number for the structure when it's passed to the <see cref="!:joyGetPosEx"/> function.
                </para>
                <para>
                    Most devices with a point-of-view control have only five positions. When the JOY_RETURNPOV flag is set, these positions are reported by using the following constants:
                </para>
                <para>
                    <see cref="!:JOY_POVBACKWARD"/> - Point-of-view hat is pressed backward. The value 18,000 represents an orientation of 180.00 degrees (to the rear).
                    <see cref="!:JOY_POVCENTERED"/> - Point-of-view hat is in the neutral position. The value -1 means the point-of-view hat has no angle to report.
                    <see cref="!:JOY_POVFORWARD"/> - Point-of-view hat is pressed forward. The value 0 represents an orientation of 0.00 degrees (straight ahead).
                    <see cref="!:JOY_POVLEFT"/> - Point-of-view hat is being pressed to the left. The value 27,000 represents an orientation of 270.00 degrees (90.00 degrees to the left).
                    <see cref="!:JOY_POVRIGHT"/> - Point-of-view hat is pressed to the right. The value 9,000 represents an orientation of 90.00 degrees (to the right).
                </para>
                <para>
                    The default joystick driver currently supports these five discrete directions. If an application can accept only the defined point-of-view values, it must use the JOY_RETURNPOV flag. If an application can accept other degree readings, it should use the JOY_RETURNPOVCTS flag to obtain continuous data if it is available. The JOY_RETURNPOVCTS flag also supports the JOY_POV constants used with the JOY_RETURNPOV flag.
                </para>
            </remarks>
            <seealso cref="!:joyGetPosEx"/>
        </member>
        <member name="F:GLSharp.JoyInfoEx.size">
            <summary>
            Size, in bytes, of this structure.
            </summary>
        </member>
        <member name="F:GLSharp.JoyInfoEx.flags">
            <summary>
            Flags indicating the valid information returned in this structure. Members that do not contain valid information are set to zero.
            </summary>
            <remarks>
            <para>
                <see cref="!:JOY_RETURNALL"/> - Equivalent to setting all of the JOY_RETURN bits except JOY_RETURNRAWDATA.
                <see cref="!:JOY_RETURNBUTTONS"/> - The dwButtons member contains valid information about the state of each joystick button.
                <see cref="!:JOY_RETURNCENTERED"/> - Centers the joystick neutral position to the middle value of each axis of movement.
                <see cref="!:JOY_RETURNPOV"/> - The dwPOV member contains valid information about the point-of-view control, expressed in discrete units.
                <see cref="!:JOY_RETURNPOVCTS"/> - The dwPOV member contains valid information about the point-of-view control expressed in continuous, one-hundredth degree units.
                <see cref="!:JOY_RETURNR"/> - The dwRpos member contains valid rudder pedal data. This information represents another (fourth) axis.
                <see cref="!:JOY_RETURNRAWDATA"/>	- Data stored in this structure is uncalibrated joystick readings.
                <see cref="!:JOY_RETURNU"/> - The dwUpos member contains valid data for a fifth axis of the joystick, if such an axis is available, or returns zero otherwise.
                <see cref="!:JOY_RETURNV"/> - The dwVpos member contains valid data for a sixth axis of the joystick, if such an axis is available, or returns zero otherwise.
                <see cref="!:JOY_RETURNX"/> - The dwXpos member contains valid data for the x-coordinate of the joystick.
                <see cref="!:JOY_RETURNY"/> - The dwYpos member contains valid data for the y-coordinate of the joystick.
                <see cref="!:JOY_RETURNZ"/> - The dwZpos member contains valid data for the z-coordinate of the joystick.
                <see cref="!:JOY_USEDEADZONE"/> - Expands the range for the neutral position of the joystick and calls this range the dead zone. The joystick driver returns a constant value for all positions in the dead zone.
            </para>
            <para>
                The following flags provide data to calibrate a joystick and are intended for custom calibration applications.
            </para>
            <para>
                <see cref="!:JOY_CAL_READ3"/> - Read the x-, y-, and z-coordinates and store the raw values in dwXpos, dwYpos, and dwZpos.
                <see cref="!:JOY_CAL_READ4"/> - Read the rudder information and the x-, y-, and z-coordinates and store the raw values in dwXpos, dwYpos, dwZpos, and dwRpos.
                <see cref="!:JOY_CAL_READ5"/> - Read the rudder information and the x-, y-, z-, and u-coordinates and store the raw values in dwXpos, dwYpos, dwZpos, dwRpos, and dwUpos.
                <see cref="!:JOY_CAL_READ6"/> - Read the raw v-axis data if a joystick mini driver is present that will provide the data. Returns zero otherwise.
                <see cref="!:JOY_CAL_READALWAYS"/> - Read the joystick port even if the driver does not detect a device.
                <see cref="!:JOY_CAL_READRONLY"/> - Read the rudder information if a joystick mini-driver is present that will provide the data and store the raw value in dwRpos. Return zero otherwise.
                <see cref="!:JOY_CAL_READXONLY"/> - Read the x-coordinate and store the raw (uncalibrated) value in dwXpos.
                <see cref="!:JOY_CAL_READXYONLY"/> - Reads the x- and y-coordinates and place the raw values in dwXpos and dwYpos.
                <see cref="!:JOY_CAL_READYONLY"/> - Reads the y-coordinate and store the raw value in dwYpos.
                <see cref="!:JOY_CAL_READZONLY"/> - Read the z-coordinate and store the raw value in dwZpos.
                <see cref="!:JOY_CAL_READUONLY"/> - Read the u-coordinate if a joystick mini-driver is present that will provide the data and store the raw value in dwUpos. Return zero otherwise.
                <see cref="!:JOY_CAL_READVONLY"/> - Read the v-coordinate if a joystick mini-driver is present that will provide the data and store the raw value in dwVpos. Return zero otherwise.
            </para>
            </remarks>
        </member>
        <member name="F:GLSharp.JoyInfoEx.xPos">
            <summary>
            Current X-coordinate.
            </summary>
        </member>
        <member name="F:GLSharp.JoyInfoEx.yPos">
            <summary>
            Current Y-coordinate.
            </summary>
        </member>
        <member name="F:GLSharp.JoyInfoEx.zPos">
            <summary>
            Current Z-coordinate.
            </summary>
        </member>
        <member name="F:GLSharp.JoyInfoEx.rPos">
            <summary>
            Current position of the rudder or fourth joystick axis.
            </summary>
        </member>
        <member name="F:GLSharp.JoyInfoEx.uPos">
            <summary>
            Current fifth axis position.
            </summary>
        </member>
        <member name="F:GLSharp.JoyInfoEx.vPos">
            <summary>
            Current sixth axis position.
            </summary>
        </member>
        <member name="F:GLSharp.JoyInfoEx.buttons">
            <summary>
            Current state of the 32 joystick buttons. The value of this member can be set to any combination of JOY_BUTTONn flags, where n is a value in the range of 1 through 32 corresponding to the button that is pressed.
            </summary>
        </member>
        <member name="F:GLSharp.JoyInfoEx.buttonNumber">
            <summary>
            Current button number that is pressed.
            </summary>
        </member>
        <member name="F:GLSharp.JoyInfoEx.pov">
            <summary>
            Current position of the point-of-view control. Values for this member are in the range 0 through 35,900. These values represent the angle, in degrees, of each view multiplied by 100.
            </summary>
        </member>
        <member name="F:GLSharp.JoyInfoEx.reserved1">
            <summary>
            Reserved; do not use.
            </summary>
        </member>
        <member name="F:GLSharp.JoyInfoEx.reserved2">
            <summary>
            Reserved; do not use.
            </summary>
        </member>
        <member name="T:GLSharp.GLException">
            <summary>
            OpenGLのエラーを表す。
            </summary>
        </member>
        <member name="M:GLSharp.GLException.#ctor">
            <summary>
            GLException クラスの新しいインスタンスを初期化する。
            </summary>
        </member>
        <member name="M:GLSharp.GLException.#ctor(OpenTK.Graphics.OpenGL.ErrorCode)">
            <summary>
            GLException クラスの新しいインスタンスを初期化する。
            </summary>
            <param name="errorCode">この例外を表すOpenGLエラーコード</param>
        </member>
        <member name="M:GLSharp.GLException.#ctor(OpenTK.Graphics.OpenGL.ErrorCode,System.String)">
            <summary>
            GLException クラスの新しいインスタンスを初期化する。
            </summary>
            <param name="errorCode">この例外を表すOpenGLエラーコード</param>
            <param name="message">この例外を説明するメッセージ</param>
        </member>
        <member name="M:GLSharp.GLException.#ctor(OpenTK.Graphics.OpenGL.ErrorCode,System.String,System.Exception)">
            <summary>
            GLException クラスの新しいインスタンスを初期化する。
            </summary>
            <param name="errorCode">この例外を表すOpenGLエラーコード</param>
            <param name="message">この例外を説明するメッセージ</param>
            <param name="inner">この例外の原因となった例外</param>
        </member>
        <member name="P:GLSharp.GLException.ErrorCode">
            <summary>
            この例外のOpenGLエラーコードを取得する。
            </summary>
        </member>
        <member name="T:GLSharp.GLUException">
            <summary>
            GLUのエラーを表す。
            </summary>
        </member>
        <member name="M:GLSharp.GLUException.#ctor">
            <summary>
            GLUException クラスの新しいインスタンスを初期化する。
            </summary>
        </member>
        <member name="M:GLSharp.GLUException.#ctor(OpenTK.Graphics.OpenGL.GluErrorCode)">
            <summary>
            GLUException クラスの新しいインスタンスを初期化する。
            </summary>
            <param name="errorCode">この例外を表すGLUエラーコード</param>
        </member>
        <member name="M:GLSharp.GLUException.#ctor(OpenTK.Graphics.OpenGL.GluErrorCode,System.String)">
            <summary>
            GLUException クラスの新しいインスタンスを初期化する。
            </summary>
            <param name="errorCode">この例外を表すGLUエラーコード</param>
            <param name="message">この例外を説明するメッセージ</param>
        </member>
        <member name="M:GLSharp.GLUException.#ctor(OpenTK.Graphics.OpenGL.GluErrorCode,System.String,System.Exception)">
            <summary>
            GLUException クラスの新しいインスタンスを初期化する。
            </summary>
            <param name="errorCode">この例外を表すGLUエラーコード</param>
            <param name="message">この例外を説明するメッセージ</param>
            <param name="inner">この例外の原因となった例外</param>
        </member>
        <member name="P:GLSharp.GLUException.ErrorCode">
            <summary>
            この例外のGLUエラーコードを取得する。
            </summary>
        </member>
        <member name="T:GLSharp.GLExtensionNotSupportedExeption">
            <summary>
            必要なOpenGLのエクステンションがサポートされていない場合にスローされる例外。
            </summary>
        </member>
        <member name="P:GLSharp.GLExtensionNotSupportedExeption.ExtensionName">
            <summary>
            <para>実行環境でサポートされておらず、例外の原因となったOpenGLエクステンションの名前を取得する。</para>
            <para>指定されていない場合はString.Empty。</para>
            </summary>
        </member>
        <member name="T:GLSharp.ImmediateFrameController">
            <summary>
            <para>フレーム更新の要求に対して、そのつど即時に更新を実行するフレームコントローラ。</para>
            </summary>
            <remarks>
            <para>つまるところ、特に制御は行わない。</para>
            </remarks>
        </member>
        <member name="T:GLSharp.Scene.SceneFrameController">
            <summary>
            シーンのフレームの描画タイミングをコントロールする。
            </summary>
        </member>
        <member name="T:GLSharp.Scene">
            <summary>
            OpenGLの描画シーンを表す抽象クラス。
            </summary>
            <remarks>
            <para>IGLRenderingControl.RenderingSceneプロパティにセットすることでシーンが描画される。</para>
            </remarks>
        </member>
        <member name="M:GLSharp.Scene.#ctor(GLSharp.Scene.SceneFrameController)">
            <summary>
            
            </summary>
            <param name="frameController">フレームを制御するオブジェクト</param>
        </member>
        <member name="M:GLSharp.Scene.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GLSharp.Scene.RenderScene">
            <summary>
            <para>シーンを描画する。</para>
            <para></para>
            </summary>
            <remarks>wglMakeCurrent、wglSwapBuffers関数は自動的に呼び出されるので、
            オーバーライドする際に、この関数内では呼び出さないでください。</remarks>
        </member>
        <member name="M:GLSharp.Scene.UpdateFrame">
            <summary>
            <para>フレームを更新する。</para>
            <para>実際の更新のタイミングなどは、
            FrameControllerプロパティに設定されたオブジェクトの実装に依存する。</para>
            </summary>
            <remarks>
            <para>FrameControllerプロパティがnullの場合は、フレームが描画されない。</para>
            </remarks>
        </member>
        <member name="M:GLSharp.Scene.OnClientSizeChanged">
            <summary>
            <para>描画領域のサイズが変更されたときに呼び出されます。</para>
            </summary>
        </member>
        <member name="M:GLSharp.Scene.OnSetToRenderingControl(System.EventArgs)">
            <summary>
            このシーンが描画コントロールにセットされたときに呼び出されます。
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GLSharp.Scene.OnPreRemovedFromRenderingControl(System.EventArgs)">
            <summary>
            このシーンが描画コントロールから外される直前に呼び出されます。
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GLSharp.Scene.OnPreRenderingContextDestruction(System.EventArgs)">
            <summary>
            レンダリングコンテキストが破棄される直前に呼び出されます。
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:GLSharp.Scene.RenderingGLSControl">
            <summary>
            このシーンの描画先となるIGLSControlを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.Scene.RenderingControl">
            <summary>
            このシーンの描画先となるコントロールを取得する。
            RenderingTargetプロパティがnullの場合はnullを返す。
            </summary>
        </member>
        <member name="P:GLSharp.Scene.Context">
            <summary>
            <para>このシーンが描画されるOpenGLレンダリングコンテキストを取得する。</para>
            <para>このシーンがコントロールにセットされていない（RenderingTargetプロパティがnull）場合はnullを返す。</para>
            </summary>
        </member>
        <member name="P:GLSharp.Scene.FrameController">
            <summary>
            <para>[get,set] シーンのフレームを制御するオブジェクト</para>
            </summary>
        </member>
        <member name="T:GLSharp.Scene.SceneFrameController">
            <summary>
            シーンのフレームの描画タイミングをコントロールする。
            </summary>
        </member>
        <member name="M:GLSharp.Scene.SceneFrameController.RequestRenderingFrame">
            <summary>
            <para>フレームの描画を要求する。</para>
            <para>実際にフレームが描画されるタイミングは、
            継承したクラスでの実装による。</para>
            </summary>
        </member>
        <member name="M:GLSharp.Scene.SceneFrameController.OnFrameRenderingRequested">
            <summary>
            フレームの描画を要求されたときに呼び出される。
            </summary>
        </member>
        <member name="M:GLSharp.Scene.SceneFrameController.UpdateFrame">
            <summary>
            <para>フレームを描画する。</para>
            <para>バッファのスワップは、別途 SwapBuffers() メソッドを呼び出して行う。</para>
            </summary>
            <remarks>
            <para>abstract class FrameControllerBase のインスタンスから呼び出される。</para>
            <para>バッファのスワップは、ここでは行われないので注意。
            別途、SwapBuffers() メソッドを呼び出すことでバッファのスワップを行う。</para>
            </remarks>
        </member>
        <member name="M:GLSharp.Scene.SceneFrameController.SwapBuffers">
            <summary>
            <para>バッファをスワップする。</para>
            <para>ダブルバッファが有効ならば、this.TargetScene.Context.SwapBuffers()、
            そうでなければ、glFlush()が呼び出される。</para>
            <para>垂直同期が有効な場合は、
            ここでモニタがリフレッシュされるまで待機させられる。</para>
            </summary>
        </member>
        <member name="P:GLSharp.Scene.SceneFrameController.TargetScene">
            <summary>
            [get,set] フレームの描画タイミングを制御する対象となるシーンオブジェクト。
            </summary>
        </member>
        <member name="P:GLSharp.Scene.SceneFrameController.ElapsedTimeFromLastFrame">
            <summary>
            <para>[get] 1つ前のフレームからの経過時間。</para>
            <para>同一フレーム内では同じ値を返す。</para>
            <para>サポートされていない場合は常に0を返す。</para>
            </summary>
        </member>
        <member name="P:GLSharp.Scene.SceneFrameController.CurrentFrameTime">
            <summary>
            <para>[get] 現在のフレームの時間（アニメーションループの開始からの経過時間[ms]）。</para>
            <para>同一フレーム内では同じ値を返す。</para>
            <para>サポートされていない場合は常に0を返す。</para>
            </summary>
        </member>
        <member name="M:GLSharp.ImmediateFrameController.#ctor">
            <summary>
             <para>フレーム更新の要求に対して、そのつど即時に更新を実行するフレームコントローラ。</para>
            </summary>
        </member>
        <member name="M:GLSharp.ImmediateFrameController.OnFrameRenderingRequested">
            <summary>
            フレームの更新を要求する。
            </summary>
        </member>
        <member name="T:GLSharp.FpsController">
            <summary>
            <para>一定の時間間隔でフレームを更新するフレームコントローラ。</para>
            </summary>
            <remarks>
            <para>FPSが制御されたアニメーションの機能を提供する。</para>
            <para>バックグラウンドスレッドで実行されるループからフレームの更新が制御される。</para>
            </remarks>
        </member>
        <member name="F:GLSharp.FpsController.fpsTimer">
            <summary>
            [private] アニメーションループの時間計測・FPS制御を行う。
            </summary>
        </member>
        <member name="F:GLSharp.FpsController.bgwLoop">
            <summary>
            [private] アニメーションループを実行するバックグラウンドスレッド。
            </summary>
        </member>
        <member name="M:GLSharp.FpsController.OnLoopStarting">
            <summary>
            LoopStartingイベントを呼び出す。
            </summary>
        </member>
        <member name="M:GLSharp.FpsController.OnLoopStoped">
            <summary>
            LoopStopedイベントを呼び出す。
            </summary>
        </member>
        <member name="M:GLSharp.FpsController.bgWorker_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            バックグラウンドスレッドで
            アニメーションループを実行する。
            描画はReportProgressイベントで
            呼出元のスレッドに戻して行う。
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:GLSharp.FpsController.reportProgressEvent">
            <summary>
            bgWorkerのPeogressChangedイベントハンドラ（フォアグラウンドスレッド）と
            アニメーションループ（バックグラウンドスレッド）の同期をとるために使用される同期プリミティブ
            </summary>
        </member>
        <member name="F:GLSharp.FpsController.swapBuffersEvent">
            <summary>
            wglSwapBufferの完了を待つために使用する同期プリミティブ
            </summary>
        </member>
        <member name="M:GLSharp.FpsController.bgWorker_ProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
            <summary>
            呼び出し元のスレッドでの描画、またはイベント処理を行う。
            </summary>
        </member>
        <member name="M:GLSharp.FpsController.bgWorker_RunWorkerCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            アニメーションループ停止後の処理。
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:GLSharp.FpsController.StartAsync">
            <summary>
            バックグラウンドスレッドで実行されるアニメーションループを開始または再開する。
            </summary>
        </member>
        <member name="M:GLSharp.FpsController.StopAsync">
            <summary>
            アニメーションループを停止する。
            </summary>
            <remarks>
            <para>1フレーム以内程度の短時間の一時的な停止・再開には、Suspend()、Resume()メソッドを使用する。</para>
            </remarks>
        </member>
        <member name="M:GLSharp.FpsController.ResetAsync">
            <summary>
            <para>アニメーションループを停止し、経過時間をゼロにリセットする。</para>
            <para>すでにアニメーションループが停止している場合は、経過時間のリセットのみが行われる。</para>
            </summary>
        </member>
        <member name="F:GLSharp.FpsController.loopSuspendEvent">
            <summary>
            アニメーションループを一時的にブロックするために使用される同期プリミティブ
            </summary>
        </member>
        <member name="M:GLSharp.FpsController.SuspendAsync">
            <summary>
            アニメーションループを一時的にブロックする。
            AnimationResumeメソッドを呼び出してブロックを解放すること。
            </summary>
            <remarks>
            <para>アニメーションループ自体は停止せず、
            ループがフレーム間でブロックされるだけなので、
            1フレームぶん程度のごく短時間の停止のための使用を推奨する。</para>
            <para>また、ブロック中はRenderSceneを呼び出しても描画されない。
            ゆえに、いっさい描画されなくなる。</para>
            </remarks>
        </member>
        <member name="M:GLSharp.FpsController.Resume">
            <summary>
            ブロックされているアニメーションループを再開する。
            </summary>
        </member>
        <member name="M:GLSharp.FpsController.OnFrameRenderingRequested">
            <summary>
            フレームの描画が要求された時に
            </summary>
        </member>
        <member name="P:GLSharp.FpsController.ElapsedMillisecond">
            <summary>
            [get] アニメーションの開始からの経過時間[ms]。
            </summary>
        </member>
        <member name="P:GLSharp.FpsController.Fps">
            <summary>
            <para>[get,set] フレームレート</para>
            <para>0の場合はノーウェイト(FPS=∞)。
            デフォルトは60。</para>
            </summary>
        </member>
        <member name="P:GLSharp.FpsController.RealFps">
            <summary>
            <para>[get] フレームレートの実測値。</para>
            <para>過去32フレームの処理にかかった時間の平均から算出される。</para>
            </summary>
        </member>
        <member name="P:GLSharp.FpsController.CpuPower">
            <summary>
            <para>[get] CPU稼動率の測定値</para>
            <para>CPUの稼働率に合わせて、0～100の間の値が返る。
            ただしこれは、フレーム間の待機時間から算出されたものであって、あくまで参考値。
            過去16フレーム間で余ったCPU時間から計測する。16フレーム経過していない場合は100が返る。</para>
            </summary>
        </member>
        <member name="P:GLSharp.FpsController.SikppedFrameCount">
            <summary>
            <para>フレームが描画されてから、
            次のフレームが描画されるまでに描画がスキップされたフレームの数。</para>
            </summary>
        </member>
        <member name="P:GLSharp.FpsController.IsNextFrameRenderingSkipped">
            <summary>
            [get] 次のフレームの描画がスキップされるかどうかを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.FpsController.AnimationLoopRunning">
            <summary>
            [get] アニメーションループを実行中かどうかを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.FpsController.ForegroundTasks">
            <summary>
            [get] 毎フレームごとにフォアグラウンドスレッドで実行されるタスクのリスト。
            </summary>
        </member>
        <member name="P:GLSharp.FpsController.BackgroundTasks">
            <summary>
            [get] 毎フレームごとにバックグラウンドスレッドで実行されるタスクのリスト。
            </summary>
            <remarks>
            <para>リスト内のオブジェクトのIFrameTask.Finishedプロパティがtrueに設定されると、
            このリストから自動的に削除される。</para>
            <para>バックグラウンドスレッドからOpenGL関数を呼び出すとエラーになる（OpenGLの仕様）ので注意。</para>
            </remarks>
        </member>
        <member name="P:GLSharp.FpsController.LastFrameTime">
            <summary>
            <para>[get] 1つ前のフレームの時間（アニメーションループの開始からの経過時間[ms]）。</para>
            <para>同一フレーム内では同じ値を返す。</para>
            </summary>
        </member>
        <member name="P:GLSharp.FpsController.ElapsedTimeFromLastFrame">
            <summary>
            <para>[get] 1つ前のフレームからの経過時間。</para>
            <para>同一フレーム内では同じ値を返す。</para>
            </summary>
        </member>
        <member name="P:GLSharp.FpsController.CurrentFrameTime">
            <summary>
            <para>[get] 現在のフレームの時間（アニメーションループの開始からの経過時間[ms]）。</para>
            <para>同一フレーム内では同じ値を返す。</para>
            </summary>
        </member>
        <member name="E:GLSharp.FpsController.LoopStarting">
            <summary>
            ループが開始されようとしている時に呼び出される。
            </summary>
        </member>
        <member name="E:GLSharp.FpsController.LoopStoped">
            <summary>
            ループが停止したときに呼び出される。
            </summary>
        </member>
        <member name="P:GLSharp.FpsController.Accuracy">
            <summary>
            <para>[get,set] FPSの制御の精度。</para>
            <para>LowだとCPUの負荷が軽くてほどほどの精度。
            Highだと正確だがCPUの負荷が大きくなる。</para>
            <para>垂直同期がONになっている時は無視される。</para>
            </summary>
        </member>
        <member name="P:GLSharp.FpsController.IsSuspended">
            <summary>
            [get] アニメーションループが一時的にブロックされているかどうかを取得する。
            </summary>
        </member>
        <member name="T:GLSharp.LightType">
            <summary>
            光源のの種類を表す。
            </summary>
        </member>
        <member name="F:GLSharp.LightType.LightPoint">
            <summary>
            点光源
            </summary>
        </member>
        <member name="F:GLSharp.LightType.SpotLight">
            <summary>
            スポットライト
            </summary>
        </member>
        <member name="F:GLSharp.LightType.DirectionalLight">
            <summary>
            指向性ライト
            </summary>
        </member>
        <member name="T:GLSharp.Light">
            <summary>
            光源（ライト）を表すクラス
            </summary>
        </member>
        <member name="F:GLSharp.Light.position">
            <summary>
            ライトの位置(x,y,z,)
            </summary>
        </member>
        <member name="F:GLSharp.Light.direction">
            <summary>
            ライトの向き(スポットライト/指向性ライトの場合にのみ有効)
            </summary>
        </member>
        <member name="F:GLSharp.Light.lightName">
            <summary>
            ライトの番号(LightName.LIGHT0～7)
            </summary>
        </member>
        <member name="F:GLSharp.Light.lightType">
            <summary>
            ライトのタイプ
            </summary>
        </member>
        <member name="F:GLSharp.Light.diffuse">
            <summary>
            拡散光の色(R,G,B,A)
            </summary>
        </member>
        <member name="F:GLSharp.Light.ambient">
            <summary>
            環境光の色(R,G,B,A)
            </summary>
        </member>
        <member name="F:GLSharp.Light.specular">
            <summary>
            反射光の色(=光源の色)(R,G,B,A)
            </summary>
        </member>
        <member name="F:GLSharp.Light.spot_Exponent">
            <summary>
            スポットライトの輝度分布
            </summary>
        </member>
        <member name="F:GLSharp.Light.spot_CutOff">
            <summary>
            スポットライトの放射角(0～90、または180[degree])
            </summary>
        </member>
        <member name="F:GLSharp.Light.constantAttenuation">
            <summary>
            定数減衰率
            </summary>
        </member>
        <member name="F:GLSharp.Light.linearAttenuation">
            <summary>
            線形減衰率
            </summary>
        </member>
        <member name="F:GLSharp.Light.quadraticAttenuation">
            <summary>
            二次減衰率
            </summary>
        </member>
        <member name="M:GLSharp.Light.#ctor(OpenTK.Graphics.OpenGL.LightName,GLSharp.LightType,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            ライトを表すオブジェクトのインスタンスを生成する。
            </summary>
            <param name="lightName">ライトの番号 : gl.Light0～</param>
            <param name="type">ライトのタイプ</param>
            <param name="x">ライトの位置 : x座標</param>
            <param name="y">ライトの位置 : y座標</param>
            <param name="z">ライトの位置 : z座標</param>
            <param name="dx">ライトの向き : x</param>
            <param name="dy">ライトの向き : y</param>
            <param name="dz">ライトの向き : z</param>
        </member>
        <member name="M:GLSharp.Light.SetAmbient(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            環境光の色を指定する。
            </summary>
            <param name="r">Red</param>
            <param name="g">Green</param>
            <param name="b">Blue</param>
            <param name="a">Alpha</param>
        </member>
        <member name="M:GLSharp.Light.SetAmbient(System.Single)">
            <summary>
            環境光の色を反射光との明るさの比で指定する。
            ただし、Alpha値は反射光と同じ値に設定される。
            </summary>
            <param name="ambient">反射光との明るさの比。</param>
        </member>
        <member name="M:GLSharp.Light.SetDiffuse(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            拡散光の色を指定する。
            </summary>
            <param name="r">Red</param>
            <param name="g">Green</param>
            <param name="b">Blue</param>
            <param name="a">Alpha</param>
        </member>
        <member name="M:GLSharp.Light.SetDiffuse(System.Single)">
            <summary>
            拡散光の色を反射光との明るさの比で指定する。
            ただし、Alpha値は反射光と同じ値に設定される。
            </summary>
            <param name="diffuse">反射光との明るさの比。</param>
        </member>
        <member name="M:GLSharp.Light.SetSpecular(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            反射光の色を指定する。
            </summary>
            <param name="r">Red</param>
            <param name="g">Green</param>
            <param name="b">Blue</param>
            <param name="a">Alpha</param>
        </member>
        <member name="M:GLSharp.Light.ApplySetting">
            <summary>
            <para>ライトの位置と向き以外のライティング設定
            (色・減衰率・放射角・スポットライト設定)を適用する。</para>
            <para>位置と向きはONメソッドで適用される。</para>
            </summary>
        </member>
        <member name="M:GLSharp.Light.ON">
            <summary>
            ライトを点灯する。
            （OpenGLにライトの位置と向きの設定を適用する。）
            </summary>
            <remarks>
            このライトを有効にする（点灯する）だけで、ライティング自体を有効にするわけではない。
            ライティングが有効になっていないと、効果が無い。
            </remarks>
        </member>
        <member name="M:GLSharp.Light.OFF">
            <summary>
            ライトを消灯する。
            </summary>
            <remarks>
            このライトを無効にする（消灯する）だけであって、
            ライティングを無効にするわけでは無い。
            </remarks>
        </member>
        <member name="M:GLSharp.Light.LightNameToInt(OpenTK.Graphics.OpenGL.LightName)">
            <summary>
            LightNameを整数に変換する。
            Light0～7に対して、整数0～7が返される。
            </summary>
            <param name="lightName">変換するLightName</param>
            <returns>Light0～7に対して、整数0～7が返される</returns>
        </member>
        <member name="M:GLSharp.Light.ToString">
            <summary>
            このインスタンスを表す文字列を取得する。
            </summary>
            <returns>LightNameプロパティを表す文字列を返す。</returns>
        </member>
        <member name="P:GLSharp.Light.LightNum">
            <summary>
            ライトの番号(LightName.LIGHT0～7)
            </summary>
        </member>
        <member name="P:GLSharp.Light.LightType">
            <summary>
            ライトのタイプ
            </summary>
        </member>
        <member name="P:GLSharp.Light.Diffuse">
            <summary>
            拡散光の色(R,G,B,A)
            </summary>
        </member>
        <member name="P:GLSharp.Light.Ambient">
            <summary>
            環境光の色(R,G,B,A)
            </summary>
        </member>
        <member name="P:GLSharp.Light.Specular">
            <summary>
            反射光の色(=光源の色)(R,G,B,A)
            </summary>
        </member>
        <member name="P:GLSharp.Light.SpotExponent">
            <summary>
            スポットライトの輝度分布
            </summary>
        </member>
        <member name="P:GLSharp.Light.SpotCutOff">
            <summary>
            スポットライトの放射角(0～90、または180[degree])
            </summary>
        </member>
        <member name="P:GLSharp.Light.ConstantAttenuation">
            <summary>
            定数減衰率
            </summary>
        </member>
        <member name="P:GLSharp.Light.LinearAttenuation">
            <summary>
            線形減衰率
            </summary>
        </member>
        <member name="P:GLSharp.Light.QuadraticAttenuation">
            <summary>
            二次減衰率
            </summary>
        </member>
        <member name="T:GLSharp.ITextModel">
            <summary>
            メトリクスと位置情報を持ち、文字として配置可能なグリフであることを表す。
            </summary>
        </member>
        <member name="P:GLSharp.ITextModel.Position">
            <summary>
            レイアウトによって指定される位置を取得・設定する。
            </summary>
        </member>
        <member name="T:GLSharp.TextLayouter">
            <summary>
            IGlyphまたはITextModelインターフェイスを実装するインスタンスを、
            テキストとしてレイアウトする。
            </summary>
        </member>
        <member name="M:GLSharp.TextLayouter.GetNextCahrGlyph``1(System.Collections.Generic.IList{``0},System.Int32,GLSharp.IGlyph@)">
            <summary>
            currentIndexの次のICharGlyphを取得する。
            次のICharGlyphとそのインデックスが返される。
            無ければ引数nextはnull、返り値に-1が返される。
            </summary>
        </member>
        <member name="M:GLSharp.TextLayouter.LayOut``1(System.Collections.Generic.IList{``0},GLSharp.TextLayout,System.Boolean,System.Single,System.Single,GLSharp.Metrics@,System.Collections.Generic.List{GLSharp.Metrics})">
            <summary>
            指定したジェネリックリストの要素を、テキストとしてレイアウトする。
            リスト内の要素のうち、ICharGlyphまたはITextModelインターフェースを実装しているものが対象。それ以外の要素は無視される。
            </summary>
            <typeparam name="T">レイアウトを行うジェネリックリストの型</typeparam>
            <param name="target">レイアウトを行う要素が格納されたジェネリックリスト</param>
            <param name="layout">レイアウトの方法</param>
            <param name="vertical">縦書きかどうかの指定</param>
            <param name="charSpace">各文字間のスペース。0なら文字同士が詰めて配置される。1.0fで文字1つ分のスペース。</param>
            <param name="lineSpace">各行間のスペース。0なら各行が詰めて配置される。1.0fで１行分のスペース。</param>
            <param name="textMetrics">レイアウト後のテキストのメトリック</param>
            <param name="lineMetrics">レイアウト後の各行ごとのメトリックが格納されるリスト。</param>
        </member>
        <member name="T:GLSharp.Metrics">
            <summary>
            描画される文字列の各部の長さなどの情報を格納する。
            </summary>
        </member>
        <member name="F:GLSharp.Metrics.blackBoxX">
            <summary>
            文字列を描画するグリフを完全に囲む最小の矩形の幅。
            </summary>
        </member>
        <member name="F:GLSharp.Metrics.blackBoxY">
            <summary>
            文字列を描画するグリフを完全に囲む最小の矩形の高さ。
            </summary>
        </member>
        <member name="F:GLSharp.Metrics.blackBoxZ">
            <summary>
            文字列を描画するグリフを完全に囲む最小の矩形の奥行き。
            </summary>
        </member>
        <member name="F:GLSharp.Metrics.originX">
            <summary>
            文字列を描画するグリフを完全に囲む最小の矩形の左上角のX座標。
            </summary>
        </member>
        <member name="F:GLSharp.Metrics.originY">
            <summary>
            文字列を描画するグリフを完全に囲む最小の矩形の左上角のY座標。
            </summary>
        </member>
        <member name="F:GLSharp.Metrics.originZ">
            <summary>
            文字列を描画するグリフを完全に囲む最小の矩形の左上角のZ座標。
            </summary>
        </member>
        <member name="F:GLSharp.Metrics.cellX">
            <summary>
            文字列の幅。
            </summary>
        </member>
        <member name="F:GLSharp.Metrics.cellY">
            <summary>
            文字列の高さ。
            </summary>
        </member>
        <member name="F:GLSharp.Metrics.cellZ">
            <summary>
            文字列の奥行き。
            </summary>
        </member>
        <member name="M:GLSharp.Metrics.#ctor">
            <summary>
            すべてのフィールドが0fで初期化される。
            </summary>
        </member>
        <member name="M:GLSharp.Metrics.#ctor(GLSharp.GlyphMetricsFloat)">
            <summary>
            GlyphMetricsFloatの値を元に初期化される。
            </summary>
            <param name="gmf">値をコピーするGlyphMetricsFloatのインスタンス</param>
        </member>
        <member name="M:GLSharp.Metrics.Reset">
            <summary>
            このインスタンスのすべてのフィールドの値を0に初期化する。
            </summary>
        </member>
        <member name="M:GLSharp.Metrics.Scale(System.Single)">
            <summary>
            このインスタンスのすべてのフィールドの値をスケーリングする。
            </summary>
        </member>
        <member name="M:GLSharp.Metrics.ToAABB">
            <summary>
            このインスタンスと等価のAABBを取得する。
            </summary>
            <returns>このインスタンスと等価のAABB</returns>
        </member>
        <member name="M:GLSharp.Metrics.ToAABB(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            オフセットを加えたAABBを取得する。
            </summary>
            <param name="offsetX">x方向のオフセット</param>
            <param name="offsetY">y方向のオフセット</param>
            <param name="offsetZ">z方向のオフセット</param>
            <param name="vertical">tureを指定すると、縦書き(z軸周りに-90度回転)のAABBになる。</param>
            <returns>オフセットを加えたAABB。</returns>
        </member>
        <member name="M:GLSharp.Metrics.CopyTo(GLSharp.Metrics)">
            <summary>
            このオブジェクトの値をコピーする。
            </summary>
            <param name="metrics"></param>
        </member>
        <member name="M:GLSharp.Metrics.Clone">
            <summary>
            クローンを作成する。
            </summary>
            <returns>このインスタンスのクローン</returns>
        </member>
        <member name="T:GLSharp.TextLayout">
            <summary>
            テキストのレイアウトを表す。
            </summary>
        </member>
        <member name="F:GLSharp.TextLayout.Left">
            <summary>
            左揃え
            </summary>
        </member>
        <member name="F:GLSharp.TextLayout.Center">
            <summary>
            中央揃え
            </summary>
        </member>
        <member name="F:GLSharp.TextLayout.Right">
            <summary>
            右揃え
            </summary>
        </member>
        <member name="F:GLSharp.TextLayout.SingleLine">
            <summary>
            改行なし
            </summary>
        </member>
        <member name="T:GLSharp.TextOrigin">
            <summary>
            テキストの原点の位置を表す。
            </summary>
        </member>
        <member name="F:GLSharp.TextOrigin.FirstBaseLineLeft">
            <summary>
            1行目のベースラインの左端
            </summary>
        </member>
        <member name="F:GLSharp.TextOrigin.FirstBaseLineCenter">
            <summary>
            1行目のベースラインの中央
            </summary>
        </member>
        <member name="F:GLSharp.TextOrigin.FirstBaseLineRight">
            <summary>
            1行目のベースラインの右端
            </summary>
        </member>
        <member name="F:GLSharp.TextOrigin.LastBaseLineLeft">
            <summary>
            最後の行のベースラインの左端
            </summary>
        </member>
        <member name="F:GLSharp.TextOrigin.LastBaseLineCenter">
            <summary>
            最後の行のベースラインの中央
            </summary>
        </member>
        <member name="F:GLSharp.TextOrigin.LastBaseLineRight">
            <summary>
            最後の行のベースラインの右端
            </summary>
        </member>
        <member name="F:GLSharp.TextOrigin.TopLeft">
            <summary>
            外接矩形の左上
            </summary>
        </member>
        <member name="F:GLSharp.TextOrigin.TopCenter">
            <summary>
            外接矩形の上中央
            </summary>
        </member>
        <member name="F:GLSharp.TextOrigin.TopRight">
            <summary>
            外接矩形の右上
            </summary>
        </member>
        <member name="F:GLSharp.TextOrigin.CenterLeft">
            <summary>
            外接矩形の中央左
            </summary>
        </member>
        <member name="F:GLSharp.TextOrigin.Center">
            <summary>
            外接矩形の中央
            </summary>
        </member>
        <member name="F:GLSharp.TextOrigin.CenterRight">
            <summary>
            外接矩形の中央右
            </summary>
        </member>
        <member name="F:GLSharp.TextOrigin.BottomLeft">
            <summary>
            外接矩形の左下
            </summary>
        </member>
        <member name="F:GLSharp.TextOrigin.BottomCenter">
            <summary>
            外接矩形の下中央
            </summary>
        </member>
        <member name="F:GLSharp.TextOrigin.BottomRight">
            <summary>
            外接矩形の右下
            </summary>
        </member>
        <member name="T:GLSharp.BitmapTextLabel">
            <summary>
            ビットマップによる文字列のラベルを描画するクラス。
            描画テキストの簡単なレイアウトも設定可能。
            </summary>
        </member>
        <member name="M:GLSharp.BitmapTextLabel.#ctor(System.String,System.Drawing.Font,GLSharp.TextLayout,System.Single,System.Single,GLSharp.BitmapGlyphDictionary)">
            <summary>
            ビットマップで描画される文字列を作成する。
            </summary>
            <param name="text">描画する文字列</param>
            <param name="font">描画する文字列のフォント</param>
            <param name="layout">テキストのレイアウト</param>
            <param name="charSpace">文字間のスペース</param>
            <param name="lineSpace">行間のスペース</param>
            <param name="dictionary">グリフを作成・管理するオブジェクト</param>
        </member>
        <member name="M:GLSharp.BitmapTextLabel.#ctor(System.String,GLSharp.BitmapGlyphFont,GLSharp.TextLayout,System.Single,System.Single,GLSharp.BitmapGlyphDictionary)">
            <summary>
            ビットマップで描画される文字列を作成する。
            </summary>
            <param name="text">描画する文字列</param>
            <param name="fontInfo">フォントやアンチエイリアスなどの指定</param>
            <param name="layout">テキストのレイアウト</param>
            <param name="charSpace">文字間のスペース</param>
            <param name="lineSpace">行間のスペース</param>
            <param name="dictionary">グリフを作成・管理するオブジェクト</param>
        </member>
        <member name="M:GLSharp.BitmapTextLabel.#ctor(GLSharp.TextLayout,System.Single,System.Single)">
            <summary>
            ビットマップで描画される文字列を作成する。
            描画する文字列なしで初期化する。
            </summary>
            <param name="layout">テキストのレイアウト</param>
            <param name="charSpace">文字間のスペース</param>
            <param name="lineSpace">行間のスペース</param>
        </member>
        <member name="M:GLSharp.BitmapTextLabel.Draw">
            <summary>
            文字列を描画する。
            </summary>
        </member>
        <member name="M:GLSharp.BitmapTextLabel.AddText(System.String,System.Drawing.Font,GLSharp.BitmapGlyphDictionary)">
            <summary>
            <para>描画する文字列を追加する。</para>
            <para>
            追加された文字列は自動的にはレイアウトされない。
            このメソッドを呼び出した後は、LayOutTextメソッドでテキストの再レイアウトを行う必要がある。
            </para>
            </summary>
            <param name="text">追加する文字列</param>
            <param name="font">フォント</param>
            <param name="dictionary">グリフのディスプレイリストを作成・管理するOutlineGlyphDictionaryのインスタンス</param>
        </member>
        <member name="M:GLSharp.BitmapTextLabel.AddText(System.Char,System.Drawing.Font,GLSharp.BitmapGlyphDictionary)">
            <summary>
            <para>描画する文字を追加する。</para>
            <para>
            追加された文字は自動的にはレイアウトされない。
            このメソッドを呼び出した後は、LayOutTextメソッドでテキストの再レイアウトを行う必要がある。
            </para>
            </summary>
            <param name="c">追加する文字</param>
            <param name="font">フォント</param>
            <param name="dictionary">グリフのディスプレイリストを作成・管理するOutlineGlyphDictionaryのインスタンス</param>
        </member>
        <member name="T:GLSharp.AntiAliasFormat">
            <summary>
            アンチエイリアスの階調を表す。
            </summary>
        </member>
        <member name="F:GLSharp.AntiAliasFormat.None">
            <summary>
            アンチエイリアス無し
            </summary>
        </member>
        <member name="F:GLSharp.AntiAliasFormat._5">
            <summary>
            5階調
            </summary>
        </member>
        <member name="F:GLSharp.AntiAliasFormat._17">
            <summary>
            17階調
            </summary>
        </member>
        <member name="F:GLSharp.AntiAliasFormat._65">
            <summary>
            65階調
            </summary>
        </member>
        <member name="F:GLSharp.BitmapGlyph.fontHeight">
            <summary>
            グリフのセルの高さ
            </summary>
        </member>
        <member name="M:GLSharp.BitmapGlyph.Layout">
            <summary>
            子オブジェクトを持たないので、
            このインスタンスのMetricsプロパティの値がリセットされる（= ResetMetrics()が実行される）だけ。
            </summary>
        </member>
        <member name="P:GLSharp.BitmapGlyph.CellHeight">
            <summary>
            [get] グリフのセルの高さ
            </summary>
        </member>
        <member name="T:GLSharp.BitmapCharGlyph">
            <summary>
            ビットマップの文字と、それを描画するディスプレイリストを表す。
            </summary>
            <remarks>
            <para>アンチエイリアス無しの場合はglBitmapを使用して描画され、
            glColor*などによって描画色を変えられる。</para>
            <para>
            アンチエイリアス有りの場合はglDrawPixelsで描画され、
            glColor*では色を変更できないので、
            使い方に注意すること。</para>
            </remarks>
        </member>
        <member name="F:GLSharp.BitmapCharGlyph.displayList">
            <summary>
            このインスタンスが表す文字を描画するディスプレイリスト
            </summary>
        </member>
        <member name="M:GLSharp.BitmapCharGlyph.#ctor(System.IntPtr,System.Char,System.Drawing.Font)">
            <summary>
            wgl.UseFontBitmapsメソッドを使用して、文字を描画するディスプレイリストを作成する。
            </summary>
            <param name="hDC">描画先のデバイスコンテキストのハンドル</param>
            <param name="character">このインスタンスが表す文字</param>
            <param name="font">文字のフォント</param>
        </member>
        <member name="M:GLSharp.BitmapCharGlyph.#ctor(System.IntPtr,System.Char,System.Drawing.Font,GLSharp.AntiAliasFormat,System.Drawing.Color)">
            <summary>
            文字を描画するディスプレイリストを作成する。
            </summary>
            <param name="hDC">描画先のデバイスコンテキストのハンドル</param>
            <param name="character">このインスタンスが表す文字</param>
            <param name="font">文字のフォント</param>
            <param name="format">アンチエイリアスのフォーマット。
            AntiAliasFormat.Noneを指定するとアンチエイリアスは無しで引数"color"は無視される。</param>
            <param name="color">アンチエイリアス有りの場合は、文字の色を指定する。無しの場合は無視される。</param>
        </member>
        <member name="M:GLSharp.BitmapCharGlyph.#ctor(System.Char,GLSharp.BitmapGlyphFont,System.IntPtr)">
            <summary>
            文字を描画するディスプレイリストを作成する。
            </summary>
            <param name="c">このインスタンスが表す文字</param>
            <param name="glyphFont">フォントとオプションを指定するBitmapFontInfo構造体</param>
            <param name="hDC">描画先のデバイスコンテキストのハンドル</param>
        </member>
        <member name="M:GLSharp.BitmapCharGlyph.#ctor(GLSharp.BitmapCharGlyph)">
            <summary>
            <para>既存のインスタンスを元に、新規インスタンスを作成する。
            グリフを描画するディスプレイリストは、既存のインスタンスから参照がコピーされる。</para>
            <para>破棄済みのインスタンスが渡された場合、例外が発生する。</para>
            </summary>
            <param name="bg">元となるBitmapGlyphのインスタンス</param>
        </member>
        <member name="M:GLSharp.BitmapCharGlyph.Initialize(System.IntPtr,System.Char,System.Drawing.Font)">
            <summary>
            初期化を行う。（アンチエイリアス無し）
            </summary>
        </member>
        <member name="M:GLSharp.BitmapCharGlyph.Initialize(System.IntPtr,System.Char,System.Drawing.Font,GLSharp.AntiAliasFormat,System.Drawing.Color)">
            <summary>
            初期化を行う。（アンチエイリアス有り）
            </summary>
        </member>
        <member name="M:GLSharp.BitmapCharGlyph.Draw">
            <summary>
            このインスタンスが表す文字グリフを描画する。
            </summary>
        </member>
        <member name="M:GLSharp.BitmapCharGlyph.Clone">
            <summary>
            クローンを作成する。
            グリフを描画するディスプレイリストは、このインスタンスの参照がコピーされる。
            </summary>
            <returns></returns>
        </member>
        <member name="M:GLSharp.BitmapCharGlyph.Dispose">
            <summary>
            文字を描画するディスプレイリストを破棄します。
            </summary>
        </member>
        <member name="P:GLSharp.BitmapCharGlyph.DisplayList">
            <summary>
            [get] このインスタンスが表す文字を描画するディスプレイリスト
            </summary>
        </member>
        <member name="T:GLSharp.BitmapControlGlyph`1">
            <summary>
            描画される際に任意の制御を実行する制御文字
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:GLSharp.BitmapGlyphFont">
            <summary>
            ビットマップで描画される文字のフォント情報を格納する。
            </summary>
        </member>
        <member name="F:GLSharp.BitmapGlyphFont.font">
            <summary>
            フォント
            </summary>
        </member>
        <member name="F:GLSharp.BitmapGlyphFont.antiAliasFormat">
            <summary>
            アンチエイリアスの指定
            </summary>
        </member>
        <member name="F:GLSharp.BitmapGlyphFont.color">
            <summary>
            <para>フォントの色</para>
            <para>（antiAliasFormatがAntiAliasFormat.Noneの場合は無視される。）</para>
            </summary>
        </member>
        <member name="M:GLSharp.BitmapGlyphFont.#ctor(System.Drawing.Font)">
            <summary>
            フォントの情報を元にBitmapFontInfoクラスのインスタンスを作成する。
            </summary>
            <param name="font">情報を取得するフォント</param>
        </member>
        <member name="M:GLSharp.BitmapGlyphFont.#ctor(System.Drawing.Font,GLSharp.AntiAliasFormat,System.Drawing.Color)">
            <summary>
            フォントの情報を元にBitmapFontInfoクラスのインスタンスを作成する。
            </summary>
            <param name="font">情報を取得するフォント</param>
            <param name="format">アンチエイリアスのフォーマット</param>
            <param name="color">フォントの色（formatにAntiAliasFormat.Noneを指定した場合は使用されない。）</param>
        </member>
        <member name="M:GLSharp.BitmapGlyphFont.ToString">
            <summary>
            このインスタンスを表す文字列を取得する。
            </summary>
            <returns>"FontName, SizeInPoint, FontStyle, AntiArias"</returns>
        </member>
        <member name="T:GLSharp.BitmapGlyphDictionary">
             <summary>
             <para>ビットマップにより文字を描画するディスプレイリストの作成を制御し、
             作成したディスプレイリストを管理する。
             同一グリフの多重作成を避けることができる。</para>
             <para>内部でディスプレイリストを使用するので、
            レンダリングコンテキストによって使い分け、不要になったらDispose()で解放すること。 </para>
             </summary>
        </member>
        <member name="M:GLSharp.BitmapGlyphDictionary.#ctor(System.IntPtr)">
            <summary>
            コンストラクタ。
            </summary>
        </member>
        <member name="M:GLSharp.BitmapGlyphDictionary.DrawText(System.String,GLSharp.BitmapGlyphFont)">
            <summary>
            簡易的なテキスト描画を行う。
            </summary>
            <param name="text">テキスト</param>
            <param name="glyphFont">フォントなどの指定</param>
            <returns>描画された文字列の最後の行の幅。</returns>
        </member>
        <member name="T:GLSharp.ModelEventHandler">
            <summary>
            Modelクラス内のイベントのイベントハンドラ。
            </summary>
            <param name="sender">イベントの呼び出し元であるModelクラスのインスタンス</param>
        </member>
        <member name="T:GLSharp.Model">
            <summary>
            描画されるモデルを表す。
            抽象クラス。
            OpenGLでモデルを描画するための基本的な機能を提供する。
            </summary>
            <remarks>
            基本的な使い方は、このクラスを継承して
            Draw()メソッドをオーバーライドして使用する。
            シーンの描画時には、
            DrawScene()によって描画する。
            </remarks>
        </member>
        <member name="T:GLSharp.IItemCollectionOwner`1">
            <summary>
            <para>アイテムのコレクションを所有することを表す。</para>
            <para>オーナーとアイテムでの相互の参照を提供する。</para>
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="P:GLSharp.IItemCollectionOwner`1.ItemCollection">
            <summary>
            [get]
            </summary>
        </member>
        <member name="T:GLSharp.IOwnedItem`1">
            <summary>
            <para>オーナーによって所有されるアイテムを表す。</para>
            <para>オーナーとアイテムでの相互の参照を提供する。</para>
            </summary>
            <typeparam name="TOwner"></typeparam>
        </member>
        <member name="P:GLSharp.IOwnedItem`1.Owner">
            <summary>
            [get]
            </summary>
        </member>
        <member name="T:GLSharp.ISelectable">
            <summary>
            マウスピッキングのための機能を提供する。
            </summary>
        </member>
        <member name="M:GLSharp.ISelectable.DrawSceneForSelectionMode(GLSharp.IRenderingParams,System.UInt32)">
            <summary>
            <para>セレクションモードで描画を行う。</para>
            </summary>
            <param name="rp">レンダリングパラメータ</param>
            <param name="name">セレクションモードでこのオブジェクトに割り当てられた識別番号。（glLoadNameで割り当てられる名前。）</param>
            <remarks>
            <para>実装時は、このメソッド内でglPushName、glLoadName、glPopNameを使用して
            子オブジェクトを個別に識別・ヒットさせることができる。</para>
            </remarks>
        </member>
        <member name="M:GLSharp.ISelectable.GettHitObject(GLSharp.SelectionData)">
            <summary>
            <para>与えられたselectionDataに基づいて、ヒットしたオブジェクトを返す。</para>
            </summary>
            <param name="selectionData">セレクションデータ（セレクションバッファに返ってきた値）</param>
            <returns></returns>
            <remarks>
            <para>実装時は、子オブジェクトを持たない場合はこのオブジェクト自身を返せばよい。</para>
            <para>子オブジェクトを持つ場合、selectionData.names[0]にこのオブジェクトの識別番号（glLoadNameで割り当てられる名前）が格納されており、
            selectionData.names[1]以降の要素に子オブジェクトの識別番号が格納されている。</para>
            </remarks>
        </member>
        <member name="P:GLSharp.ISelectable.Selectable">
            <summary>
            選択可能かどうかを取得する。
            </summary>
        </member>
        <member name="F:GLSharp.Model.name">
            <summary>
            このモデルの名前
            </summary>
        </member>
        <member name="F:GLSharp.Model.position">
            <summary>
            このモデルの位置・回転状態を表す。
            </summary>
        </member>
        <member name="F:GLSharp.Model.visible">
            <summary>
            可視 / 非可視の指定
            </summary>
        </member>
        <member name="F:GLSharp.Model.displayList">
            <summary>
            このモデルのディスプレイリスト
            </summary>
        </member>
        <member name="F:GLSharp.Model.displayListEnabled">
            <summary>
            ディスプレイリストが使用可能かどうかを表すフラグ。
            </summary>
        </member>
        <member name="F:GLSharp.Model.renewDisplayListOnNextDrawing">
            <summary>
            次回描画(DrawSceneメソッド呼び出し)時にディスプレイリストを更新することを指定するフラグ。
            描画・更新されると、この値はfalseにセットされます。
            </summary>
        </member>
        <member name="F:GLSharp.Model.childrenList">
            <summary>
            このモデルの子オブジェクト。
            </summary>
        </member>
        <member name="F:GLSharp.Model.childrenVisible">
            <summary>
            子モデルを描画するかどうかを表すフラグ
            </summary>
        </member>
        <member name="F:GLSharp.Model.parent">
            <summary>
            このモデルの親モデル
            </summary>
        </member>
        <member name="F:GLSharp.Model.carrier">
            <summary>
            キャリア（carrier : 入れ物）であるかどうかを表すフラグ。
            </summary>
        </member>
        <member name="F:GLSharp.Model.lighting">
            <summary>
            このモデルにライティングを適用するかどうかを表すフラグ。
            </summary>
        </member>
        <member name="M:GLSharp.Model.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GLSharp.Model.Draw(GLSharp.IRenderingParams)">
            <summary>
            このモデルを描画する。
            </summary>
        </member>
        <member name="M:GLSharp.Model.Draw2D(GLSharp.IRenderingParams)">
            <summary>
            2D描画を行う。
            </summary>
            <param name="renderingParams">描画設定パラメータ</param>
            <remarks>
            マウスピッキングの対象とはならない。
            ディスプレイリスト化されない。
            </remarks>
        </member>
        <member name="M:GLSharp.Model.ApplyPosition">
            <summary>
            このモデルの位置と回転を適用する。
            つまり、OpenGLにこのモデルのモデリング変換行列を乗算する命令を送る｡
            位置や回転の状態はModel.Positionプロパティによって指定される。
            </summary>
        </member>
        <member name="M:GLSharp.Model.ApplyPosition(System.Boolean)">
            <summary>
            このモデルの位置と回転を適用する。
            つまり、OpenGLにこのモデルのモデリング変換行列を乗算する命令を送る｡
            位置や回転の状態はModel.Positionプロパティによって指定される。
            </summary>
            <param name="fromTopParent">最上位の親モデルから順に位置を適用するかどうかを指定する</param>
        </member>
        <member name="M:GLSharp.Model.GenList(GLSharp.IRenderingParams)">
            <summary>
            このモデルのディスプレイリストを作成する。
            すでにディスプレイリストが作成されている場合は、以前のリストを破棄して新規に作成する。
            DisplayListEnabledプロパティがfalse、またはCarrierプロパティがtrueの時は、このメソッドが呼ばれてもなにも行わない。
            </summary>
        </member>
        <member name="M:GLSharp.Model.GenList(GLSharp.IRenderingParams,OpenTK.Graphics.OpenGL.ListMode)">
            <summary>
            このモデルのディスプレイリストを作成する。
            すでにディスプレイリストが作成されている場合は、以前のリストを破棄して新規に作成する。
            DisplayListEnabledプロパティがfalse、またはCarrierプロパティがtrueの時は、このメソッドが呼ばれてもなにも行わない。
            </summary>
            <param name="renderingParams">OpenGLのレンダリングコンテキスト</param>
            <param name="listMode">ディスプレイリストの作成モード</param>
        </member>
        <member name="M:GLSharp.Model.CallList">
            <summary>
            このモデルのディスプレイリストを呼び出して描画する。
            DisplayListEnabledプロパティがfalse、またはCarrierプロパティがtrueのときは、
            なにも描画・実行されない。
            </summary>
        </member>
        <member name="M:GLSharp.Model.ReGenListWithChildren(GLSharp.IRenderingParams)">
            <summary>
            子モデルも含めて、ディスプレイリストを再作成する。
            </summary>
        </member>
        <member name="M:GLSharp.Model.OnDisplayListCalled">
            <summary>
            DisplayListCalledイベントを発生させる。
            </summary>
        </member>
        <member name="M:GLSharp.Model.OnModelDrawn">
            <summary>
            ModelDrawnイベントを発生させる。
            </summary>
        </member>
        <member name="M:GLSharp.Model.OnPreDrawModel">
            <summary>
            ModelPreDrawnイベントを発生させる。
            </summary>
        </member>
        <member name="M:GLSharp.Model.OnPreDrawScene">
            <summary>
            PreDrawSceneを発生させる。
            </summary>
        </member>
        <member name="M:GLSharp.Model.OnSceneDrawn">
            <summary>
            SceneDrawnイベントを発生させる。
            </summary>
        </member>
        <member name="M:GLSharp.Model.DrawScene(GLSharp.IRenderingParams)">
            <summary>
            子モデルも含めて、このモデルの描画を行う。
            </summary>
            <remarks>
            モデルの描画は、シーンの描画時にこのメソッドを呼ぶだけでOK。
            位置や回転の指定（モデルビュー変換）も行われる。
            DisplayListEnabledプロパティがtrueで、まだディスプレイリストが作成されていない場合は、
            最初にこのメソッドが使用された時に、自動的にこのメソッド内でディスプレイリストが作成される。
            </remarks>
        </member>
        <member name="M:GLSharp.Model.DrawSceneForSelectionMode(GLSharp.IRenderingParams,System.UInt32)">
            <summary>
            セレクションモード用のシーン描画を行う。
            </summary>
            <param name="renderingParams"></param>
            <param name="name">セレクションモードで描画時に、このモデルに割り当てられている識別番号。</param>
        </member>
        <member name="M:GLSharp.Model.DrawScene2D(GLSharp.IRenderingParams)">
            <summary>
            子モデルも含めて、このモデルの描画を行う。
            </summary>
            <remarks>
            モデルの描画は、シーンの描画時にこのメソッドを呼ぶだけでOK。
            位置や回転の指定（モデルビュー変換）も行われる。
            DisplayListEnabledプロパティがtrueで、まだディスプレイリストが作成されていない場合は、
            最初にこのメソッドが使用された時に、自動的にこのメソッド内でディスプレイリストが作成される。
            </remarks>
        </member>
        <member name="M:GLSharp.Model.DrawChildren2D(GLSharp.IRenderingParams)">
            <summary>
            子モデルの2D描画を行う。
            </summary>
        </member>
        <member name="M:GLSharp.Model.DrawChildren(GLSharp.IRenderingParams)">
            <summary>
            このモデルに属する子モデルを描画する。
            このモデル自身は描画されない。
            </summary>
        </member>
        <member name="M:GLSharp.Model.OnChildrenDrawn">
            <summary>
            ChildrenDrawnイベントを発生させる。
            </summary>
        </member>
        <member name="M:GLSharp.Model.CheckStructAndDepth">
            <summary>
            階層構造のループチェック､
            階層深度（depth）の取得、
            子モデルの階層深度再設定＋ループチェック。
            </summary>
        </member>
        <member name="M:GLSharp.Model.ToString">
            <summary>
            このモデルの名前を取得する。
            </summary>
            <returns>このモデルの名前</returns>
        </member>
        <member name="M:GLSharp.Model.FindChild(System.String)">
            <summary>
            子モデルの中から、指定された名前のモデルを探す。見つからない場合はnullを返す。
            子モデル"modelA"の子に"modelB"がある場合、"modelA.modelB"または単に"modelB"と指定可能。
            </summary>
            <param name="name">探す子モデルの名前。</param>
            <returns>見つかったモデル。見つからない場合はnullを返す。</returns>
            <exception cref="T:System.ArgumentNullException">引数 "name" がnullです。</exception>
        </member>
        <member name="M:GLSharp.Model.FindChildPrivate(System.Int32@)">
            <summary>
            シーンの描画時に、n番目に描画されるモデルを取得する。見つからない場合はnullを返す。
            0番目はこのモデル自身｡次（1番目）に1つめの子モデル・・・、となる。
            </summary>
            <param name="n">描画される順番。n番目に描画されるモデルを取得する。0番目はこのモデル自身。</param>
            <returns>n番目に描画されるモデル</returns>
        </member>
        <member name="M:GLSharp.Model.FindChild(System.Int32)">
            <summary>
            シーンの描画時に、n番目に描画されるモデルを取得する。見つからない場合はnullを返す。
            0番目はこのモデル自身。次（1番目）に1つめの子モデル・・・、となる。
            </summary>
            <param name="n">
            描画される順番。
            n番目に描画されるモデルを検索する。
            0番目はこのモデル自身。
            nが0未満､または描画される数を超えている場合はnullを返す。
            </param>
            <returns>n番目に描画されるモデル。</returns>
        </member>
        <member name="M:GLSharp.Model.FindParent(System.String)">
            <summary>
            指定した名前のモデルの親モデルを探す。見つからない場合はnullを返す。
            </summary>
            <param name="childName">親を探すモデルの名前。</param>
            <returns>見つかった親モデル。見つからない場合はnull。</returns>
            <exception cref="T:System.ArgumentNullException">引数 "childName" がnullです。</exception>
        </member>
        <member name="M:GLSharp.Model.FindParent(GLSharp.Model)">
            <summary>
            指定したモデルの親モデルを探す。見つからない場合はnullを返す。
            </summary>
            <param name="child">親を探すモデル。</param>
            <returns>見つかった親モデル。見つからない場合はnull。</returns>
            <exception cref="T:System.ArgumentNullException">引数 "child" がnullです。</exception>
        </member>
        <member name="M:GLSharp.Model.GetTopParent">
            <summary>
            このモデルの最上位の親モデルを取得する。
            </summary>
            <returns></returns>
        </member>
        <member name="M:GLSharp.Model.MoveChild(System.String,GLSharp.Model)">
            <summary>
            指定した子モデルを別のモデルの子モデルに移し替える。
            </summary>
            <param name="targetNmae">移動させるモデル</param>
            <param name="destination">移動先のモデル</param>
        </member>
        <member name="M:GLSharp.Model.MoveChild(GLSharp.Model,GLSharp.Model)">
            <summary>
            指定した子モデルを別のモデルの子モデルに移し替える。
            </summary>
            <param name="target">移動させるモデル</param>
            <param name="destination">移動先のモデル</param>
        </member>
        <member name="M:GLSharp.Model.RemoveChild(System.String)">
            <summary>
            このモデルから指定した子モデルを削除する。
            </summary>
            <param name="targetNmae">削除する子モデル</param>
        </member>
        <member name="M:GLSharp.Model.RemoveChild(GLSharp.Model)">
            <summary>
            このモデルから指定した子モデルを削除する。
            </summary>
            <param name="target">削除する子モデル</param>
        </member>
        <member name="M:GLSharp.Model.ForEachOfChildren``1(GLSharp.Model.ApplyToChild{``0},``0)">
            <summary>
            このモデル自身と、このモデルが持つ子オブジェクトに対して、
            引数で指定したメソッドを、指定した引数を用いて適用する。
            </summary>
            <typeparam name="ArgmentType">引数の型</typeparam>
            <param name="method">適用するメソッド</param>
            <param name="argument">メソッドに渡す引数</param>
        </member>
        <member name="M:GLSharp.Model.ToModelArray">
            <summary>
            このモデルと、そのすべての子モデルを、
            1次元の配列に格納する。
            </summary>
            <returns>このモデルと、そのすべての子モデルが格納された、1次元の配列</returns>
        </member>
        <member name="M:GLSharp.Model.ToModelList">
            <summary>
            このモデルと、そのすべての子モデルを、
            List&lt;Model&gt;に格納する。
            </summary>
            <returns>このモデルと、そのすべての子モデルが格納されたリスト</returns>
        </member>
        <member name="M:GLSharp.Model.GetParentTransform">
            <summary>
            階層構造のすべての上位（Parentプロパティ＝親モデル）からこのモデルに適用されるモデルビュー変換行列を取得する。
            </summary>
            <returns>モデルビュー変換行列</returns>
            <remarks>
            つまりは、ワールド座標系からこのモデルが置かれるローカル座標系へ変換するための行列を取得する。
            </remarks>
        </member>
        <member name="M:GLSharp.Model.ApplyParentPosition">
            <summary>
            <para>このオブジェクトの階層構造のトップから順にApplyPositionメソッドを呼び出し、
            モデルビュー変換行列を適用する。</para>
            <para>（このオブジェクトのApplyPositionメソッドは呼び出されない。）</para>
            </summary>
        </member>
        <member name="M:GLSharp.Model.TranslateOnWindow(GLSharp.TransformMatrixes,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double[])">
            <summary>
            ウィンドウ上の始点・終点を指定して移動させる。
            </summary>
            <param name="transformMatrixSet">
            <para>プロジェクション行列、ビューイング変換行列、ビューポートのセット。</para>
            <para>（Modelviewプロパティにビューイング変換行列を格納して渡すこと。）</para>
            </param>
            <param name="fromWinX">ウィンドウ上の移動開始点のX座標（左下原点）</param>
            <param name="fromWinY">ウィンドウ上の移動開始点のY座標（左下原点）</param>
            <param name="fromDepth">ウィンドウ上の移動開始点の深度(デプスバッファの値）</param>
            <param name="destWinX">ウィンドウ上の移動終了点のX座標（左下原点）</param>
            <param name="destWinY">ウィンドウ上の移動終了点のY座標（左下原点）</param>
            <param name="destDepth">ウィンドウ上の移動終了点の深度(デプスバッファの値）</param>
            <param name="pickedObjectCoord">
            <para>オブジェクトの座標を渡しておくと、
            引数"destWinX"、"destWinY"、"destDepth"に、移動後のウィンドウ座標を算出して返す。</para>
            <para>nullを渡すと、この計算は行われず、この3つの引数は変更されずにそのまま返される。</para></param>
        </member>
        <member name="M:GLSharp.Model.TranslateOnGridOnWindow(System.Double,System.Double,System.Double,System.Boolean,GLSharp.TransformMatrixes,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double[])">
            <summary>
            調整中。
            </summary>
            <param name="gridSizeX"></param>
            <param name="gridSizeY"></param>
            <param name="gridSizeZ"></param>
            <param name="onGrid"></param>
            <param name="transformMatrixSet"></param>
            <param name="fromWinX"></param>
            <param name="fromWinY"></param>
            <param name="fromDepth"></param>
            <param name="destWinX"></param>
            <param name="destWinY"></param>
            <param name="destDepth"></param>
            <param name="pickedObjectCoord"></param>
            <returns></returns>
        </member>
        <member name="M:GLSharp.Model.RotateOnWindow(GLSharp.Camera,System.Single,System.Single,System.Single)">
            <summary>
            画面上の上下・左右・前後方向の各軸について、モデルを回転させる。
            </summary>
            <param name="camera"></param>
            <param name="rotH">画面上の水平方向に回転させる角度</param>
            <param name="rotV">画面上の垂直方向に回転させる角度</param>
            <param name="rotC">画面上で時計回りに回転させる角度</param>
        </member>
        <member name="M:GLSharp.Model.GetAABBEncloseChildren">
            <summary>
            子モデルを内包するバウンディングボックスを取得する。
            </summary>
            <returns>子モデルを内包するバウンディングボックス。</returns>
        </member>
        <member name="M:GLSharp.Model.DrawAABB(GLSharp.PrimitiveType)">
            <summary>
            AABBを描画する。
            </summary>
            <param name="mode">描画モード。"|"演算子で組み合わせ可能。</param>
        </member>
        <member name="F:GLSharp.Model.depth">
            <summary>
            階層構造の深さを表す。階層構造の最上位に位置する場合は0。
            </summary>
        </member>
        <member name="M:GLSharp.Model.GetDepth">
            <summary>
            現在の階層構造から、このモデルの階層の深さを取得する。階層構造の最上位に位置する場合は0。
            </summary>
            <remarks>
            現在の階層構造から、このモデルの階層の深さを再計算する。
            このメソッドを実行すると、Depthプロパティが再設定される。
            </remarks>
        </member>
        <member name="M:GLSharp.Model.GetDepthIndexes">
            <summary>
            階層構造中の位置を表すインデックスを取得する。
            </summary>
            <returns> 階層構造中の位置を表すインデックス</returns>
        </member>
        <member name="M:GLSharp.Model.GetDepthIndexes(System.Collections.Generic.Queue{System.Int32})">
            <summary>
            階層構造中の位置を表すインデックスを取得する。
            </summary>
            <param name="depthQueue">Index Queue</param>
            <returns>Top Patent</returns>
        </member>
        <member name="M:GLSharp.Model.Clone">
            <summary>
            <para>クローンを作成する。</para>
            <para>Object.MemberwiseClone()メソッドの後、
            Parentはnull、
            Positionはクローン、
            DisplayListはnull（ディスプレイリスト未生成）、
            Childrenに格納されている各要素もそれぞれクローンが作成される。</para>
            </summary>
            <returns>このモデルのクローン</returns>
        </member>
        <member name="M:GLSharp.Model.Clone(System.Boolean)">
            <summary>
            <para>クローンを作成する。</para>
            <para>Object.MemberwiseClone()メソッドの後、
            Parentはnull、
            Positionはクローン、
            DisplayListはnull（ディスプレイリスト未生成）が割り当てられる。</para>
            <para>引数"cloneChildrenChildren"にtrueを指定した場合は、
            Childrenプロパティに格納されている各子モデルもそれぞれクローンが作成され、falseの場合はクローンは作成されずに空のコレクションとなる。
            </para>
            </summary>
            <param name="cloneChildren">子モデルのクローンを作成するかどうかを指定する。</param>
            <returns>このモデルのクローン</returns>
        </member>
        <member name="M:GLSharp.Model.Dispose">
            <summary>
            <para>このモデルが使用しているアンマネージ・リソースを解放します。</para>
            <para>このモデルのディスプレイリスト(DisplayListプロパティ)が作成されている場合は、
            そのリストを削除します。</para>
            <para>Childrenリストに格納されている子モデルも同様にDispose()メソッドが呼び出され、
            リストから子モデルがすべて削除されます。</para>
            </summary>
            <remarks>
            <para>オーバーライドする場合は、
            オーバーライドメソッド内でbase.Dispose()を呼び出してください。</para>
            </remarks>
        </member>
        <member name="M:GLSharp.Model.GettHitObject(GLSharp.SelectionData)">
            <summary>
            
            </summary>
            <param name="selectionData"></param>
            <returns></returns>
        </member>
        <member name="P:GLSharp.Model.Name">
            <summary>
            このモデルの名前を取得・設定する。
            </summary>
        </member>
        <member name="P:GLSharp.Model.Position">
            <summary>
            このモデルの位置・回転状態を取得・設定する。
            </summary>
        </member>
        <member name="P:GLSharp.Model.Listed">
            <summary>
            ディスプレイリスト化されているかどうかを示すフラグを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.Model.Visible">
            <summary>
            可視 / 非可視の指定を取得・設定する。
            </summary>
        </member>
        <member name="P:GLSharp.Model.DisplayList">
            <summary>
            このモデルのディスプレイリストを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.Model.DisplayListEnabled">
            <summary>
            ディスプレイリストが使用可能かどうかを取得・設定する。
            デフォルトはtrue。
            </summary>
            <remarks>
            trueが設定されていると、DrawSceneメソッド内でディスプレイリストを使用して描画する。
            </remarks>
        </member>
        <member name="P:GLSharp.Model.RenewDisplayListOnNextDrawing">
            <summary>
            次回描画(DrawSceneメソッド呼び出し)時にディスプレイリストを更新することを指定するフラグを取得・設定する。
            描画・更新されると、このプロパティの値はfalseにリセットされます。
            </summary>
        </member>
        <member name="P:GLSharp.Model.Children">
            <summary>
            このモデルの子オブジェクトのリストを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.Model.ChildrenVisible">
            <summary>
            子モデルを描画するかどうかを表すフラグを取得・設定する。
            </summary>
        </member>
        <member name="P:GLSharp.Model.Parent">
            <summary>
            このモデルの親モデルを取得・設定する。
            Parentにnullを指定した場合は、このモデルが階層構造の最上位になる。
            </summary>
        </member>
        <member name="P:GLSharp.Model.Carrier">
            <summary>
            キャリア（carrier）であるかどうかを表すフラグを取得・設定する。
            キャリアは、子モデルをまとめる入れ物としてのみ使用され、自身は描画されない。
            描画されない以外は、扱いは同じ。
            </summary>
            <remarks>
            mqoファイル読み込み時に、読み込んだファイル内の複数のメタセコイアオブジェクト（MeshModelで表される）は
            キャリアの子モデル（Children）に入れられる。
            </remarks>
        </member>
        <member name="P:GLSharp.Model.Lighting">
            <summary>
            このモデルにライティングを適用するかどうかを表すフラグを取得・設定する。
            </summary>
        </member>
        <member name="P:GLSharp.Model.Selectable">
            <summary>
            このモデルがマウスピッキングで選択可能かどうかを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.Model.AABB">
            <summary>
            このモデルを内包するAABBを取得する。
            </summary>
        </member>
        <member name="E:GLSharp.Model.DisplayListCalled">
            <summary>
            DrawSceneメソッド内でディスプレイリストが呼び出された後に発生するイベント。
            </summary>
        </member>
        <member name="E:GLSharp.Model.ModelDrawn">
            <summary>
            DrawSceneメソッド内で、
            Draw()またはCallList()メソッドによってこのモデルが描画された後に発生するイベント。
            （Vislble, Carrier プロパティに関係なく発生する。）
            </summary>
        </member>
        <member name="E:GLSharp.Model.PreDrawModel">
            <summary>
            DrawSceneメソッド内で、
            Draw()またはCallList()メソッドによってこのモデルが描画される前に発生するイベント。
            （Vislble, Carrier プロパティに関係なく発生する。）
            </summary>
        </member>
        <member name="E:GLSharp.Model.PreDrawScene">
            <summary>
            DrawSceneメソッドが呼び出されたとき、
            シーンが描画される前に発生するイベント。
            </summary>
        </member>
        <member name="E:GLSharp.Model.SceneDrawn">
            <summary>
            DrawSceneメソッドが呼び出されたとき、
            シーンが描画された後に発生するイベント。
            </summary>
        </member>
        <member name="E:GLSharp.Model.ChildrenDrawn">
            <summary>
            DrawChildrenメソッドが呼び出されたとき、
            子モデルがすべて描画された後に発生するイベント。
            </summary>
        </member>
        <member name="P:GLSharp.Model.IsDisposed">
            <summary>
            <para>このモデルが使用しているアンマネージ・リソースが解放済みかどうかを取得します。</para>
            </summary>
        </member>
        <member name="T:GLSharp.Model.ApplyToChild`1">
            <summary>
            ForEachOfChildrenメソッドに使用するデリゲート
            </summary>
            <typeparam name="ArgumentType">ForEachOfChildrenメソッド内で、このデリゲートに渡される引数の型</typeparam>
            <param name="child">ForEachOfChildrenメソッド内で、このデリゲートに渡される子モデル</param>
            <param name="argment">ForEachOfChildrenメソッド内で、このデリゲートに渡される引数</param>
        </member>
        <member name="T:GLSharp.Model.ModelList">
            <summary>
            複数のモデルをまとめて扱うためのリスト。
            </summary>
            <remarks>
            主にModelクラスのChildrenプロパティなどで使用される。
            </remarks>
        </member>
        <member name="T:GLSharp.OwnedItemCollection`2">
            <summary>
            <para>オーナーによって所有されるアイテムのリスト。</para>
            <para>オーナーとアイテムでの相互の参照を提供する。</para>
            </summary>
            <typeparam name="TOwner"></typeparam>
            <typeparam name="TItem"></typeparam>
            <remarks>
            <para>このリストにアイテムが追加されると、アイテムのオーナーが自動的に設定される。</para>
            <para>格納されるアイテムはnull不可、重複不可。</para>
            </remarks>
        </member>
        <member name="F:GLSharp.OwnedItemCollection`2.list">
            <summary>
            内部で使用されるアイテムのリスト。
            </summary>
        </member>
        <member name="F:GLSharp.OwnedItemCollection`2.owner">
            <summary>
            このコレクションを所有するオブジェクト
            </summary>
        </member>
        <member name="M:GLSharp.OwnedItemCollection`2.#ctor(`0)">
            <summary>
            オーナーによって所有されるアイテムのリストを初期化する。
            </summary>
            <param name="owner">このリストのオーナー（=アイテムのオーナー）</param>
        </member>
        <member name="M:GLSharp.OwnedItemCollection`2.SetItemOwner(`1,`0)">
            <summary>
            itemのOwnerを設定する。
            </summary>
            <param name="item">オーナーを設定するアイテム</param>
            <param name="owner">アイテムの新しいオーナー</param>
        </member>
        <member name="M:GLSharp.OwnedItemCollection`2.CheckItemOwnerToAdd(`1)">
            <summary>
            内部のリストにアイテムを追加する前に使用する。
            アイテムのオーナーをチェックし、リストに加えられるアイテムであればtrue、そうでなければfalseを返す。
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:GLSharp.OwnedItemCollection`2.SetItemOwnerToAdd(`1)">
            <summary>
            内部のリストにアイテムを追加する前に使用する。
            アイテムのオーナーを設定する。
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:GLSharp.OwnedItemCollection`2.SetItemOwnerToRemove(`1)">
            <summary>
            内部のリストからアイテムを削除するときに使用する。
            アイテムのオーナーをリセット(nullに設定)する。
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:GLSharp.OwnedItemCollection`2.Owner">
            <summary>
            [get,set] このコレクションを所有するオブジェクト
            </summary>
        </member>
        <member name="P:GLSharp.OwnedItemCollection`2.OwndItemCollectionEventArgs.Target">
            <summary>
            コレクションへの追加または削除されるアイテムを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.OwnedItemCollection`2.OwndItemCollectionEventArgs.Index">
            <summary>
            <para>アイテムが追加されたときのインデックスを取得する。</para>
            <para>削除された場合は-1になる。</para>
            </summary>
        </member>
        <member name="M:GLSharp.Model.ModelList.#ctor(GLSharp.Model)">
             <summary>
             ModelListのインスタンスを初期化する。
             </summary>
            <param name="owner">このインスタンスを所有する親モデル</param>
        </member>
        <member name="M:GLSharp.Model.ModelList.#ctor(GLSharp.Model,System.Collections.Generic.IEnumerable{GLSharp.Model})">
             <summary>
             ModelListのインスタンスを初期化する。
             </summary>
            <param name="owner">このインスタンスを所有する親モデル</param>
             <param name="children">初期化と同時にリストに加えるモデル</param>
        </member>
        <member name="M:GLSharp.Model.ModelList.IndexOf(System.String)">
            <summary>
            指定した名前のモデルを検索し、そのインデックスを返す。見つからない場合は-1を返す。
            </summary>
            <param name="name">インデックスを検索するモデルの名前（Nameプロパティ）</param>
            <returns>インデックス</returns>
        </member>
        <member name="M:GLSharp.Model.ModelList.Remove(System.String)">
            <summary>
            指定したインデックスのモデルをリストから削除する。
            </summary>
            <param name="name">削除するモデルの名前</param>
            <remarks>
            削除したモデルの親モデル(Parentプロパティ)は、
            自動的にnullになる。
            </remarks>
        </member>
        <member name="M:GLSharp.Model.ModelList.Clone(GLSharp.Model)">
            <summary>
            クローンを作成する。格納されている要素もすべてクローンが作成される。
            </summary>
            <param name="parent">このコレクションを所有する親モデル。</param>
            <returns>クローン</returns>
        </member>
        <member name="M:GLSharp.Model.ModelList.Find(System.String)">
            <summary>
            リストの中から、指定された名前のモデルを探す。見つからない場合はnullを返す。
            リストの要素が保持する子モデルも対象となる。
            "modelA"の子に"modelB"がある場合、"modelA.modelB"または単に"modelB"と指定可能。
            </summary>
            <param name="name">探すモデルの名前。</param>
            <returns>見つかったモデル。見つからない場合はnullを返す。</returns>
            <exception cref="T:System.ArgumentNullException">引数 "name" がnullです。</exception>
        </member>
        <member name="M:GLSharp.Model.ModelList.Find(System.Int32[])">
            <summary>
            階層構造中の位置を表すインデックスを指定して、該当するモデルを探す。
            見つからない場合はnullを返す。
            </summary>
            <param name="depthIndexes">階層構造中の位置を表すインデックス</param>
            <returns>見つかったモデル。見つからない場合はnullを返す。</returns>
        </member>
        <member name="P:GLSharp.Model.ModelList.Item(System.String)">
            <summary>
            リストの中から、指定された名前のモデルを取得する。見つからない場合はnullを返す。
            </summary>
            <param name="name">取得するモデルの名前（Nameプロパティ）</param>
            <returns>指定された名前のモデル</returns>
        </member>
        <member name="T:GLSharp.TextModel">
            <summary>
            メッシュ化された文字グリフ・テキストを扱うクラス。
            </summary>
            <remarks>
            アウトラインフォントをメッシュ化することも可能。
            簡単なテキストのレイアウトを設定できる。
            </remarks>
        </member>
        <member name="T:GLSharp.MeshModel">
            <summary>
            メッシュデータの保持・描画を行うクラス。
            MQOファイルの読み込み、MQOファイルへの書き出しも可能。
            </summary>
            <remarks>
            MQOファイルを読み込み、その内容をOpenGLで描画することが可能。
            ミラー、回転体、曲面、メタボールなどは未対応なので、
            頂点をフリーズしておかないと描画されない。
            ver.2.4以降の階層構造・ローカル座標には対応。
            </remarks>
        </member>
        <member name="F:GLSharp.MeshModel.MQOChunkMaterial">
            <summary>"Material"</summary>
        </member>
        <member name="F:GLSharp.MeshModel.MQOChunkObject">
            <summary>"Object"</summary>
        </member>
        <member name="F:GLSharp.MeshModel.MQObjChunkVisible">
            <summary>"visible"</summary>
        </member>
        <member name="F:GLSharp.MeshModel.MQObjChunkFacet">
            <summary>"facet"</summary>
        </member>
        <member name="F:GLSharp.MeshModel.MQObjChunkShading">
            <summary>"shading"</summary>
        </member>
        <member name="F:GLSharp.MeshModel.MQObjChunkScale">
            <summary>"scale"</summary>
        </member>
        <member name="F:GLSharp.MeshModel.MQObjChunkRotation">
            <summary>"rotation"</summary>
        </member>
        <member name="F:GLSharp.MeshModel.MQObjChunkTranslation">
            <summary>""</summary>
        </member>
        <member name="F:GLSharp.MeshModel.MQObjChunkDepth">
            <summary>"depth"</summary>
        </member>
        <member name="F:GLSharp.MeshModel.MQObjChunkMirror">
            <summary>"mirror"</summary>
        </member>
        <member name="F:GLSharp.MeshModel.MQObjChunkMirrorAxis">
            <summary>"mirror_axis"</summary>
        </member>
        <member name="F:GLSharp.MeshModel.MQObjChunkMirrorDistance">
            <summary>"mirror_dis"</summary>
        </member>
        <member name="F:GLSharp.MeshModel.MQObjChunkVertex">
            <summary>"vertex"</summary>
        </member>
        <member name="F:GLSharp.MeshModel.MQObjChunkFace">
            <summary>"face"</summary>
        </member>
        <member name="F:GLSharp.MeshModel.MQObjChunkBVertex">
            <summary>"vertex"</summary>
        </member>
        <member name="F:GLSharp.MeshModel.mesh">
            <summary>
            メッシュ
            </summary>
            <remarks>
            モデルの頂点座標やプリミティブ、マテリアルなどのデータが格納される。
            このメッシュのデータを元に、描画を行う。
            </remarks>
        </member>
        <member name="M:GLSharp.MeshModel.#ctor">
            <summary>
            デフォルトコンストラクタ。
            mesh = null、Name = "no_name"で初期化される。
            </summary>
        </member>
        <member name="M:GLSharp.MeshModel.#ctor(System.String,System.String,System.Single,System.Boolean,GLSharp.MeshModel.MQOLoadingParams)">
            <summary>
            MQOファイル(Metasequoia オブジェクトファイル *.mqo)を読み込み、MeshModelクラスのインスタンスを初期化する。
            </summary>
            <param name="mqoFilePath">mqoファイルのパス</param>
            <param name="name">このオブジェクトの名前</param>
            <param name="scale">拡大率（この値によって頂点座標がスケーリングされる。）</param>
            <param name="options"></param>
            <param name="displayListEnabled">描画時に自動的にディスプレイリスト化されるかどうかを指定する。</param>
        </member>
        <member name="M:GLSharp.MeshModel.#ctor(System.Reflection.Assembly,System.String,System.String,System.Single,System.Boolean,GLSharp.MeshModel.MQOLoadingParams)">
            <summary>
            アセンブリの埋め込みリソースになっているMQOファイルを読み込んで、MeshModelクラスのインスタンスを初期化する。
            関連テクスチャもアセンブリの埋め込みリソースから読み込まれる。
            </summary>
            <param name="assembly">MQOファイルを埋め込みリソースとして含んでいるアセンブリ</param>
            <param name="mqoFilePath">mqoファイルの名前。アセンブリの名前は引数"assembly"から自動的に取得されるので不要。</param>
            <param name="name">このオブジェクトの名前</param>
            <param name="scale">拡大率（この値によって頂点座標がスケーリングされる。）</param>
            <param name="options"></param>
            <param name="displayListEnabled">描画時に自動的にディスプレイリスト化されるかどうかを指定する。</param>
        </member>
        <member name="M:GLSharp.MeshModel.LoadMqoOnConstruction(System.Reflection.Assembly,System.String,System.String,System.Single,System.Boolean,GLSharp.MeshModel.MQOLoadingParams)">
            <summary>
            <para>MQOファイルを読み込んで、MeshModelクラスのインスタンスを初期化する。</para>
            <para>アセンブリの埋め込みリソースからファイルを取得する場合は、
            関連テクスチャもアセンブリの埋め込みリソースから読み込まれる。</para>
            </summary>
            <param name="assembly">MQOファイルを埋め込みリソースとして含んでいるアセンブリ。
            nullを渡すと、通常のファイルからの読み込みになる。</param>
            <param name="mqoFilePath">mqoファイルの名前。アセンブリの名前は引数"assembly"から自動的に取得されるので不要。</param>
            <param name="name">このオブジェクトの名前</param>
            <param name="scale">拡大率（この値によって頂点座標がスケーリングされる。）</param>
            <param name="options">可視ならtrue、不可視ならfalse。</param>
            <param name="displayListEnabled">描画時に自動的にディスプレイリスト化されるかどうかを指定する。</param>
        </member>
        <member name="M:GLSharp.MeshModel.FinalizeLoading">
            <summary>
            読み込み・初期設定後の後始末。
            子オブジェクトについて再帰的に処理する。
            </summary>
        </member>
        <member name="M:GLSharp.MeshModel.ParseMaterial(System.String,GLSharp.TextureDictionaly,System.Reflection.Assembly)">
            <summary>
            マテリアルが記述されている文字列を読み取ってMaterialのインスタンスを作成する。
            </summary>
            <param name="line">マテリアルが記述されている行</param>
            <param name="texDict"></param>
            <param name="assembly">テクスチャファイルが埋め込みリソースとして含まれているアセンブリ。
            普通にファイルからテクスチャ画像をロードする場合はnullを渡す。
            アセンブリの埋め込みリソースからロードする場合のみ、該当アセンブリを渡す。</param>
            <returns>読み取った文字列から作成されたMaterialのインスタンス</returns>
        </member>
        <member name="M:GLSharp.MeshModel.ReadMQObjectFromFile(System.IO.StreamReader,System.String,OpenTK.Graphics.OpenGL.ShadingModel,GLSharp.Material[],System.Single)">
            <summary>
            mqoファイルから頂点データを読み込んでMeshModelクラスのインスタンスに格納する。
            </summary>
            <param name="sr">mqoファイルのストリーム</param>
            <param name="objName">読み込むオブジェクトの名前</param>
            <param name="shadingModel">スムーズシェーディング、またはフラットシェーディングの指定。（ファイル内で指定されている場合は無効）</param>
            <param name="material">マテリアル</param>
            <param name="scale">スケーリングの拡大率</param>
            <returns>読み込んだ頂点データを格納したMeshModelクラスのインスタンス</returns>
        </member>
        <member name="M:GLSharp.MeshModel.#ctor(System.String,System.String,System.Single,System.Boolean,GLSharp.MeshModel.MQOLoadingParams,System.Single[])">
            <summary>
            MQOファイル(Metasequoia オブジェクトファイル *.mqo)を読み込み、MeshModelクラスのインスタンスを初期化する。
            </summary>
            <param name="mqoFilePath">mqoファイルのパス</param>
            <param name="name">このオブジェクトの名前</param>
            <param name="scale">拡大率（この値によって頂点座標がスケーリングされる。）</param>
            <param name="displayListEnabled"></param>
            <param name="opotions"></param>
            <param name="position">初期位置の座標 (float[3]) (x,y,z)</param>
        </member>
        <member name="M:GLSharp.MeshModel.#ctor(System.String,System.String,System.Single,System.Boolean,GLSharp.MeshModel.MQOLoadingParams,GLSharp.Position)">
            <summary>
            MQOファイル(Metasequoia オブジェクトファイル *.mqo)を読み込み、MeshModelクラスのインスタンスを初期化する。
            </summary>
            <param name="mqoFilePath">mqoファイルのパス</param>
            <param name="name">このオブジェクトの名前</param>
            <param name="scale">拡大率（この値によって頂点座標がスケーリングされる。）</param>
            <param name="displayListEnabled"></param>
            <param name="opotions"></param>
            <param name="position">初期位置</param>
        </member>
        <member name="M:GLSharp.MeshModel.#ctor(GLSharp.Mesh,System.String,OpenTK.Graphics.OpenGL.ShadingModel,System.Boolean,System.Boolean)">
            <summary>
            既存のMeshクラスのインスタンスから、MeshModelクラスのインスタンスを初期化する。
            </summary>
            <param name="mesh">このオブジェクトに割り当てるメッシュ</param>
            <param name="name">このオブジェクトの名前</param>
            <param name="shadingModel">スムーズシェーディング、またはフラットシェーディングの指定。</param>
            <param name="visible">可視ならtrue、不可視ならfalse。</param>
            <param name="displayListEnabled">自動的にディスプレイリストを生成するかどうかの指定。</param>
        </member>
        <member name="M:GLSharp.MeshModel.#ctor(GLSharp.Mesh,System.String,OpenTK.Graphics.OpenGL.ShadingModel,System.Boolean,System.Boolean,System.Single[])">
            <summary>
            既存のMeshクラスのインスタンスから、MeshModelインスタンスを初期化する。
            </summary>
            <param name="mesh">このオブジェクトに割り当てるメッシュ</param>
            <param name="name">このオブジェクトの名前</param>
            <param name="shadingModel">スムーズシェーディング、またはフラットシェーディングの指定。</param>
            <param name="visible">可視ならtrue、不可視ならfalse。</param>
            <param name="displayListEnabled">自動的にディスプレイリストを生成するかどうかの指定。</param>
            <param name="position">このオブジェクトの初期位置の座標</param>
        </member>
        <member name="M:GLSharp.MeshModel.#ctor(GLSharp.Mesh,System.String,OpenTK.Graphics.OpenGL.ShadingModel,System.Boolean,System.Boolean,GLSharp.Position)">
            <summary>
            既存のMeshクラスのインスタンスから、MeshModelインスタンスを初期化する。
            </summary>
            <param name="mesh">このオブジェクトに割り当てるメッシュ</param>
            <param name="name">このオブジェクトの名前</param>
            <param name="shadingModel">スムーズシェーディング、またはフラットシェーディングの指定。</param>
            <param name="visible">可視ならtrue、不可視ならfalse。</param>
            <param name="displayListEnabled">自動的にディスプレイリストを生成するかどうかの指定。</param>
            <param name="position">このオブジェクトの初期位置を表すPositionクラスのインスタンス</param>
        </member>
        <member name="M:GLSharp.MeshModel.Draw(GLSharp.IRenderingParams)">
            <summary>
            メッシュの描画を行う。
            </summary>
            <remarks>
            DrawSceneメソッドと異なり、メッシュの描画のみ。子オブジェクトは描画されない。
            </remarks>
        </member>
        <member name="M:GLSharp.MeshModel.Draw2D(GLSharp.IRenderingParams)">
            <summary>
            2D描画は行われない。
            （呼び出しても何も実行されない。）
            </summary>
            <param name="renderingParams"></param>
        </member>
        <member name="M:GLSharp.MeshModel.ScaleVertexesWithChildren(System.Single,System.Single,System.Single)">
            <summary>
            メッシュのすべての頂点の座標をスケーリング（拡大・縮小）する。
            </summary>
            <param name="scale_x">x軸方向の拡大率</param>
            <param name="scale_y">y軸方向の拡大率</param>
            <param name="scale_z">z軸方向の拡大率</param>
        </member>
        <member name="M:GLSharp.MeshModel.SetShowWireFrameWithChildren(System.Boolean,System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            このMeshModel自身と子として持っているMeshModelをすべて、
            ワイヤーフレームが描画されるか、またされないかのどちらかに設定する。
            </summary>
            <param name="showWireFrame">描画する場合はtrue、しない場合はfalse。</param>
            <param name="lineWidth">ワイヤーフレームの線の幅。</param>
            <param name="useFaseMaterials">面に指定されたマテリアルを用いてワイヤーフレームを描画するかどうかを指定する。</param>
            <param name="lighting">ワイヤーフレームにライティングを適用するかどうかを指定する。</param>
            <param name="hiddenByFaces">面が非表示でもワイヤーフレームや点で描かれた頂点が面に隠れるようにするかどうかを指定する。(頂点の描画と共通)</param>
        </member>
        <member name="M:GLSharp.MeshModel.SetShowWireFrameWithChildren(System.Boolean)">
            <summary>
            このMeshModel自身と子として持っているMeshModelをすべて、
            ワイヤーフレームが描画されるか、またされないかのどちらかに設定する。
            </summary>
            <param name="showWireFrame">描画する場合はtrue、しない場合はfalse。</param>
        </member>
        <member name="M:GLSharp.MeshModel.SetShowFaceWithChildren(System.Boolean,OpenTK.Graphics.OpenGL.ShadingModel,System.Boolean)">
            <summary>
            このMeshModel自身と子として持っているMeshModelをすべて、
            面が描画されるか、またされないかのどちらかに設定する。
            </summary>
            <param name="showFace">描画する場合はtrue、しない場合はfalse。</param>
            <param name="shadingModel">スムーズシェーディング、またはフラットシェーディングの指定。</param>
            <param name="hiddenByFaces">面が非表示でもワイヤーフレームや点で描かれた頂点が面に隠れるようにするかどうかを指定する。(頂点の描画と共通)</param>
        </member>
        <member name="M:GLSharp.MeshModel.SetShowFaceWithChildren(System.Boolean)">
            <summary>
            このMeshModel自身と子として持っているMeshModelをすべて、
            面が描画されるか、またされないかのどちらかに設定する。
            </summary>
            <param name="showFace">描画する場合はtrue、しない場合はfalse。</param>
        </member>
        <member name="M:GLSharp.MeshModel.SetShadingModelWithChildren(OpenTK.Graphics.OpenGL.ShadingModel)">
            <summary>
            このMeshModel自身と子として持っているMeshModelをすべて、
            スムースシェーディングかフラットシェーディングのどちらかに設定する。
            </summary>
            <param name="shadingModel">スムーズシェーディング、またはフラットシェーディングの指定。</param>
        </member>
        <member name="M:GLSharp.MeshModel.SetShowVertexNormalsWithChildren(System.Boolean,System.Single,System.Single)">
            <summary>
            このMeshModel自身と子として持っているMeshModelをすべて、
            頂点法線ベクトルが描画されるか、またされないかのどちらかに設定する。
            </summary>
            <param name="showNormals">描画する場合はtrue、しない場合はfalse。</param>
            <param name="width">頂点法線ベクトルの線の幅。</param>
            <param name="lenth">頂点法線ベクトルの線の長さ。</param>
        </member>
        <member name="M:GLSharp.MeshModel.SetShowVertexNormalsWithChildren(System.Boolean)">
            <summary>
            このMeshModel自身と子として持っているMeshModelをすべて、
            頂点法線ベクトルが描画されるか、またされないかのどちらかに設定する。
            </summary>
            <param name="showNormals">描画する場合はtrue、しない場合はfalse。</param>
        </member>
        <member name="M:GLSharp.MeshModel.SetShowFaceNormalsWithChildren(System.Boolean)">
            <summary>
            このMeshModel自身と子として持っているMeshModelをすべて、
            面法線ベクトルが描画されるか、またされないかのどちらかに設定する。
            </summary>
            <param name="showNormals">描画する場合はtrue、しない場合はfalse。</param>
        </member>
        <member name="M:GLSharp.MeshModel.SetShowFaceNormalsWithChildren(System.Boolean,System.Single,System.Single)">
            <summary>
            このMeshModel自身と子として持っているMeshModelをすべて、
            面法線ベクトルが描画されるか、またされないかのどちらかに設定する。
            </summary>
            <param name="showNormals">描画する場合はtrue、しない場合はfalse。</param>
            <param name="width">面法線ベクトルの線の幅。</param>
            <param name="lenth">面法線ベクトルの線の長さ。</param>
        </member>
        <member name="M:GLSharp.MeshModel.SetShowVertexPointsWithChildren(System.Boolean,System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            このMeshModel自身と子として持っているMeshModelをすべて、
            頂点が描画されるか、またされないかのどちらかに設定する。
            </summary>
            <param name="showVertexes">頂点を点として描画する場合はtrue、しない場合はfalse。</param>
            <param name="pointSize">頂点を描画する点のサイズ。</param>
            <param name="useFaseMaterials">面に指定されているマテリアルを用いて頂点を描画するかどうかを指定する。</param>
            <param name="lighting">ライティングを適用するかどうかを指定する。</param>
            <param name="hiddenByFaces">面が非表示でもワイヤーフレームや点で描かれた頂点が面に隠れるようにするかどうかを指定する。(頂点の描画と共通)</param>
        </member>
        <member name="M:GLSharp.MeshModel.SetShowVertexPointsWithChildren(System.Boolean)">
            <summary>
            このMeshModel自身と子として持っているMeshModelをすべて、
            頂点が描画されるか、またされないかのどちらかに設定する。
            </summary>
            <param name="showVertexes">描画する場合はtrue、しない場合はfalse。</param>
        </member>
        <member name="M:GLSharp.MeshModel.SetOptionsWithChildren(System.Boolean,OpenTK.Graphics.OpenGL.ShadingModel,System.Boolean)">
            <summary>
            このMeshModel自身と子として持っているMeshModelについてすべて、
            フィールドを同じ値に設定する。
            </summary>
            <param name="visible">表示・非表示の指定</param>
            <param name="shadingModel">スムーズシェーディング、またはフラットシェーディングの指定。</param>
            <param name="displayListEnabled">ディスプレイリスト化して描画するかどうかの指定</param>
        </member>
        <member name="M:GLSharp.MeshModel.SaveAsMQOFile(System.Collections.Generic.IList{GLSharp.Model},System.String,System.Single,System.Boolean)">
            <summary>
            複数のMeshModelを1つのMQO形式(*.mqo)のファイルに保存する。
            </summary>
            <param name="models">ファイルに出力するモデル</param>
            <param name="fileName">保存するファイル名</param>
            <param name="scale">出力時のメッシュの拡大率</param>
            <param name="genTextureImages">
            テクスチャを新規の画像ファイルとして保存するかどうかを指定する。
            trueにした場合、各テクスチャはPNG形式の画像ファイルで保存される。
            </param>
            <remarks>
            MeshModelクラスのインスタンス以外は、メッシュデータは書き出されません。
            Model.Carrierプロパティがtrueのものは無視され、MQOファイル内に書き込まれません。
            </remarks>
        </member>
        <member name="M:GLSharp.MeshModel.SaveAsMQOFile(System.String,System.Single,System.Boolean)">
            <summary>
            MeshModelをMQO形式(*.mqo)のファイルに保存する。
            </summary>
            <param name="fileName">保存するファイル名</param>
            <param name="scale">出力時のメッシュの拡大率</param>
            <param name="genTextureImages">
            テクスチャを新規の画像ファイルとして保存するかどうかを指定する。
            trueにした場合、各テクスチャはPNG形式の画像ファイルで保存される。
            </param>
            <remarks>
            MeshModelクラスのインスタンス以外は、メッシュデータは書き出されません。
            Model.Carrierプロパティがtrueのものは無視され、MQOファイル内に書き込まれません。
            </remarks>
        </member>
        <member name="M:GLSharp.MeshModel.WriteMQObject(System.IO.StreamWriter,GLSharp.Model,System.Single,System.Collections.Generic.List{GLSharp.Material},System.String,System.Single[],System.Int32)">
            <summary>
            MQObjectを書き込む。
            </summary>
            <param name="sw">作成中のファイルのストリーム</param>
            <param name="model">MQObjectとして書き込むMeshModel</param>
            <param name="scale">メッシュの拡大率</param>
            <param name="allMaterials">MeshModelで参照しているMaterial</param>
            <param name="objName">書き込むMQObjectの名前</param>
            <param name="matrix">変換行列スタック</param>
            <param name="depth"></param>
        </member>
        <member name="M:GLSharp.MeshModel.WriteFaces(System.IO.StreamWriter,GLSharp.Mesh,System.Collections.Generic.List{GLSharp.Material})">
            <summary>
            メッシュのプリミティブ（面）データを書き出す。
            </summary>
            <param name="sw"></param>
            <param name="mesh"></param>
            <param name="materials"></param>
        </member>
        <member name="M:GLSharp.MeshModel.GetAllMaterials">
            <summary>
            このMeshModelとその子モデル(MeshModelのみ対応)が持つすべてのマテリアルを検索・取得する。
            </summary>
            <returns>マテリアルのリスト</returns>
        </member>
        <member name="M:GLSharp.MeshModel.GetAllTextures">
            <summary>
            このMeshModelとその子モデル(MeshModelクラスのインスタンスのみ対応)が持つすべてのテクスチャを検索・取得する。
            </summary>
            <returns>テクスチャのリスト</returns>
        </member>
        <member name="M:GLSharp.MeshModel.Clone">
            <summary>
            <para>クローンを作成する。</para>
            <para>Object.MemberwiseClone()メソッドの後、
            Parentはnull、
            Positionはクローン、
            DisplayListはnull（ディスプレイリスト未生成）、
            Meshはクローン、
            Childrenに格納されている各要素もそれぞれクローンが作成される。</para>
            </summary>
            <returns>このモデルのクローン</returns>
        </member>
        <member name="M:GLSharp.MeshModel.Clone(System.Boolean)">
            <summary>
            <para>クローンを作成する。</para>
            <para>Parentはnull、
            Positionはクローン、
            DisplayListはnull（ディスプレイリスト未生成）、
            Meshはクローンが割り当てられる。</para>
            <para>引数"cloneChildrenChildren"にtrueを指定した場合は、
            Childrenプロパティに格納されている各子モデルもそれぞれクローンが作成され、falseの場合はクローンは作成されずに空のコレクションとなる。
            </para>
            </summary>
            <param name="cloneChildren">子モデルのクローンを作成するかどうかを指定する。
            falseの場合はクローンは作成されず、子モデルは空のコレクションとなる。</param>
            <returns>このモデルのクローン</returns>
        </member>
        <member name="M:GLSharp.MeshModel.Clone(System.Boolean,System.Boolean)">
            <summary>
            クローンを作成する。名前(Nameプロパティ)には"_Clone"が付加される。
            クローンの各フィールドについて、同じ値を持つ新規インスタンス（クローン）を作成するか、
            このオブジェクトが持つインスタンスをそのまま参照するかを指定する。
            </summary>
            <param name="cloneChildren">
            子モデルのクローンを作成するかどうかを指定する。
            falseの場合はクローンは作成されず、子モデルは空のコレクションとなる。
            childrenCollectionにtrueを指定した場合のみ有効。
            </param>
            <param name="cloneMesh">
            メッシュ(Mesh)のクローン生成の指定。true:クローン生成、false:参照のコピー。
            </param>
            <returns>このオブジェクトのクローン</returns>
            <remarks>
            childrenCloneにtrueを指定した場合、MeshModelクラス以外の子モデルはModel.Clone()によってクローンが作成される。
            </remarks>
        </member>
        <member name="P:GLSharp.MeshModel.Selectable">
            <summary>
            セレクションモードで選択可能かどうかを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.MeshModel.IgnoreMQOTextureFileLoadException">
            <summary>
            MQOファイルの読み込み時に、
            テクスチャ画像ファイルの読み込みエラーを無視するかどうかのフラグ。
            デフォルトはfalse。
            </summary>
        </member>
        <member name="T:GLSharp.MeshModel.MQOLoadingParams">
            <summary>
            MQOファイルをロードする際のオプションを表す。
            </summary>
        </member>
        <member name="F:GLSharp.TextModel.hdc">
            <summary>
            グリフを作成する際のデバイスコンテキストのハンドル
            </summary>
        </member>
        <member name="F:GLSharp.TextModel.character">
            <summary>
            このモデルが表す文字
            </summary>
        </member>
        <member name="F:GLSharp.TextModel.br">
            <summary>
            改行文字かどうかを表すフラグ。
            </summary>
        </member>
        <member name="F:GLSharp.TextModel.fontInfo">
            <summary>
            このグリフのフォント情報。
            </summary>
        </member>
        <member name="F:GLSharp.TextModel.size">
            <summary>
            グリフのサイズ
            </summary>
        </member>
        <member name="F:GLSharp.TextModel.cellHeight">
            <summary>
            グリフのセルの高さ。
            </summary>
        </member>
        <member name="F:GLSharp.TextModel.extrusion">
            <summary>
            グリフの奥行き幅。
            </summary>
        </member>
        <member name="F:GLSharp.TextModel.originalMetrics">
            <summary>
            (readonly) サイズが1.0fのときのグリフのメトリック。
            </summary>
        </member>
        <member name="F:GLSharp.TextModel.metrics">
            <summary>
            グリフのメトリック。
            </summary>
        </member>
        <member name="F:GLSharp.TextModel.lineMetrics">
            <summary>
            描画するテキストの各行ごとのサイズなどの情報を格納する。
            </summary>
        </member>
        <member name="F:GLSharp.TextModel.layout">
            <summary>
            文字列のレイアウト
            </summary>
        </member>
        <member name="F:GLSharp.TextModel.vertical">
            <summary>
            縦書きかどうかを表すフラグ
            </summary>
        </member>
        <member name="M:GLSharp.TextModel.#ctor(System.String,System.Drawing.Font,System.Single,System.Single,System.Int32,System.IntPtr,GLSharp.TextLayout,System.Boolean,System.Single,System.Single,GLSharp.Position,GLSharp.Material)">
            <summary>
            アウトラインフォントのテキストをポリゴン化したモデルを作成する。
            </summary>
            <param name="text">ポリゴン化するテキスト。</param>
            <param name="font">フォント</param>
            <param name="size">文字モデルのサイズ</param>
            <param name="extrusion">文字モデルの奥行き幅</param>
            <param name="numCurveSplit">文字の曲線部の分割数</param>
            <param name="hdc">デバイスコンテキストのハンドル</param>
            <param name="layout">テキストのレイアウト</param>
            <param name="vertical">テキストが縦書きかどうかを指定する</param>
            <param name="charSpace">各文字間のスペース。0なら文字同士が詰めて配置される。1.0fで文字1つ分のスペース。</param>
            <param name="lineSpace">各行間のスペース。0なら各行が詰めて配置される。1.0fで１行分のスペース。</param>
            <param name="pos">初期位置</param>
            <param name="material">文字モデルのマテリアル</param>
            <remarks>
            引数"text"：ポリゴン化するテキストは、複数行も可能。
            改行は'\n'。'\r'はテキストから削除される。
            '\t'(タブ)はスペース4つに置き換えられる。
            引数"font"は、縦書きフォントも使用可能。
            文字モデルのサイズは、フォントのサイズでは指定できない。
            引数"size"で指定すること。
            作成された各文字モデルは子モデルとして保持される。
            </remarks>
        </member>
        <member name="M:GLSharp.TextModel.#ctor(System.String,System.Drawing.Font,System.Single,System.Single,System.IntPtr,GLSharp.TextLayout,GLSharp.Material)">
            <summary>
            アウトラインフォントのテキストをポリゴン化したモデルを作成する。
            </summary>
            <param name="text">ポリゴン化するテキスト。</param>
            <param name="font">フォント</param>
            <param name="size">文字モデルのサイズ</param>
            <param name="extrusion">文字モデルの奥行き幅</param>
            <param name="hdc">デバイスコンテキストのハンドル</param>
            <param name="layout">テキストのレイアウト</param>
            <param name="material">文字モデルのマテリアル</param>
            <remarks>
            引数"text"：ポリゴン化するテキストは、複数行も可能。
            改行は'\n'。'\r'はテキストから削除される。
            '\t'(タブ)はスペース4つに置き換えられる。
            引数"font"は、縦書きフォントも使用可能。
            文字モデルのサイズは、フォントのサイズでは指定できない。
            引数"size"で指定すること。
            作成された各文字モデルは子モデルとして保持される。
            </remarks>
        </member>
        <member name="M:GLSharp.TextModel.#ctor(System.IntPtr,GLSharp.TextLayout,System.Boolean,System.Single,System.Single,GLSharp.Position,System.String)">
            <summary>
            テキストを保持する親モデルとして、
            テキストなしで初期化する。
            </summary>
            <param name="hdc">デバイスコンテキストのハンドル</param>
            <param name="layout">テキストのレイアウト</param>
            <param name="vertical">テキストが縦書きならtrue、横書きならfalse。</param>
            <param name="charSpace">各文字間のスペース。0なら文字同士が詰めて配置される。1.0fで文字1つ分のスペース。</param>
            <param name="lineSpace">各行間のスペース。0なら各行が詰めて配置される。1.0fで１行分のスペース。</param>
            <param name="pos">初期位置</param>
            <param name="name">このモデルの名前。</param>
        </member>
        <member name="M:GLSharp.TextModel.#ctor(System.IntPtr,GLSharp.TextLayout,System.Boolean,System.String)">
            <summary>
            テキストを保持する親モデルとして、
            テキストなしで初期化する。
            </summary>
            <param name="hdc">デバイスコンテキストのハンドル</param>
            <param name="layout">テキストのレイアウト</param>
            <param name="vertical">テキストが縦書きならtrue、横書きならfalse。</param>
            <param name="name">このモデルの名前。</param>
        </member>
        <member name="M:GLSharp.TextModel.#ctor(System.Char,System.Drawing.Font,System.Single,System.Single,System.Int32,System.IntPtr,GLSharp.Position,GLSharp.Material)">
            <summary>
            アウトラインフォントの文字をポリゴン化したモデルを作成する。
            </summary>
            <param name="c">ポリゴン化する文字</param>
            <param name="font">フォント</param>
            <param name="size">サイズ</param>
            <param name="extrusion">文字モデルの奥行き幅</param>
            <param name="numCurveSplit">文字の曲線部の分割数</param>
            <param name="hdc">デバイスコンテキストのハンドル</param>
            <param name="pos">初期位置</param>
            <param name="material">文字モデルのマテリアル</param>
            <remarks>
            引数"c"は、'\t'非対応。
            引数"font"は、縦書きフォントも使用可能。
            文字モデルのサイズは、フォントのサイズでは指定できない。
            引数"size"で指定すること。
            </remarks>
        </member>
        <member name="M:GLSharp.TextModel.#ctor(System.Char,System.Drawing.Font,System.Single,System.Single,System.IntPtr,GLSharp.Material)">
            <summary>
            アウトラインフォントの文字をポリゴン化したモデルを作成する。
            </summary>
            <param name="c">ポリゴン化する文字</param>
            <param name="font">フォント</param>
            <param name="size">サイズ</param>
            <param name="extrusion">文字モデルの奥行き幅</param>
            <param name="hdc">デバイスコンテキストのハンドル</param>
            <param name="material">文字モデルのマテリアル</param>
            <remarks>
            引数"c"は、'\t'非対応。
            引数"font"は、縦書きフォントも使用可能。
            文字モデルのサイズは、フォントのサイズでは指定できない。
            引数"size"で指定すること。
            </remarks>
        </member>
        <member name="M:GLSharp.TextModel.#ctor(GLSharp.Mesh,System.Char,GLSharp.PolygonGlyphFont,System.String)">
            <summary>
            任意のメッシュをグリフとして、インスタンスを作成する。
            </summary>
            <param name="mesh">グリフを表すメッシュ</param>
            <param name="character">グリフが表す文字</param>
            <param name="fontInfo">フォントの情報</param>
            <param name="name">このモデルの名前</param>
        </member>
        <member name="M:GLSharp.TextModel.#ctor(GLSharp.Mesh,System.Char,GLSharp.Metrics,System.Single,System.Single,GLSharp.PolygonGlyphFont,GLSharp.Position,System.String)">
            <summary>
            任意のメッシュをグリフとして、インスタンスを作成する。
            </summary>
            <param name="mesh">グリフを表すメッシュ</param>
            <param name="character">グリフが表す文字</param>
            <param name="originalMetrics">グリフのデフォルト（サイズが1のとき）のメトリクス</param>
            <param name="cellHeight">グリフのセルの高さ</param>
            <param name="size">グリフのサイズ</param>
            <param name="fontInfo">フォントの情報</param>
            <param name="position">初期位置。ローカル座標系の値のみ有効。ワールド左表系の値はレイアウト時にリセットされるので、指定しても意味がない。</param>
            <param name="name">このモデルの名前</param>
        </member>
        <member name="M:GLSharp.TextModel.AddText(System.String,System.Drawing.Font,System.Single,System.Single,System.Int32,GLSharp.Material)">
            <summary>
            テキストを追加する。
            </summary>
            <param name="text">追加する文字列</param>
            <param name="font">フォント</param>
            <param name="size">文字のサイズ</param>
            <param name="extrusion">文字の厚さ</param>
            <param name="numCurveSplit">文字の曲線部の分割数</param>
            <param name="material">マテリアル</param>
        </member>
        <member name="M:GLSharp.TextModel.Layout">
            <summary>
            このモデルが所持する子モデルをレイアウトする。
            ITextModelインターフェースを実装している子モデルのみが対象。
            それ以外は無視される。
            </summary>
        </member>
        <member name="M:GLSharp.TextModel.GetNextChar(System.Int32,GLSharp.IGlyph@)">
            <summary>
            currentIndexの次のITextModelを取得する。
            次のITextModelとそのインデックスが返される。
            無ければ引数nextはnull、返り値に-1が返される。
            </summary>
        </member>
        <member name="M:GLSharp.TextModel.LayOut(GLSharp.TextLayout,System.Boolean,System.Single,System.Single)">
            <summary>
            このモデルが所持する子モデルをレイアウトする。
            ITextModelインターフェースを実装している子モデルのみが対象。
            それ以外は無視される。
            </summary>
            <param name="layout">レイアウトの方法</param>
            <param name="vertical">縦書きかどうかの指定</param>
            <param name="charSpace">各文字間のスペース。0なら文字同士が詰めて配置される。1.0fで文字1つ分のスペース。</param>
            <param name="lineSpace">各行間のスペース。0なら各行が詰めて配置される。1.0fで１行分のスペース。</param>
        </member>
        <member name="M:GLSharp.TextModel.ResetMetrics">
            <summary>
            OriginalMetrics と Size プロパティを元に、Metrics プロパティの値をリセットする。
            </summary>
        </member>
        <member name="P:GLSharp.TextModel.HDC">
            <summary>
            グリフを作成した時に使用したデバイスコンテキストのハンドルを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.TextModel.Character">
            <summary>
            このモデルが表す文字を取得する。
            </summary>
        </member>
        <member name="P:GLSharp.TextModel.FontInfo">
            <summary>
            このグリフのフォント情報を取得する。
            </summary>
        </member>
        <member name="P:GLSharp.TextModel.Size">
            <summary>
            グリフのサイズを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.TextModel.Extrusion">
            <summary>
            グリフの奥行き幅を取得・設定する。
            </summary>
        </member>
        <member name="P:GLSharp.TextModel.LineMetrics">
            <summary>
            描画するテキストの各行ごとのサイズなどの情報を取得する。
            </summary>
        </member>
        <member name="P:GLSharp.TextModel.CharSpace">
            <summary>
            文字間のスペースを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.TextModel.LineSpace">
            <summary>
            行間のスペースを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.TextModel.TextLayout">
            <summary>
            テキストのレイアウトを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.TextModel.Vertical">
            <summary>
            縦書きであるかどうかを表すフラグを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.TextModel.OriginalMetrics">
            <summary>
            サイズが1.0fのときのグリフのメトリクスを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.TextModel.Metrics">
            <summary>
            レイアウトに使用されるメトリックを取得・設定する。
            </summary>
        </member>
        <member name="P:GLSharp.TextModel.CellHeight">
            <summary>
            グリフのセルの高さを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.TextModel.BreakLine">
            <summary>
            このモデルが改行文字であるかどうかを表すフラグを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.TextModel.IsControl">
            <summary>
            [get] 制御文字かどうか
            </summary>
        </member>
        <member name="T:GLSharp.SelectionData">
            <summary>
            セレクションモードでヒットしたオブジェクトのデータを表す。
            </summary>
        </member>
        <member name="F:GLSharp.SelectionData.nameStackDepth">
            <summary>
            識別番号の階層の深さ
            </summary>
        </member>
        <member name="F:GLSharp.SelectionData.zMax">
            <summary>
            ヒットしたオブジェクトの深度の最大値
            </summary>
        </member>
        <member name="F:GLSharp.SelectionData.zMin">
            <summary>
            ヒットしたオブジェクトの深度の最小値
            </summary>
        </member>
        <member name="F:GLSharp.SelectionData.names">
            <summary>
            ヒットしたオブジェクトの識別番号
            </summary>
        </member>
        <member name="F:GLSharp.SelectionData.item">
            <summary>
            ヒットしたオブジェクト
            </summary>
        </member>
        <member name="M:GLSharp.SelectionData.ParseSelectionBuffer(System.UInt32[])">
            <summary>
            uint[]配列のセレクション・バッファを解析して、
            SelectionDataのリストに変換する。
            </summary>
            <param name="selectionBuffer">セレクションモードで得られたセレクション・バッファ</param>
            <returns>ヒットしたデータのリスト</returns>
        </member>
        <member name="T:GLSharp.TransformMatrixes">
            <summary>
            <para>ビューポート、プロジェクション行列、モデルビュー行列のセット</para>
            <para>OpenGLで使用する変換行列のセット。</para>
            </summary>
        </member>
        <member name="F:GLSharp.TransformMatrixes.viewport">
            <summary>
            ビューポート
            </summary>
        </member>
        <member name="F:GLSharp.TransformMatrixes.projection">
            <summary>
            プロジェクション行列
            </summary>
        </member>
        <member name="F:GLSharp.TransformMatrixes.modelview">
            <summary>
            モデルビュー行列
            </summary>
        </member>
        <member name="M:GLSharp.TransformMatrixes.#ctor(System.Int32[],System.Double[],System.Double[])">
            <summary>
            TransformMatrixesクラスのインスタンスを初期化する。
            </summary>
            <param name="viewport">ビューポート</param>
            <param name="projecton">プロジェクション行列</param>
            <param name="modelview">モデルビュー行列</param>
        </member>
        <member name="M:GLSharp.TransformMatrixes.#ctor">
            <summary>
            TransformMatrixSetクラスのインスタンスを初期化する。
            </summary>
        </member>
        <member name="M:GLSharp.TransformMatrixes.GetCurrent">
            <summary>
            現在のビューポート、プロジェクション行列、モデルビュー行列を取得する。
            </summary>
        </member>
        <member name="M:GLSharp.TransformMatrixes.UnProject(System.Int32,System.Int32,System.Double)">
            <summary>
            ウィンドウ座標とそのデプス値をワールド座標へ変換する。
            </summary>
            <param name="winX"></param>
            <param name="winY"></param>
            <param name="depth"></param>
            <returns></returns>
        </member>
        <member name="M:GLSharp.TransformMatrixes.UnProject(System.Int32,System.Int32,System.Single@)">
            <summary>
            ウィンドウ座標をワールド座標へ変換する。
            <para>デプス値は、デプスバッファからglReadPixels関数で取得される。</para>
            </summary>
            <param name="winX"></param>
            <param name="winY"></param>
            <param name="depth"></param>
            <returns></returns>
        </member>
        <member name="M:GLSharp.TransformMatrixes.Project(System.Double[])">
            <summary>
            ワールド座標をウィンドウ座標へ変換する。
            </summary>
            <param name="coord"></param>
            <returns></returns>
        </member>
        <member name="M:GLSharp.TransformMatrixes.Project(System.Double[],System.Int32@,System.Int32@,System.Double@)">
            <summary>
            ワールド座標をウィンドウ座標へ変換する。
            </summary>
            <param name="coord"></param>
            <param name="winX"></param>
            <param name="winY"></param>
            <param name="depth"></param>
        </member>
        <member name="P:GLSharp.TransformMatrixes.Viewport">
            <summary>
            ビューポートを取得・設定する。
            </summary>
        </member>
        <member name="P:GLSharp.TransformMatrixes.Projection">
            <summary>
            プロジェクション行列を取得・設定する。
            </summary>
        </member>
        <member name="P:GLSharp.TransformMatrixes.Modelview">
            <summary>
            モデルビュー行列を取得・設定する。
            </summary>
        </member>
        <member name="P:GLSharp.TransformMatrixes.Current">
            <summary>
            ビューポート、プロジェクション行列、モデルビュー行列を取得・設定する。
            </summary>
        </member>
        <member name="T:GLSharp.Selection">
            <summary>
            マウスピッキングを行うためのクラス
            </summary>
        </member>
        <member name="F:GLSharp.Selection.selectionBufferLength">
            <summary>
            PickModelメソッド内部で使用されるセレクションバッファの長さ。
            デフォルトは100。
            </summary>
        </member>
        <member name="M:GLSharp.Selection.Pick``1(System.Collections.Generic.IList{``0},GLSharp.IRenderingParams,System.Double[],System.Double[],GLSharp.Camera,System.Int32[],System.Boolean,GLSharp.TransformMatrixes@)">
            <summary>
            OpenGLのセレクションモードを利用して、マウスピッキングを行う。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">対象となるオブジェクトのリスト</param>
            <param name="renderingParams">レンダリングパラメータ</param>
            <param name="mousePos">ピッキングするウィンドウ座標（左下原点）（double[]{x, y}）</param>
            <param name="region">ヒットする範囲の幅と高さ（double[]{width, height}）</param>
            <param name="camera">シーンのカメラ（要プロジェクション設定）</param>
            <param name="viewport">シーンのビューポート</param>
            <param name="pickChild">trueを指定した場合､子オブジェクト単位でヒットする。
            falseの場合は、階層構造のトップのオブジェクトがヒットする。</param>
            <param name="pickedMatrixSet">セレクションモードで使用された変換行列。
            ただし、Modelviewプロパティには引数cameraによるビューイング変換を表す行列が格納される。</param>
            <returns><para>ヒットしたオブジェクトのリスト。</para>
            <para>ヒットしたオブジェクトは、SelectionData.itemフィールドに格納されている。</para></returns>
        </member>
        <member name="M:GLSharp.Selection.GetNearest(System.Collections.Generic.List{GLSharp.SelectionData})">
            <summary>
            <para>ヒットしたオブジェクトのリストから、最も手前にあるオブジェクトを取得する。</para>
            <para>リストのカウントが0の場合はnullを返す。</para>
            </summary>
            <param name="pickedList">ヒットしたオブジェクトのリスト</param>
            <returns><para>最も手前にあるオブジェクト。</para>
            <para>pickedListのカウントが0の場合はnullを返す。</para></returns>
        </member>
        <member name="M:GLSharp.Selection.GetNearest(System.Collections.Generic.List{GLSharp.SelectionData},System.Double@)">
            <summary>
            <para>ヒットしたオブジェクトのリストから、最も手前にあるオブジェクトを取得する。</para>
            <para>リストのカウントが0の場合はnullを返す。</para>
            </summary>
            <param name="pickedList">ヒットしたオブジェクトのリスト</param>
            <param name="depth">ヒットしたデプス値が返される。</param>
            <returns><para>最も手前にあるオブジェクト。</para>
            <para>pickedListのカウントが0の場合はnullを返す。</para></returns>
        </member>
        <member name="M:GLSharp.Selection.GetFarthest(System.Collections.Generic.List{GLSharp.SelectionData})">
            <summary>
            <para>ヒットしたオブジェクトのリストから、最も遠くにあるオブジェクトを取得する。</para>
            <para>リストのカウントが0の場合はnullを返す。</para>
            </summary>
            <param name="pickedList">ヒットしたオブジェクトのリスト</param>
            <returns><para>最も遠くにあるオブジェクト。</para>
            <para>pickedListのカウントが0の場合はnullを返す。</para></returns>
        </member>
        <member name="M:GLSharp.Selection.GetFarthest(System.Collections.Generic.List{GLSharp.SelectionData},System.Double@)">
            <summary>
            <para>ヒットしたオブジェクトのリストから、最も遠くにあるオブジェクトを取得する。</para>
            <para>リストのカウントが0の場合はnullを返す。</para>
            </summary>
            <param name="pickedList">ヒットしたオブジェクトのリスト</param>
            <param name="depth">ヒットしたデプス値が返される。</param>
            <returns><para>最も遠くにあるオブジェクト。</para>
            <para>pickedListのカウントが0の場合はnullを返す。</para></returns>
        </member>
        <member name="P:GLSharp.Selection.SelectionBufferLength">
            <summary>
            <para>[get,set] Pickメソッド内部で使用されるセレクションバッファの長さ。</para>
            <para>デフォルトは100。</para>
            </summary>
        </member>
        <member name="T:GLSharp.glp">
            <summary>
            Properties of OpenGL states.
            </summary>
        </member>
        <member name="P:GLSharp.glp.GLVersion">
            <summary>
            OpenGLのバージョンを取得する。
            </summary>
        </member>
        <member name="P:GLSharp.glp.GLVersionString">
            <summary>
            OpenGLのバージョンを表す文字列を取得する。
            </summary>
        </member>
        <member name="P:GLSharp.glp.ModelviewMatrixStackDepth">
            <summary>
            Get modelview matrix stack depth.
            </summary>
        </member>
        <member name="P:GLSharp.glp.ProjectionMatrixStackDepth">
            <summary>
            Get projection matrix stack depth.
            </summary>
        </member>
        <member name="P:GLSharp.glp.TextureMatrixStackDepth">
            <summary>
            Get texture matrix stack depth.
            </summary>
        </member>
        <member name="P:GLSharp.glp.NameStackDepth">
            <summary>
            Get name stack depth.
            </summary>
        </member>
        <member name="P:GLSharp.glp.AttribStackDepth">
            <summary>
            Get attribure stack depth.
            </summary>
        </member>
        <member name="P:GLSharp.glp.ClientAttribStackDepth">
            <summary>
            Get client attribute stack depth.
            </summary>
        </member>
        <member name="P:GLSharp.glp.Lighting">
            <summary>
            Get or set whether lighting is enabled.
            </summary>
        </member>
        <member name="P:GLSharp.glp.LightModelLocalViewer">
            <summary>
            Get or set the value that specifies how specular reflection angles are computed.
            If params is false, specular reflection angles
            take the view direction to be parallel to
            and in the direction of	the -z axis,
            regardless of the location of the vertex in	eye coordinates.
            Otherwise, specular reflections are computed
            from the origin of	the eye	coordinate system.
            The initial value is false.
            </summary>
        </member>
        <member name="P:GLSharp.glp.LightModelTwoSide">
            <summary>
            Get or set the value that specifies
            whether one- or two-sided lighting calculations are done for polygons.
            The initial value is false.
            </summary>
        </member>
        <member name="P:GLSharp.glp.LightModelAmbient">
            <summary>
            Get or set the values that specify the ambient RGBA intensity of the entire scene.
            The initial ambient scene intensity is (0.2, 0.2, 0.2, 1.0).
            </summary>
        </member>
        <member name="P:GLSharp.glp.DepthTest">
            <summary>
            Get or set whether depth test is enabled.
            </summary>
        </member>
        <member name="P:GLSharp.glp.AlphaTest">
            <summary>
            Get or set whether alpha test is enabled.
            </summary>
        </member>
        <member name="P:GLSharp.glp.CurrentColor">
            <summary>
            Get current color as float[4]{R,G,B,A}.
            </summary>
        </member>
        <member name="P:GLSharp.glp.CurrentNormal">
            <summary>
            Get current Normal as float[3]{x,y,z}.
            </summary>
        </member>
        <member name="P:GLSharp.glp.CurrentRasterPosition">
            <summary>
            Get current raster position as float[4]{x,y,z,w}.
            </summary>
        </member>
        <member name="P:GLSharp.glp.CurrentRasterPositionValid">
            <summary>
            Get whether current raster position is valid.
            </summary>
        </member>
        <member name="P:GLSharp.glp.CurrentRasterColor">
            <summary>
            Get current raster color as float[4]{R,G,B,A}.
            </summary>
        </member>
        <member name="P:GLSharp.glp.CurrentModelviewMatrixFloat">
            <summary>
            Get current modelview matrix as float[16].
            </summary>
        </member>
        <member name="P:GLSharp.glp.CurrentModelviewMatrixDouble">
            <summary>
            Get current modelview matrix as double[16].
            </summary>
        </member>
        <member name="P:GLSharp.glp.CurrentViewport">
            <summary>
            Get current viewport as int[4].
            </summary>
        </member>
        <member name="P:GLSharp.glp.CurrentProjectionMatrixDouble">
            <summary>
            Get current projection matrix as double[16].
            </summary>
        </member>
        <member name="P:GLSharp.glp.CurrentProjectionMatrixFloat">
            <summary>
            Get current projection matrix as float[16].
            </summary>
        </member>
        <member name="P:GLSharp.glp.CurrentTextureMatrixFloat">
            <summary>
            Get current texture matrix as float[16].
            </summary>
        </member>
        <member name="P:GLSharp.glp.CurrentTextureMatrixDouble">
            <summary>
            Get current texture matrix as double[16].
            </summary>
        </member>
        <member name="P:GLSharp.glp.CurrentMatrixMode">
            <summary>
            Get current matrix mode.
            </summary>
        </member>
        <member name="P:GLSharp.glp.CurrentMatrixFloat">
            <summary>
            Get current matrix of current mode as float[16].
            </summary>
        </member>
        <member name="P:GLSharp.glp.CurrentMatrixDouble">
            <summary>
            Get current matrix of current mode as double[16].
            </summary>
        </member>
        <member name="T:GLSharp.Position">
            <summary>
            位置座標と回転の状態を表す。
            </summary>
        </member>
        <member name="F:GLSharp.Position.positionWorld">
            <summary>
            ワールド座標系の位置座標
            </summary>
        </member>
        <member name="F:GLSharp.Position.rotationMatrixWorld">
            <summary>
            ワールド座標系の回転行列
            </summary>
        </member>
        <member name="F:GLSharp.Position.rotationOriginWorld">
            <summary>
            ワールド座標系の回転の中心(x,y,z)
            </summary>
        </member>
        <member name="F:GLSharp.Position.positionLocal">
            <summary>
            ローカル座標系の位置座標
            </summary>
        </member>
        <member name="F:GLSharp.Position.rotationMatrixLocal">
            <summary>
            ローカル座標系の回転行列
            </summary>
        </member>
        <member name="F:GLSharp.Position.rotationOriginLocal">
            <summary>
            ローカル座標系の回転の中心(x,y,z)
            </summary>
        </member>
        <member name="F:GLSharp.Position.scale">
            <summary>
            スケール
            </summary>
        </member>
        <member name="M:GLSharp.Position.OnPositionWorldChange(GLSharp.Position.EventArgs)">
            <summary>
            PositionWorldChangeイベントを発生させます。
            </summary>
            <param name="args">イベントのデータ</param>
        </member>
        <member name="M:GLSharp.Position.OnPositionLocalChange(GLSharp.Position.EventArgs)">
            <summary>
            PositionLocaldChangeイベントを発生させます。
            </summary>
            <param name="args">イベントのデータ</param>
        </member>
        <member name="M:GLSharp.Position.OnRotationWorldChange(GLSharp.Position.EventArgs)">
            <summary>
            RotationWorldChangeイベントを発生させます。
            </summary>
            <param name="args">イベントのデータ</param>
        </member>
        <member name="M:GLSharp.Position.OnRotationLocalChange(GLSharp.Position.EventArgs)">
            <summary>
            RotationLocalChangeイベントを発生させます。
            </summary>
            <param name="args">イベントのデータ</param>
        </member>
        <member name="M:GLSharp.Position.OnScaleChange(GLSharp.Position.EventArgs)">
            <summary>
            ScaleChangeイベントを発生させます。
            </summary>
            <param name="args">イベントのデータ</param>
        </member>
        <member name="M:GLSharp.Position.OnRotationOriginWorldChange(GLSharp.Position.EventArgs)">
            <summary>
            RotationOriginWorldChangeイベントを発生させます。
            </summary>
            <param name="args">イベントのデータ</param>
        </member>
        <member name="M:GLSharp.Position.OnRotationOriginLocalChange(GLSharp.Position.EventArgs)">
            <summary>
            RotationOriginLocalChangeイベントを発生させます。
            </summary>
            <param name="args">イベントのデータ</param>
        </member>
        <member name="M:GLSharp.Position.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:GLSharp.Position.#ctor(System.Single[])">
            <summary>
            コンストラクタ
            </summary>
            <param name="positionWorld">位置座標(ワールド座標系)(x,y,z）</param>
            <exception cref="T:System.ArgumentException">引数 "positionWorld" のLenthが3ではありません。</exception>
        </member>
        <member name="M:GLSharp.Position.#ctor(System.Single[],System.Single[])">
            <summary>
            コンストラクタ
            </summary>
            <param name="positionWorld">位置座標(ワールド座標系)(x,y,z）</param>
            <param name="positionLocal">位置座標(ローカル座標系)(x,y,z）</param>
            <exception cref="T:System.ArgumentException">引数 "positionWorld" または "positionLocal" のLenthが3ではありません。</exception>
        </member>
        <member name="M:GLSharp.Position.ApplyPosition">
            <summary>
            <para>このモデルの位置をセッティングする。</para>
            <para>つまり、OpenGLにこのモデルのモデリング変換行列を乗算する命令を送る｡</para>
            <para>gl.Translate( PositionWorld ）</para>
            <para>gl.MultMatrix( RotationMatrixWorld ）</para>
            <para>gl.Translate( PositionLocal ）</para>
            <para>gl.MultMatrix( RotationMatrixLocal ）</para>
            <para>gl.Scale( Scale )</para>
            <para>の順に行われる。</para>
            </summary>
        </member>
        <member name="M:GLSharp.Position.GetTransformMatrix">
            <summary>
            このインスタンスが表す変換行列を取得する。
            </summary>
            <returns>このインスタンスが表す変換行列</returns>
        </member>
        <member name="M:GLSharp.Position.GetTransformedCoord(System.Single[])">
            <summary>
            座標に、このインスタンスが表す座標変換を適用する。
            </summary>
            <param name="coord">変換を適用する座標</param>
            <returns>変換後の座標</returns>
        </member>
        <member name="M:GLSharp.Position.TransformCoord(System.Single[])">
            <summary>
            座標に、このインスタンスが表す座標変換を適用する。
            </summary>
            <param name="coord">変換を適用する座標</param>
        </member>
        <member name="M:GLSharp.Position.TranslateOnWorld(System.Single,System.Single,System.Single)">
            <summary>
            このモデルの位置を平行移動する。
            （ワールド座標系での移動）
            </summary>
            <param name="x">x軸方向の移動量</param>
            <param name="y">y軸方向の移動量</param>
            <param name="z">z軸方向の移動量</param>
        </member>
        <member name="M:GLSharp.Position.TranslateOnWorld(System.Single[])">
            <summary>
            このモデルの位置を平行移動する。
            （ワールド座標系での移動）
            </summary>
            <param name="t">移動量</param>
        </member>
        <member name="M:GLSharp.Position.TranslateOnLocal(System.Single,System.Single,System.Single)">
            <summary>
            このモデルの位置を平行移動する。
            （ローカル座標系での移動）
            </summary>
            <param name="x">x軸方向の移動量</param>
            <param name="y">y軸方向の移動量</param>
            <param name="z">z軸方向の移動量</param>
        </member>
        <member name="M:GLSharp.Position.TranslateOnLocal(System.Single[])">
            <summary>
            このモデルの位置を平行移動する。
            （ローカル座標系での移動）
            </summary>
            <param name="t">移動量</param>
        </member>
        <member name="M:GLSharp.Position.TranslateAtWorld(System.Single,System.Single,System.Single)">
            <summary>
            このモデルの位置座標を指定するする。
            （ワールド座標系での移動）
            </summary>
            <param name="x">x座標</param>
            <param name="y">y座標</param>
            <param name="z">z座標</param>
        </member>
        <member name="M:GLSharp.Position.TranslateAtWorld(System.Single[])">
            <summary>
            このモデルの位置を平行移動する。
            （ワールド座標系での移動）
            </summary>
            <param name="t">移動量</param>
        </member>
        <member name="M:GLSharp.Position.TranslateAtLocal(System.Single,System.Single,System.Single)">
            <summary>
            このモデルの位置座標を指定するする。
            （ローカル座標系での移動）
            </summary>
            <param name="x">x座標</param>
            <param name="y">y座標</param>
            <param name="z">z座標</param>
        </member>
        <member name="M:GLSharp.Position.TranslateAtLocal(System.Single[])">
            <summary>
            このモデルの位置を平行移動する。
            （ローカル座標系での移動）
            </summary>
            <param name="t">移動量</param>
        </member>
        <member name="M:GLSharp.Position.RotateOnLocal(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            このモデルの回転行列に回転を加える。
            （ローカル座標系での回転）
            </summary>
            <param name="degree">回転させる角度</param>
            <param name="x">回転させる軸を表すベクトルのx成分（要規格化）</param>
            <param name="y">回転させる軸を表すベクトルのy成分（要規格化）</param>
            <param name="z">回転させる軸を表すベクトルのz成分（要規格化）</param>
        </member>
        <member name="M:GLSharp.Position.RotateOnLocal(System.Single,System.Single[])">
            <summary>
            このモデルの回転行列に回転を加える。
            （ローカル座標系での回転）
            </summary>
            <param name="degree">回転させる角度</param>
            <param name="axis">回転させる軸を表すベクトル（要規格化）</param>
        </member>
        <member name="M:GLSharp.Position.RotateOnWorld(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            このモデルの回転行列に回転を加える。
            （ワールド座標系での回転）
            </summary>
            <param name="degree">回転させる角度</param>
            <param name="x">回転させる軸を表すベクトルのx成分（要規格化）</param>
            <param name="y">回転させる軸を表すベクトルのy成分（要規格化）</param>
            <param name="z">回転させる軸を表すベクトルのz成分（要規格化）</param>
        </member>
        <member name="M:GLSharp.Position.RotateOnWorld(System.Single,System.Single[])">
            <summary>
            このモデルの回転行列に回転を加える。
            （ワールド座標系での回転）
            </summary>
            <param name="degree">回転させる角度</param>
            <param name="axis">回転させる軸を表すベクトル（要規格化）</param>
        </member>
        <member name="M:GLSharp.Position.MultRotationOnWorld(System.Single[],System.Boolean)">
            <summary>
            ワールド座標系の回転行列に、回転を表す行列を乗算します。
            </summary>
            <param name="rotationMatrix">乗算する行列</param>
            <param name="multFromLeft">falseの場合は右から、trueの場合は左から乗算を行います。</param>
        </member>
        <member name="M:GLSharp.Position.MultRotationOnLocal(System.Single[],System.Boolean)">
            <summary>
            ローカル座標系の回転行列に、回転を表す行列を乗算します。
            </summary>
            <param name="rotationMatrix">乗算する行列</param>
            <param name="multFromLeft">falseの場合は右から、trueの場合は左から乗算を行います。</param>
        </member>
        <member name="M:GLSharp.Position.CopyTo(GLSharp.Position)">
            <summary>
            対象の位置座標、回転行列などを、このインスタンスと値と同じ値に設定します。
            （イベントはコピーされません。）
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:GLSharp.Position.Clone">
            <summary>
            クローン(同じ値の新規インスタンス)を作成する。
            (イベントに加えられたデリゲートは複製されません。)
            </summary>
            <returns>作成されたクローン</returns>
        </member>
        <member name="P:GLSharp.Position.PositionWorld">
            <summary>
            ワールド座標系の位置座標を取得・設定する。(float[]{ x, y, z })
            </summary>
        </member>
        <member name="P:GLSharp.Position.RotationMatrixWorld">
            <summary>
            ワールド座標系の回転行列を取得・設定する。(float[16])
            </summary>
        </member>
        <member name="P:GLSharp.Position.RotationOriginWorld">
            <summary>
            ワールド座標系の回転の中心を取得・設定する。(float[]{ x, y, z })
            </summary>
        </member>
        <member name="P:GLSharp.Position.PositionLocal">
            <summary>
            ローカル座標系の位置座標を取得・設定する。(float[]{ x, y, z })
            </summary>
        </member>
        <member name="P:GLSharp.Position.RotationMatrixLocal">
            <summary>
            ローカル座標系の回転行列を取得・設定する。(float[16])
            </summary>
        </member>
        <member name="P:GLSharp.Position.RotationOriginLocal">
            <summary>
            ローカル座標系の回転の中心を取得・設定する。(float[]{ x, y, z })
            </summary>
        </member>
        <member name="P:GLSharp.Position.Scale">
             <summary>
            スケールを取得・設定する。(float[]{ x, y, z })
             </summary>
        </member>
        <member name="E:GLSharp.Position.PositionWorldChange">
            <summary>
            ワールド座標系の位置座標が変更されたときに発生します。
            </summary>
        </member>
        <member name="E:GLSharp.Position.PositionLocalChange">
            <summary>
            ローカル座標系の位置座標が変更されたときに発生します。
            </summary>
        </member>
        <member name="E:GLSharp.Position.RotationWorldChange">
            <summary>
            ワールド座標系の回転行列が変更されたときに発生します。
            </summary>
        </member>
        <member name="E:GLSharp.Position.RotationLocalChange">
            <summary>
            ローカル座標系の回転行列が変更されたときに発生します。
            </summary>
        </member>
        <member name="E:GLSharp.Position.RotationOriginWorldChange">
            <summary>
            ワールド座標系の回転の中心座標が変更されたときに発生します。
            </summary>
        </member>
        <member name="E:GLSharp.Position.RotationOriginLocalChange">
            <summary>
            ローカル座標系の回転の中心座標が変更されたときに発生します。
            </summary>
        </member>
        <member name="E:GLSharp.Position.ScaleChange">
            <summary>
            スケールが変更されたときに発生します。
            </summary>
        </member>
        <member name="T:GLSharp.Position.PositionChangeEventHandler">
            <summary>
            Positionクラス内のイベントを処理するメソッドを表します。
            </summary>
            <param name="sender">イベントの発生元</param>
            <param name="args">イベントに使用された値</param>
        </member>
        <member name="T:GLSharp.Position.OperationMethod">
            <summary>
            演算方法を表します。
            </summary>
            <remarks>
            MultL, MultR は、主に行列計算用。
            </remarks>
        </member>
        <member name="F:GLSharp.Position.OperationMethod.Replace">
            <summary>
            置き換え
            </summary>
        </member>
        <member name="F:GLSharp.Position.OperationMethod.Add">
            <summary>
            加算
            </summary>
        </member>
        <member name="F:GLSharp.Position.OperationMethod.Mult">
            <summary>
            乗算
            </summary>
        </member>
        <member name="F:GLSharp.Position.OperationMethod.MultL">
            <summary>
            左から乗算
            </summary>
        </member>
        <member name="F:GLSharp.Position.OperationMethod.MultR">
            <summary>
            右から乗算
            </summary>
        </member>
        <member name="T:GLSharp.Position.EventSender">
            <summary>
            Positionクラスのイベントの発生元を表します。
            </summary>
        </member>
        <member name="M:GLSharp.Position.EventSender.#ctor(GLSharp.Position)">
            <summary>
            PositionEventArgsクラスのインスタンスを初期化します。
            </summary>
            <param name="sender">イベントの発生元のインスタンス</param>
        </member>
        <member name="P:GLSharp.Position.EventSender.PositionWorld">
            <summary>
            ワールド座標系の位置座標を取得・設定します。
            </summary>
        </member>
        <member name="P:GLSharp.Position.EventSender.PositionLocal">
            <summary>
            ローカル座標系の位置座標を取得・設定します。
            </summary>
        </member>
        <member name="P:GLSharp.Position.EventSender.Scale">
            <summary>
            スケールを取得・設定します。
            </summary>
        </member>
        <member name="P:GLSharp.Position.EventSender.RotationMatrixWorld">
            <summary>
            ワールド座標系の回転行列を取得・設定します。
            </summary>
        </member>
        <member name="P:GLSharp.Position.EventSender.RotationMatrixLocal">
            <summary>
            ローカル座標系の回転行列を取得・設定します。
            </summary>
        </member>
        <member name="P:GLSharp.Position.EventSender.RotationOriginWorld">
            <summary>
            ワールド座標系の回転の中心座標を取得・設定します。
            </summary>
        </member>
        <member name="P:GLSharp.Position.EventSender.RotationOriginLocal">
            <summary>
            ローカル座標系の回転の中心座標を取得・設定します。
            </summary>
        </member>
        <member name="T:GLSharp.Position.EventArgs">
            <summary>
            Positionクラスのイベントのデータを表します。
            </summary>
        </member>
        <member name="F:GLSharp.Position.EventArgs.arg">
            <summary>
            変更に使用された値
            </summary>
        </member>
        <member name="F:GLSharp.Position.EventArgs.oldValue">
            <summary>
            変更直前の値
            </summary>
        </member>
        <member name="F:GLSharp.Position.EventArgs.method">
            <summary>
            値の変更（演算）方法
            </summary>
        </member>
        <member name="M:GLSharp.Position.EventArgs.#ctor(System.Single[],System.Single[],GLSharp.Position.OperationMethod)">
            <summary>
            
            </summary>
            <param name="arg">変更に使用された値</param>
            <param name="oldValue">変更直前の値</param>
            <param name="method">値の変更（演算）方法</param>
        </member>
        <member name="T:GLSharp.ArrayCloner">
            <summary>
            ジャグ配列のクローンを作成するための静的クラス
            </summary>
        </member>
        <member name="M:GLSharp.ArrayCloner.Clone``1(``0[][])">
            <summary>
            配列のクローンを作成する。値型の配列用（int, float, doubleなど）。引数arrayがnullの場合はnullを返す。
            </summary>
            <typeparam name="T">クローンを作成する配列の型</typeparam>
            <param name="array">クローンを作成する配列</param>
            <returns>配列のクローン</returns>
        </member>
        <member name="M:GLSharp.ArrayCloner.CloneCloneable``1(``0[])">
            <summary>
            ICloneableインターフェイスを実装している型の配列のクローンを作成する。
            </summary>
            <typeparam name="CloneableT">IClonableインターフェイスを実装している型</typeparam>
            <param name="array">クローンを作成する配列</param>
            <returns>配列のクローン</returns>
        </member>
        <member name="M:GLSharp.ArrayCloner.CloneCloneable``1(System.Collections.Generic.List{``0})">
            <summary>
            ICloneableインターフェイスを実装している型のリストから、そのリストの内容のクローンが格納されたリストを作成する。
            </summary>
            <typeparam name="CloneableT">IClonableインターフェイスを実装している型</typeparam>
            <param name="list">クローンを作成するリスト</param>
            <returns>クローンのリスト</returns>
        </member>
    </members>
</doc>
