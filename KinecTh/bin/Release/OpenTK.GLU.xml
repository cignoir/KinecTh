<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenTK.GLU</name>
    </assembly>
    <members>
        <member name="T:OpenTK.Graphics.OpenGL.Glu">
            <summary>
            Provides access to the OpenGL Utilities library.
            Methods i this library are considered deprecated and should be avoided.
            </summary>
        </member>
        <member name="M:OpenTK.Graphics.OpenGL.Glu.LoadDelegate(System.String,System.Type)">
            <summary>
            Creates a System.Delegate that can be used to call a GLU function, core or extension.
            </summary>
            <param name="name">The name of the GLU function (eg. "gluBuild2DMipmaps")</param>
            <param name="signature">The signature of the GLU function.</param>
            <returns>
            A System.Delegate that can be used to call this GLU function, or null if the specified
            function name did not correspond to an GLU function.
            </returns>
        </member>
        <member name="M:OpenTK.Graphics.OpenGL.Glu.LoadAll">
            <summary>
            Loads all GLU functions (core and extensions).
            </summary>
            <remarks>
            <para>
            Call this function manually whenever you need to update GLU entry points.
            This need will never arise under normal usage patterns.
            </para>
            </remarks>
        </member>
        <member name="M:OpenTK.Graphics.OpenGL.Glu.Load(System.String)">
            <summary>
            Tries to reload the given GLU function (core or extension).
            </summary>
            <param name="function">The name of the GLU function.</param>
            <returns>True if the function was found and reloaded, false otherwise.</returns>
            <remarks>
            <para>
            While the automatic initialisation will load all GLU entry points, in some cases
            the initialization can take place before a render context has been established.
            In this case, use this function to load the entry points for the GLU functions
            you will need, or use LoadAll() to load all available entry points.
            </para>
            <para>
            This function returns true if the given GLU function is supported, false otherwise.
            </para>
            <para>
            To query for supported extensions use the IsExtensionSupported() function instead.
            </para>
            </remarks>
        </member>
        <member name="M:OpenTK.Graphics.OpenGL.Glu.SupportsExtension(System.String)">
            <summary>
            Determines whether the specified GLU extension is available in
            the current GLU context.
            </summary>
            <param name="name">The string for the GLU extension.</param>
            <returns>True if the specified extension is available, false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Graphics.OpenGL.Glu.BuildExtensionList">
            <summary>
            Builds a cache of the supported extensions to speed up searches.
            </summary>
        </member>
        <member name="T:OpenTK.Graphics.GL">
            <summary>
            OpenGL bindings for .NET, implementing OpenGL 3.1, plus extensions.
            </summary>
            <remarks>
            <para>
            This class contains all OpenGL enums and functions defined in the 3.1 specification.
            The official .spec files can be found at: http://opengl.org/registry/.
            </para>
            <para> A valid OpenGL context must be created before calling any OpenGL function.</para>
            <para>
            Use the GL.Load and GL.LoadAll methods to prepare function entry points prior to use. To maintain
            cross-platform compatibility, this must be done for both core and extension functions. The GameWindow
            and the GLControl class will take care of this automatically.
            </para>
            <para>
            You can use the GL.SupportsExtension method to check whether any given category of extension functions
            exists in the current OpenGL context. Keep in mind that different OpenGL contexts may support different
            extensions, and under different entry points. Always check if all required extensions are still supported
            when changing visuals or pixel formats.
            </para>
            <para>
            You may retrieve the entry point for an OpenGL function using the GL.GetDelegate method.
            </para>
            </remarks>
            <see href="http://opengl.org/registry/"/>
            <seealso cref="!:GL.SupportsExtension"/>
            <seealso cref="!:GL.GetDelegate(string)"/>
            <seealso cref="!:GL.LoadAll"/>
            <seealso cref="!:GL.Load"/>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetAddress(System.String)">
            <summary>
            Retrieves the entry point for a dynamically exported OpenGL function.
            </summary>
            <param name="function">The function string for the OpenGL function (eg. "glNewList")</param>
            <returns>
            An IntPtr contaning the address for the entry point, or IntPtr.Zero if the specified
            OpenGL function is not dynamically exported.
            </returns>
            <remarks>
            <para>
            The Marshal.GetDelegateForFunctionPointer method can be used to turn the return value
            into a call-able delegate.
            </para>
            <para>
            This function is cross-platform. It determines the underlying platform and uses the
            correct wgl, glx or agl GetAddress function to retrieve the function pointer.
            </para>
            </remarks>
        </member>
        <member name="M:OpenTK.Graphics.GL.GetExtensionDelegate(System.String,System.Type)">
            <summary>
            Creates a System.Delegate that can be used to call a dynamically exported OpenGL function.
            </summary>
            <param name="name">The name of the OpenGL function (eg. "glNewList")</param>
            <param name="signature">The signature of the OpenGL function.</param>
            <returns>
            A System.Delegate that can be used to call this OpenGL function or null
            if the function is not available in the current OpenGL context.
            </returns>
        </member>
    </members>
</doc>
